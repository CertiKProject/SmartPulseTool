This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 05:06:32,631 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 05:06:32,632 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 05:06:32,642 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 05:06:32,642 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 05:06:32,643 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 05:06:32,644 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 05:06:32,646 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 05:06:32,647 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 05:06:32,648 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 05:06:32,648 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 05:06:32,649 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 05:06:32,649 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 05:06:32,650 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 05:06:32,651 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 05:06:32,651 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 05:06:32,652 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 05:06:32,653 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 05:06:32,654 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 05:06:32,655 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 05:06:32,656 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 05:06:32,657 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 05:06:32,659 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 05:06:32,659 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 05:06:32,659 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 05:06:32,660 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 05:06:32,660 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 05:06:32,660 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 05:06:32,661 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 05:06:32,661 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 05:06:32,661 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 05:06:32,662 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 05:06:32,662 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 05:06:32,663 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 05:06:32,663 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 05:06:32,664 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 05:06:32,664 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 05:06:32,664 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 05:06:32,664 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 05:06:32,665 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 05:06:32,665 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 05:06:32,666 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 05:06:32,673 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 05:06:32,673 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 05:06:32,674 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 05:06:32,674 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 05:06:32,675 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 05:06:32,675 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 05:06:32,675 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 05:06:32,675 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 05:06:32,675 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 05:06:32,675 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 05:06:32,675 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 05:06:32,675 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 05:06:32,676 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 05:06:32,676 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 05:06:32,677 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 05:06:32,677 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 05:06:32,677 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 05:06:32,677 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 05:06:32,677 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 05:06:32,697 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 05:06:32,706 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 05:06:32,708 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 05:06:32,709 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 05:06:32,710 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 05:06:32,710 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl
[2020-11-25 05:06:32,710 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl'
[2020-11-25 05:06:32,786 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 05:06:32,787 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 05:06:32,788 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 05:06:32,788 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 05:06:32,788 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 05:06:32,804 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,805 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,830 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,830 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,849 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,857 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,863 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,871 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 05:06:32,871 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 05:06:32,871 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 05:06:32,873 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 05:06:32,877 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/1) ...
[2020-11-25 05:06:32,891 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(SpaghettiTokenV2.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiTokenV2[this][msg.sender] || balanceOf_SpaghettiTokenV2[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][to] >= 0 && balanceOf_SpaghettiTokenV2[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][msg.sender] >= 0 &&  balanceOf_SpaghettiTokenV2[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiTokenV2.transfer)))
[2020-11-25 05:06:32,896 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(SpaghettiTokenV2.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiTokenV2[this][msg.sender] || balanceOf_SpaghettiTokenV2[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][to] >= 0 && balanceOf_SpaghettiTokenV2[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][msg.sender] >= 0 &&  balanceOf_SpaghettiTokenV2[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiTokenV2.transfer)))
[2020-11-25 05:06:32,903 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(SpaghettiTokenV2.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiTokenV2[this][msg.sender] || balanceOf_SpaghettiTokenV2[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][to] >= 0 && balanceOf_SpaghettiTokenV2[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][msg.sender] >= 0 &&  balanceOf_SpaghettiTokenV2[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiTokenV2.transfer)))
[2020-11-25 05:06:32,909 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=dst_s253 && ( wad_s253>balanceOf_SpaghettiTokenV2[this][msg.sender] || ( balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && wad_s253>=0 ) && wad_s253<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiTokenV2[this][dst_s253]>=0 ) && balanceOf_SpaghettiTokenV2[this][dst_s253]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_SpaghettiTokenV2[this][msg.sender]>=0 ) && balanceOf_SpaghettiTokenV2[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>],IdentifierExpression[dst_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[wad_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiTokenV2,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiTokenV2,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],[IdentifierExpression[dst_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],IdentifierExpression[wad_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[wad_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[wad_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiTokenV2,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],[IdentifierExpression[dst_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiTokenV2,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],[IdentifierExpression[dst_s253,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiTokenV2,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_SpaghettiTokenV2,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_SpaghettiTokenV2>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 05:06:32,913 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(SpaghettiTokenV2.transfer(to, value), msg.sender != to && (value > balanceOf_SpaghettiTokenV2[this][msg.sender] || balanceOf_SpaghettiTokenV2[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][to] >= 0 && balanceOf_SpaghettiTokenV2[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_SpaghettiTokenV2[this][msg.sender] >= 0 &&  balanceOf_SpaghettiTokenV2[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(SpaghettiTokenV2.transfer)))
[2020-11-25 05:06:32,914 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_SpaghettiTokenV20) ==> ( <>AP(fail_transfer_SpaghettiTokenV20) ) ) )
Executed UtopiaSpecLang
[2020-11-25 05:06:32,921 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:06:32 PropertyContainer
[2020-11-25 05:06:32,921 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 05:06:32,921 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 05:06:32,922 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 05:06:32,922 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 05:06:32,922 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/2) ...
[2020-11-25 05:06:32,923 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 05:06:32,923 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 05:06:32,934 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:06:32" (2/2) ...
[2020-11-25 05:06:32,934 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 05:06:32,935 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 05:06:32,935 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 05:06:32,935 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 05:06:32,935 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/2) ...
[2020-11-25 05:06:32,986 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 05:06:32,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:06:32,986 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 05:06:32,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_ERC20
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath
[2020-11-25 05:06:32,987 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__success
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 05:06:32,987 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 05:06:32,988 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success
[2020-11-25 05:06:32,988 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiTokenV2_SpaghettiTokenV2
[2020-11-25 05:06:32,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiTokenV2_SpaghettiTokenV2
[2020-11-25 05:06:32,988 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiTokenV2
[2020-11-25 05:06:32,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiTokenV2
[2020-11-25 05:06:32,988 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiTokenV2
[2020-11-25 05:06:32,988 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiTokenV2
[2020-11-25 05:06:32,988 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L130     BoogieDeclarations]: Found specification of procedure mint_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L130     BoogieDeclarations]: Found specification of procedure give_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure give_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L130     BoogieDeclarations]: Found specification of procedure burn_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L130     BoogieDeclarations]: Found specification of procedure setFoodbank~address_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L138     BoogieDeclarations]: Found implementation of procedure setFoodbank~address_SpaghettiTokenV2
[2020-11-25 05:06:32,989 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiTokenV2
[2020-11-25 05:06:32,990 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L130     BoogieDeclarations]: Found specification of procedure pastav1_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure pastav1_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L130     BoogieDeclarations]: Found specification of procedure foodbank_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure foodbank_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L130     BoogieDeclarations]: Found specification of procedure food_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure food_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L130     BoogieDeclarations]: Found specification of procedure oven_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L138     BoogieDeclarations]: Found implementation of procedure oven_SpaghettiTokenV2
[2020-11-25 05:06:32,991 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DSMath
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DSMath
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SpaghettiTokenV2
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 05:06:32,992 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__success
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure DSMath_DSMath__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiTokenV2_SpaghettiTokenV2__success
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure SpaghettiTokenV2_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiTokenV2__success
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,993 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiTokenV2__success
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiTokenV2__success
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiTokenV2__success
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure mint_SpaghettiTokenV2__success
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure mint_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure give_SpaghettiTokenV2__success
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure give_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure burn_SpaghettiTokenV2__success
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure burn_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,994 INFO  L130     BoogieDeclarations]: Found specification of procedure setFoodbank~address_SpaghettiTokenV2__success
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure setFoodbank~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_SpaghettiTokenV2__success
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiTokenV2__success
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiTokenV2__success
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiTokenV2__success
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiTokenV2__success
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,995 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiTokenV2__success
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiTokenV2__success
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure name_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure pastav1_SpaghettiTokenV2__success
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure pastav1_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure foodbank_SpaghettiTokenV2__success
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure foodbank_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_SpaghettiTokenV2__success
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure food_SpaghettiTokenV2__success
[2020-11-25 05:06:32,996 INFO  L130     BoogieDeclarations]: Found specification of procedure food_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,997 INFO  L130     BoogieDeclarations]: Found specification of procedure oven_SpaghettiTokenV2__success
[2020-11-25 05:06:32,997 INFO  L130     BoogieDeclarations]: Found specification of procedure oven_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,997 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 05:06:32,997 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 05:06:32,997 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 05:06:32,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 05:06:32,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 05:06:32,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 05:06:32,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 05:06:32,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 05:06:32,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 05:06:32,997 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__fail
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath_NoBaseCtor__success
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__fail
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure DSMath_DSMath__success
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__fail
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_DSMath__success
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__fail
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_DSMath__success
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__fail
[2020-11-25 05:06:32,998 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_DSMath__success
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__fail
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiTokenV2_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure SpaghettiTokenV2_SpaghettiTokenV2__success
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address_SpaghettiTokenV2__success
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiTokenV2__fail
[2020-11-25 05:06:32,999 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_SpaghettiTokenV2__success
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_SpaghettiTokenV2__success
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_SpaghettiTokenV2__success
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint_SpaghettiTokenV2__success
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure give_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure give_SpaghettiTokenV2__success
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,000 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn_SpaghettiTokenV2__success
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure setFoodbank~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure setFoodbank~address_SpaghettiTokenV2__success
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_SpaghettiTokenV2__success
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_SpaghettiTokenV2__success
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_SpaghettiTokenV2__success
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,001 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_SpaghettiTokenV2__success
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_SpaghettiTokenV2__success
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_SpaghettiTokenV2__success
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_SpaghettiTokenV2__success
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure pastav1_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure pastav1_SpaghettiTokenV2__success
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure foodbank_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure foodbank_SpaghettiTokenV2__success
[2020-11-25 05:06:33,002 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_SpaghettiTokenV2__success
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure food_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure food_SpaghettiTokenV2__success
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure oven_SpaghettiTokenV2__fail
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure oven_SpaghettiTokenV2__success
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 05:06:33,003 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 05:06:33,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 05:06:33,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 05:06:33,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DSMath
[2020-11-25 05:06:33,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DSMath
[2020-11-25 05:06:33,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SpaghettiTokenV2
[2020-11-25 05:06:33,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 05:06:33,004 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 05:06:33,004 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 05:06:33,474 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:06:33,474 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 05:06:33,556 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 05:06:33,557 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 05:06:33,558 INFO  L202        PluginConnector]: Adding new model SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:06:33 BoogieIcfgContainer
[2020-11-25 05:06:33,559 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:06:32" (2/2) ...
[2020-11-25 05:06:33,559 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 05:06:33,559 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@6ead87fe and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:06:33, skipping insertion in model container
[2020-11-25 05:06:33,559 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 05:06:33,559 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 05:06:33,559 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 05:06:33,561 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 05:06:33,561 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/3) ...
[2020-11-25 05:06:33,561 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@726ba845 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:06:33, skipping insertion in model container
[2020-11-25 05:06:33,561 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:06:32" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 05:06:33,594 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:06:33 NWAContainer
[2020-11-25 05:06:33,594 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 05:06:33,595 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 05:06:33,595 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 05:06:33,595 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 05:06:33,596 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:06:33" (3/4) ...
[2020-11-25 05:06:33,597 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@20fded94 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:06:33, skipping insertion in model container
[2020-11-25 05:06:33,597 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:06:33" (4/4) ...
[2020-11-25 05:06:33,600 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 05:06:33,603 INFO  L110   BuchiProductObserver]: Initial RCFG 1445 locations, 1809 edges
[2020-11-25 05:06:33,604 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 05:06:33,613 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 05:06:34,978 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 05:06:34,984 INFO  L110   BuchiProductObserver]: BuchiProgram size 3402 locations, 5806 edges
[2020-11-25 05:06:34,984 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:06:34 BoogieIcfgContainer
[2020-11-25 05:06:34,984 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 05:06:34,985 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 05:06:34,985 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 05:06:34,986 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 05:06:34,987 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:06:34" (1/1) ...
[2020-11-25 05:06:35,077 INFO  L313           BlockEncoder]: Initial Icfg 3402 locations, 5806 edges
[2020-11-25 05:06:35,078 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 05:06:35,078 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 05:06:35,079 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 05:06:35,079 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 05:06:35,091 INFO  L70    emoveInfeasibleEdges]: Removed 117 edges and 10 locations because of local infeasibility
[2020-11-25 05:06:35,101 INFO  L70        RemoveSinkStates]: Removed 178 edges and 102 locations by removing sink states
[2020-11-25 05:06:35,113 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 05:06:35,117 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 05:06:35,120 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 05:06:35,121 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 05:06:35,126 INFO  L313           BlockEncoder]: Encoded RCFG 3276 locations, 5491 edges
[2020-11-25 05:06:35,126 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:06:35 BasicIcfg
[2020-11-25 05:06:35,126 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 05:06:35,127 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 05:06:35,127 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 05:06:35,129 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 05:06:35,130 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:06:35,130 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:06:32" (1/6) ...
[2020-11-25 05:06:35,131 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@649045c5 and model type SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:06:35, skipping insertion in model container
[2020-11-25 05:06:35,132 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:06:35,132 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:06:32" (2/6) ...
[2020-11-25 05:06:35,132 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@649045c5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:06:35, skipping insertion in model container
[2020-11-25 05:06:35,132 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:06:35,132 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:06:33" (3/6) ...
[2020-11-25 05:06:35,132 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@649045c5 and model type SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:06:35, skipping insertion in model container
[2020-11-25 05:06:35,132 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:06:35,132 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:06:33" (4/6) ...
[2020-11-25 05:06:35,133 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@649045c5 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:06:35, skipping insertion in model container
[2020-11-25 05:06:35,133 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:06:35,133 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:06:34" (5/6) ...
[2020-11-25 05:06:35,133 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@649045c5 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:06:35, skipping insertion in model container
[2020-11-25 05:06:35,133 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 05:06:35,133 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:06:35" (6/6) ...
[2020-11-25 05:06:35,134 INFO  L404   chiAutomizerObserver]: Analyzing ICFG SpaghettiTokenV2_0xe54f9e6ab80ebc28515af8b8233c1aee6506a15e_transfer-fail.bpl_BEv2
[2020-11-25 05:06:35,172 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 05:06:35,172 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 05:06:35,172 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 05:06:35,173 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 05:06:35,173 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 05:06:35,173 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 05:06:35,173 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 05:06:35,173 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 05:06:35,173 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 05:06:35,209 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3276 states.
[2020-11-25 05:06:35,267 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:35,267 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:35,267 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:35,276 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:35,276 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:35,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 05:06:35,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3276 states.
[2020-11-25 05:06:35,300 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:35,300 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:35,300 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:35,302 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:35,302 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND TRUE   revert
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:35,320 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:35,320 INFO  L82        PathProgramCache]: Analyzing trace with hash 2101212488, now seen corresponding path program 1 times
[2020-11-25 05:06:35,325 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:35,351 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:06:35,389 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:06:35,391 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:06:35,391 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:06:35,664 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:06:35,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:06:35,677 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:06:35,679 INFO  L87              Difference]: Start difference. First operand 3276 states. Second operand 4 states.
[2020-11-25 05:06:36,627 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:06:36,627 INFO  L93              Difference]: Finished difference Result 3596 states and 5694 transitions.
[2020-11-25 05:06:36,628 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:06:36,629 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3596 states and 5694 transitions.
[2020-11-25 05:06:36,665 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 05:06:36,706 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3596 states to 3458 states and 5467 transitions.
[2020-11-25 05:06:36,707 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 13
[2020-11-25 05:06:36,712 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1134
[2020-11-25 05:06:36,713 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3458 states and 5467 transitions.
[2020-11-25 05:06:36,729 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:06:36,729 INFO  L728         BuchiCegarLoop]: Abstraction has 3458 states and 5467 transitions.
[2020-11-25 05:06:36,748 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3458 states and 5467 transitions.
[2020-11-25 05:06:36,817 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3458 to 2956.
[2020-11-25 05:06:36,818 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2956 states.
[2020-11-25 05:06:36,827 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2956 states to 2956 states and 4544 transitions.
[2020-11-25 05:06:36,828 INFO  L751         BuchiCegarLoop]: Abstraction has 2956 states and 4544 transitions.
[2020-11-25 05:06:36,828 INFO  L631         BuchiCegarLoop]: Abstraction has 2956 states and 4544 transitions.
[2020-11-25 05:06:36,829 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 05:06:36,829 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2956 states and 4544 transitions.
[2020-11-25 05:06:36,840 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:36,840 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:36,840 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:36,842 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:36,842 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:36,845 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:36,846 INFO  L82        PathProgramCache]: Analyzing trace with hash 392865768, now seen corresponding path program 1 times
[2020-11-25 05:06:36,846 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:36,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:06:36,870 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:06:36,870 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:06:36,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:06:36,872 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:06:36,872 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:06:36,872 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:06:36,872 INFO  L87              Difference]: Start difference. First operand 2956 states and 4544 transitions. cyclomatic complexity: 1590 Second operand 4 states.
[2020-11-25 05:06:37,518 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:06:37,519 INFO  L93              Difference]: Finished difference Result 2772 states and 2997 transitions.
[2020-11-25 05:06:37,519 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:06:37,519 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2772 states and 2997 transitions.
[2020-11-25 05:06:37,533 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:37,546 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2772 states to 2772 states and 2997 transitions.
[2020-11-25 05:06:37,546 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 822
[2020-11-25 05:06:37,547 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 822
[2020-11-25 05:06:37,547 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2772 states and 2997 transitions.
[2020-11-25 05:06:37,550 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:06:37,550 INFO  L728         BuchiCegarLoop]: Abstraction has 2772 states and 2997 transitions.
[2020-11-25 05:06:37,554 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2772 states and 2997 transitions.
[2020-11-25 05:06:37,585 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2772 to 2764.
[2020-11-25 05:06:37,585 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2764 states.
[2020-11-25 05:06:37,590 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2764 states to 2764 states and 2989 transitions.
[2020-11-25 05:06:37,590 INFO  L751         BuchiCegarLoop]: Abstraction has 2764 states and 2989 transitions.
[2020-11-25 05:06:37,590 INFO  L631         BuchiCegarLoop]: Abstraction has 2764 states and 2989 transitions.
[2020-11-25 05:06:37,590 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 05:06:37,591 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2764 states and 2989 transitions.
[2020-11-25 05:06:37,600 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:37,600 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:37,600 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:37,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:37,604 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:37,612 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:37,612 INFO  L82        PathProgramCache]: Analyzing trace with hash 564471372, now seen corresponding path program 1 times
[2020-11-25 05:06:37,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:37,646 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:06:38,110 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 05:06:38,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:06:38,111 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 05:06:38,111 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:06:38,111 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 05:06:38,112 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=207, Unknown=0, NotChecked=0, Total=240
[2020-11-25 05:06:38,112 INFO  L87              Difference]: Start difference. First operand 2764 states and 2989 transitions. cyclomatic complexity: 227 Second operand 16 states.
[2020-11-25 05:06:42,180 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:06:42,180 INFO  L93              Difference]: Finished difference Result 2888 states and 3132 transitions.
[2020-11-25 05:06:42,181 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 05:06:42,181 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2888 states and 3132 transitions.
[2020-11-25 05:06:42,192 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:42,204 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2888 states to 2888 states and 3132 transitions.
[2020-11-25 05:06:42,205 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 846
[2020-11-25 05:06:42,205 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 846
[2020-11-25 05:06:42,205 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2888 states and 3132 transitions.
[2020-11-25 05:06:42,209 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:06:42,209 INFO  L728         BuchiCegarLoop]: Abstraction has 2888 states and 3132 transitions.
[2020-11-25 05:06:42,212 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2888 states and 3132 transitions.
[2020-11-25 05:06:42,237 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2888 to 2814.
[2020-11-25 05:06:42,237 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2814 states.
[2020-11-25 05:06:42,241 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2814 states to 2814 states and 3044 transitions.
[2020-11-25 05:06:42,241 INFO  L751         BuchiCegarLoop]: Abstraction has 2814 states and 3044 transitions.
[2020-11-25 05:06:42,241 INFO  L631         BuchiCegarLoop]: Abstraction has 2814 states and 3044 transitions.
[2020-11-25 05:06:42,241 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 05:06:42,242 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2814 states and 3044 transitions.
[2020-11-25 05:06:42,247 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:42,247 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:42,247 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:42,251 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:42,251 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND TRUE   __exception
[L243]               __tmp__Balance := Balance;
[L244]               __tmp__DType := DType;
[L245]               __tmp__Alloc := Alloc;
[L246]               __tmp__balance_ADDR := balance_ADDR;
[L247]               __tmp__M_Ref_int := M_Ref_int;
[L248]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L249]               __tmp__alloc_allowance_SpaghettiTokenV2_lvl0 := alloc_allowance_SpaghettiTokenV2_lvl0;
[L250]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L251]               __tmp__sum_allowance1 := sum_allowance1;
[L252]               __tmp__Length := Length;
[L253]               __tmp__now := now;
[L254]               __tmp__totalSupply_SpaghettiTokenV2 := totalSupply_SpaghettiTokenV2;
[L255]               __tmp__balanceOf_SpaghettiTokenV2 := balanceOf_SpaghettiTokenV2;
[L256]               __tmp__allowance_SpaghettiTokenV2 := allowance_SpaghettiTokenV2;
[L257]               __tmp__symbol_SpaghettiTokenV2 := symbol_SpaghettiTokenV2;
[L258]               __tmp__decimals_SpaghettiTokenV2 := decimals_SpaghettiTokenV2;
[L259]               __tmp__name_SpaghettiTokenV2 := name_SpaghettiTokenV2;
[L260]               __tmp__pastav1_SpaghettiTokenV2 := pastav1_SpaghettiTokenV2;
[L261]               __tmp__foodbank_SpaghettiTokenV2 := foodbank_SpaghettiTokenV2;
[L262]               __tmp__governance_SpaghettiTokenV2 := governance_SpaghettiTokenV2;
[L263]               __tmp__food_SpaghettiTokenV2 := food_SpaghettiTokenV2;
[L264]               __tmp__oven_SpaghettiTokenV2 := oven_SpaghettiTokenV2;
[L265]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__fail(this, msgsender_MSG, msgvalue_MSG);
[L2098]  CALL        call DSMath_DSMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1973]  CALL        call DSMath_DSMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1958]              assume msgsender_MSG != null;
[L1959]              __tmp__Balance[this] := 0;
[L1973]  RET         call DSMath_DSMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1974]  COND FALSE  !(revert)
[L2098]  RET         call DSMath_DSMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L2099]  COND FALSE  !(revert)
[L2102]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2045]              assume msgsender_MSG != null;
[L2046]              __tmp__Balance[this] := 0;
[L2047]              __tmp__totalSupply_SpaghettiTokenV2[this] := 0;
[L2048]              __tmp__balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2049]              __tmp__sum_balanceOf0[this] := 0;
[L2050]              __tmp__allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2051]              __tmp__sum_allowance1[this] := 0;
[L2052]              __tmp__symbol_SpaghettiTokenV2[this] := 1065626718;
[L2053]              __tmp__decimals_SpaghettiTokenV2[this] := 18;
[L2054]              __tmp__name_SpaghettiTokenV2[this] := -432993173;
[L2055]              __var_1 := null;
[L2056]              __tmp__foodbank_SpaghettiTokenV2[this] := null;
[L2057]              __tmp__governance_SpaghettiTokenV2[this] := null;
[L2058]              __tmp__food_SpaghettiTokenV2[this] := 0;
[L2059]              __tmp__oven_SpaghettiTokenV2[this] := 0;
[L2061]              __tmp__governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2062]              __tmp__totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2063]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] - __tmp__balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2064]              __tmp__balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2065]              __tmp__sum_balanceOf0[this] := __tmp__sum_balanceOf0[this] + __tmp__balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2102]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2103]  COND FALSE  !(revert)
[L265]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__fail(this, msgsender_MSG, msgvalue_MSG);
[L266]               assume revert || gas < 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:42,257 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:42,257 INFO  L82        PathProgramCache]: Analyzing trace with hash 1578901290, now seen corresponding path program 1 times
[2020-11-25 05:06:42,258 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:42,268 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:06:42,316 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 05:06:42,316 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:06:42,316 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:06:42,317 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:06:42,317 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:06:42,317 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:06:42,317 INFO  L87              Difference]: Start difference. First operand 2814 states and 3044 transitions. cyclomatic complexity: 233 Second operand 4 states.
[2020-11-25 05:06:42,667 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:06:42,667 INFO  L93              Difference]: Finished difference Result 3495 states and 3927 transitions.
[2020-11-25 05:06:42,667 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:06:42,667 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3495 states and 3927 transitions.
[2020-11-25 05:06:42,680 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 05:06:42,694 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3495 states to 3423 states and 3855 transitions.
[2020-11-25 05:06:42,694 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1036
[2020-11-25 05:06:42,695 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1036
[2020-11-25 05:06:42,695 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3423 states and 3855 transitions.
[2020-11-25 05:06:42,700 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:06:42,700 INFO  L728         BuchiCegarLoop]: Abstraction has 3423 states and 3855 transitions.
[2020-11-25 05:06:42,703 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3423 states and 3855 transitions.
[2020-11-25 05:06:42,728 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3423 to 2742.
[2020-11-25 05:06:42,728 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2742 states.
[2020-11-25 05:06:42,732 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2742 states to 2742 states and 2971 transitions.
[2020-11-25 05:06:42,732 INFO  L751         BuchiCegarLoop]: Abstraction has 2742 states and 2971 transitions.
[2020-11-25 05:06:42,732 INFO  L631         BuchiCegarLoop]: Abstraction has 2742 states and 2971 transitions.
[2020-11-25 05:06:42,732 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 05:06:42,733 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2742 states and 2971 transitions.
[2020-11-25 05:06:42,738 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:42,738 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:42,738 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:42,740 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:42,740 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND TRUE   choice == 17
[L3599]              gas := gas - 21000;
[L3600]  COND TRUE   gas >= 0
[L3601]              assume msgvalue_MSG == 0;
[L3602]  CALL        call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L330]   CALL        call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L2138]              __var_3 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2139]  CALL        call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2159]              allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236] := wad_s236;
[L2160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2161]              assert { :EventEmitted "Approval_SpaghettiTokenV2" } true;
[L2162]              __ret_0_ := true;
[L2139]  RET         call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2140]  COND FALSE  !(revert)
[L2143]              __ret_0_ := __var_2;
[L330]   RET         call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L331]               assume !revert && gas >= 0;
[L3602]  RET         call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:42,746 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:42,746 INFO  L82        PathProgramCache]: Analyzing trace with hash 1372122307, now seen corresponding path program 1 times
[2020-11-25 05:06:42,747 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:42,769 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:06:43,007 INFO  L134       CoverageAnalysis]: Checked inductivity of 64 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-11-25 05:06:43,007 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:06:43,007 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 05:06:43,008 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:06:43,008 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 05:06:43,008 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 05:06:43,008 INFO  L87              Difference]: Start difference. First operand 2742 states and 2971 transitions. cyclomatic complexity: 232 Second operand 14 states.
[2020-11-25 05:06:45,961 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:06:45,961 INFO  L93              Difference]: Finished difference Result 2792 states and 3026 transitions.
[2020-11-25 05:06:45,961 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 05:06:45,961 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2792 states and 3026 transitions.
[2020-11-25 05:06:45,969 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:45,978 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2792 states to 2792 states and 3026 transitions.
[2020-11-25 05:06:45,978 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 838
[2020-11-25 05:06:45,979 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 838
[2020-11-25 05:06:45,979 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2792 states and 3026 transitions.
[2020-11-25 05:06:45,982 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:06:45,982 INFO  L728         BuchiCegarLoop]: Abstraction has 2792 states and 3026 transitions.
[2020-11-25 05:06:45,985 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2792 states and 3026 transitions.
[2020-11-25 05:06:46,003 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2792 to 2736.
[2020-11-25 05:06:46,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2736 states.
[2020-11-25 05:06:46,007 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2736 states to 2736 states and 2965 transitions.
[2020-11-25 05:06:46,007 INFO  L751         BuchiCegarLoop]: Abstraction has 2736 states and 2965 transitions.
[2020-11-25 05:06:46,007 INFO  L631         BuchiCegarLoop]: Abstraction has 2736 states and 2965 transitions.
[2020-11-25 05:06:46,007 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 05:06:46,007 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2736 states and 2965 transitions.
[2020-11-25 05:06:46,012 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 05:06:46,012 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:46,012 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:46,015 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:46,015 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND FALSE  !(choice == 5)
[L3678]  COND TRUE   choice == 4
[L3679]              gas := gas - 21000;
[L3680]  COND TRUE   gas >= 0
[L3681]              assume msgvalue_MSG == 0;
[L3682]  CALL        call give_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L626]               havoc __exception;
[L627]               revert := false;
[L628]   COND FALSE  !(__exception)
[L654]   CALL        call give_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2566]              __var_26 := null;
[L2567]  COND FALSE  !(!(foodbank_SpaghettiTokenV2[this] != null))
[L2571]              __var_28 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2572]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2573]  CALL        call __var_27 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][foodbank_SpaghettiTokenV2[this]], food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2573]  RET         call __var_27 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][foodbank_SpaghettiTokenV2[this]], food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2574]  COND FALSE  !(revert)
[L2580]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][foodbank_SpaghettiTokenV2[this]];
[L2581]              balanceOf_SpaghettiTokenV2[this][foodbank_SpaghettiTokenV2[this]] := __var_27;
[L2582]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][foodbank_SpaghettiTokenV2[this]];
[L2583]              food_SpaghettiTokenV2[this] := 0;
[L654]   RET         call give_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L655]               assume !revert && gas >= 0;
[L3682]  RET         call give_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:46,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:46,021 INFO  L82        PathProgramCache]: Analyzing trace with hash 1654035425, now seen corresponding path program 1 times
[2020-11-25 05:06:46,021 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:46,036 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:06:46,121 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 1 proven. 58 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 05:06:46,121 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:06:46,121 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 05:06:46,122 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:06:46,122 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 05:06:46,122 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 05:06:46,122 INFO  L87              Difference]: Start difference. First operand 2736 states and 2965 transitions. cyclomatic complexity: 232 Second operand 10 states.
[2020-11-25 05:06:47,168 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:06:47,168 INFO  L93              Difference]: Finished difference Result 2759 states and 3001 transitions.
[2020-11-25 05:06:47,168 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 05:06:47,169 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2759 states and 3001 transitions.
[2020-11-25 05:06:47,177 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:06:47,186 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2759 states to 2759 states and 3001 transitions.
[2020-11-25 05:06:47,186 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 842
[2020-11-25 05:06:47,187 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 842
[2020-11-25 05:06:47,187 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2759 states and 3001 transitions.
[2020-11-25 05:06:47,190 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:06:47,190 INFO  L728         BuchiCegarLoop]: Abstraction has 2759 states and 3001 transitions.
[2020-11-25 05:06:47,193 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2759 states and 3001 transitions.
[2020-11-25 05:06:47,214 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2759 to 2759.
[2020-11-25 05:06:47,214 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2759 states.
[2020-11-25 05:06:47,218 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2759 states to 2759 states and 3001 transitions.
[2020-11-25 05:06:47,218 INFO  L751         BuchiCegarLoop]: Abstraction has 2759 states and 3001 transitions.
[2020-11-25 05:06:47,218 INFO  L631         BuchiCegarLoop]: Abstraction has 2759 states and 3001 transitions.
[2020-11-25 05:06:47,218 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 05:06:47,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2759 states and 3001 transitions.
[2020-11-25 05:06:47,223 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:06:47,223 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:47,223 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:47,225 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:47,225 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:47,230 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:47,230 INFO  L82        PathProgramCache]: Analyzing trace with hash -681812330, now seen corresponding path program 1 times
[2020-11-25 05:06:47,231 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:47,265 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:06:47,808 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 74 DAG size of output: 58
[2020-11-25 05:06:48,257 WARN  L188               SmtUtils]: Spent 178.00 ms on a formula simplification. DAG size of input: 88 DAG size of output: 67
[2020-11-25 05:06:48,739 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 0 proven. 59 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 05:06:48,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:06:48,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 05:06:48,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:06:48,740 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 05:06:48,740 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=539, Unknown=0, NotChecked=0, Total=600
[2020-11-25 05:06:48,741 INFO  L87              Difference]: Start difference. First operand 2759 states and 3001 transitions. cyclomatic complexity: 248 Second operand 25 states.
[2020-11-25 05:06:58,512 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:06:58,512 INFO  L93              Difference]: Finished difference Result 2890 states and 3189 transitions.
[2020-11-25 05:06:58,512 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 05:06:58,512 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2890 states and 3189 transitions.
[2020-11-25 05:06:58,518 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:06:58,525 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2890 states to 2890 states and 3189 transitions.
[2020-11-25 05:06:58,525 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 05:06:58,525 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-25 05:06:58,526 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2890 states and 3189 transitions.
[2020-11-25 05:06:58,528 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:06:58,528 INFO  L728         BuchiCegarLoop]: Abstraction has 2890 states and 3189 transitions.
[2020-11-25 05:06:58,531 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2890 states and 3189 transitions.
[2020-11-25 05:06:58,548 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2890 to 2799.
[2020-11-25 05:06:58,548 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2799 states.
[2020-11-25 05:06:58,551 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2799 states to 2799 states and 3077 transitions.
[2020-11-25 05:06:58,551 INFO  L751         BuchiCegarLoop]: Abstraction has 2799 states and 3077 transitions.
[2020-11-25 05:06:58,552 INFO  L631         BuchiCegarLoop]: Abstraction has 2799 states and 3077 transitions.
[2020-11-25 05:06:58,552 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 05:06:58,552 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2799 states and 3077 transitions.
[2020-11-25 05:06:58,555 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:06:58,555 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:06:58,555 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:06:58,556 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:06:58,557 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND TRUE   choice == 18
[L3592]              gas := gas - 21000;
[L3593]  COND TRUE   gas >= 0
[L3594]              assume wad_s399 >= 0 && wad_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3595]              assume msgvalue_MSG == 0;
[L3596]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L496]               havoc __exception;
[L497]               revert := false;
[L498]   COND FALSE  !(__exception)
[L524]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L524]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L525]               assume !revert && gas >= 0;
[L3596]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:06:58,561 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:06:58,561 INFO  L82        PathProgramCache]: Analyzing trace with hash -700791172, now seen corresponding path program 1 times
[2020-11-25 05:06:58,562 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:06:58,602 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:07:02,616 WARN  L188               SmtUtils]: Spent 187.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 80
[2020-11-25 05:07:02,767 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 79
[2020-11-25 05:07:04,715 WARN  L188               SmtUtils]: Spent 1.63 s on a formula simplification. DAG size of input: 322 DAG size of output: 75
[2020-11-25 05:07:07,880 WARN  L188               SmtUtils]: Spent 1.62 s on a formula simplification. DAG size of input: 322 DAG size of output: 74
[2020-11-25 05:07:14,530 WARN  L188               SmtUtils]: Spent 6.36 s on a formula simplification. DAG size of input: 335 DAG size of output: 94
[2020-11-25 05:07:17,396 WARN  L188               SmtUtils]: Spent 1.23 s on a formula simplification. DAG size of input: 342 DAG size of output: 15
[2020-11-25 05:07:23,825 WARN  L188               SmtUtils]: Spent 4.34 s on a formula simplification. DAG size of input: 330 DAG size of output: 132
[2020-11-25 05:07:32,979 WARN  L188               SmtUtils]: Spent 6.53 s on a formula simplification. DAG size of input: 387 DAG size of output: 114
[2020-11-25 05:07:35,022 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 3 proven. 9 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 05:07:35,023 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:07:35,023 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 05:07:35,023 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:07:35,024 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 05:07:35,024 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=90, Invalid=1100, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 05:07:35,024 INFO  L87              Difference]: Start difference. First operand 2799 states and 3077 transitions. cyclomatic complexity: 288 Second operand 35 states.
[2020-11-25 05:07:35,999 WARN  L188               SmtUtils]: Spent 344.00 ms on a formula simplification that was a NOOP. DAG size: 133
[2020-11-25 05:07:47,426 WARN  L188               SmtUtils]: Spent 880.00 ms on a formula simplification. DAG size of input: 173 DAG size of output: 165
[2020-11-25 05:07:52,206 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 92
[2020-11-25 05:08:02,808 WARN  L188               SmtUtils]: Spent 740.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 177
[2020-11-25 05:08:04,930 WARN  L188               SmtUtils]: Spent 1.11 s on a formula simplification. DAG size of input: 231 DAG size of output: 213
[2020-11-25 05:08:06,225 WARN  L188               SmtUtils]: Spent 982.00 ms on a formula simplification. DAG size of input: 201 DAG size of output: 201
[2020-11-25 05:08:28,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:08:28,599 INFO  L93              Difference]: Finished difference Result 2987 states and 3326 transitions.
[2020-11-25 05:08:28,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 05:08:28,600 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2987 states and 3326 transitions.
[2020-11-25 05:08:28,608 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:08:28,619 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2987 states to 2987 states and 3326 transitions.
[2020-11-25 05:08:28,619 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 862
[2020-11-25 05:08:28,620 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 862
[2020-11-25 05:08:28,620 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2987 states and 3326 transitions.
[2020-11-25 05:08:28,624 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:08:28,624 INFO  L728         BuchiCegarLoop]: Abstraction has 2987 states and 3326 transitions.
[2020-11-25 05:08:28,627 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2987 states and 3326 transitions.
[2020-11-25 05:08:28,651 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2987 to 2858.
[2020-11-25 05:08:28,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2858 states.
[2020-11-25 05:08:28,656 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2858 states to 2858 states and 3166 transitions.
[2020-11-25 05:08:28,656 INFO  L751         BuchiCegarLoop]: Abstraction has 2858 states and 3166 transitions.
[2020-11-25 05:08:28,656 INFO  L631         BuchiCegarLoop]: Abstraction has 2858 states and 3166 transitions.
[2020-11-25 05:08:28,656 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 05:08:28,656 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2858 states and 3166 transitions.
[2020-11-25 05:08:28,661 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:08:28,661 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:08:28,661 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:08:28,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:08:28,662 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND TRUE   choice == 18
[L3592]              gas := gas - 21000;
[L3593]  COND TRUE   gas >= 0
[L3594]              assume wad_s399 >= 0 && wad_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3595]              assume msgvalue_MSG == 0;
[L3596]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L496]               havoc __exception;
[L497]               revert := false;
[L498]   COND FALSE  !(__exception)
[L524]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND TRUE   src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L2331]  COND FALSE  !(!(allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] >= wad_s399))
[L2335]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2336]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2336]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2337]  COND FALSE  !(revert)
[L2343]              sum_allowance1[src_s399] := sum_allowance1[src_s399] - allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2344]              allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] := __var_6;
[L2345]              sum_allowance1[src_s399] := sum_allowance1[src_s399] + allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L524]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L525]               assume !revert && gas >= 0;
[L3596]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:08:28,667 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:08:28,667 INFO  L82        PathProgramCache]: Analyzing trace with hash 651500335, now seen corresponding path program 1 times
[2020-11-25 05:08:28,668 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:08:28,706 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:08:32,487 WARN  L188               SmtUtils]: Spent 1.29 s on a formula simplification. DAG size of input: 233 DAG size of output: 130
[2020-11-25 05:08:33,304 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 05:08:34,485 WARN  L188               SmtUtils]: Spent 1.37 s on a formula simplification. DAG size of input: 233 DAG size of output: 126
[2020-11-25 05:08:38,226 WARN  L188               SmtUtils]: Spent 3.35 s on a formula simplification. DAG size of input: 216 DAG size of output: 183
[2020-11-25 05:08:40,098 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 131 DAG size of output: 118
[2020-11-25 05:08:42,936 WARN  L188               SmtUtils]: Spent 2.19 s on a formula simplification. DAG size of input: 249 DAG size of output: 205
[2020-11-25 05:08:43,840 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 6 proven. 10 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 05:08:43,840 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:08:43,840 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 05:08:43,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:08:43,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 05:08:43,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=82, Invalid=910, Unknown=0, NotChecked=0, Total=992
[2020-11-25 05:08:43,841 INFO  L87              Difference]: Start difference. First operand 2858 states and 3166 transitions. cyclomatic complexity: 320 Second operand 32 states.
[2020-11-25 05:08:45,494 WARN  L188               SmtUtils]: Spent 1.32 s on a formula simplification. DAG size of input: 251 DAG size of output: 247
[2020-11-25 05:08:47,005 WARN  L188               SmtUtils]: Spent 1.33 s on a formula simplification. DAG size of input: 253 DAG size of output: 249
[2020-11-25 05:08:49,216 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 39
[2020-11-25 05:08:51,748 WARN  L188               SmtUtils]: Spent 225.00 ms on a formula simplification. DAG size of input: 288 DAG size of output: 74
[2020-11-25 05:08:52,566 WARN  L188               SmtUtils]: Spent 238.00 ms on a formula simplification. DAG size of input: 289 DAG size of output: 75
[2020-11-25 05:08:58,346 WARN  L188               SmtUtils]: Spent 288.00 ms on a formula simplification. DAG size of input: 308 DAG size of output: 88
[2020-11-25 05:09:00,369 WARN  L188               SmtUtils]: Spent 1.81 s on a formula simplification. DAG size of input: 286 DAG size of output: 282
[2020-11-25 05:09:04,567 WARN  L188               SmtUtils]: Spent 2.02 s on a formula simplification. DAG size of input: 300 DAG size of output: 296
[2020-11-25 05:09:07,706 WARN  L188               SmtUtils]: Spent 2.43 s on a formula simplification. DAG size of input: 319 DAG size of output: 315
[2020-11-25 05:09:09,707 WARN  L188               SmtUtils]: Spent 1.64 s on a formula simplification. DAG size of input: 284 DAG size of output: 280
[2020-11-25 05:09:22,416 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:09:22,416 INFO  L93              Difference]: Finished difference Result 2971 states and 3334 transitions.
[2020-11-25 05:09:22,417 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 05:09:22,417 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2971 states and 3334 transitions.
[2020-11-25 05:09:22,423 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:09:22,431 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2971 states to 2971 states and 3334 transitions.
[2020-11-25 05:09:22,431 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 862
[2020-11-25 05:09:22,432 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 862
[2020-11-25 05:09:22,432 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2971 states and 3334 transitions.
[2020-11-25 05:09:22,434 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:09:22,434 INFO  L728         BuchiCegarLoop]: Abstraction has 2971 states and 3334 transitions.
[2020-11-25 05:09:22,436 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2971 states and 3334 transitions.
[2020-11-25 05:09:22,454 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2971 to 2805.
[2020-11-25 05:09:22,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2805 states.
[2020-11-25 05:09:22,457 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2805 states to 2805 states and 3105 transitions.
[2020-11-25 05:09:22,457 INFO  L751         BuchiCegarLoop]: Abstraction has 2805 states and 3105 transitions.
[2020-11-25 05:09:22,457 INFO  L631         BuchiCegarLoop]: Abstraction has 2805 states and 3105 transitions.
[2020-11-25 05:09:22,457 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 05:09:22,457 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2805 states and 3105 transitions.
[2020-11-25 05:09:22,461 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:09:22,461 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:09:22,461 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:09:22,462 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:09:22,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:09:22,467 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:09:22,467 INFO  L82        PathProgramCache]: Analyzing trace with hash 1281777739, now seen corresponding path program 1 times
[2020-11-25 05:09:22,467 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:09:22,501 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:09:24,674 WARN  L188               SmtUtils]: Spent 729.00 ms on a formula simplification. DAG size of input: 288 DAG size of output: 90
[2020-11-25 05:09:25,896 WARN  L188               SmtUtils]: Spent 616.00 ms on a formula simplification. DAG size of input: 254 DAG size of output: 97
[2020-11-25 05:09:26,527 WARN  L188               SmtUtils]: Spent 417.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 66
[2020-11-25 05:09:27,465 WARN  L188               SmtUtils]: Spent 626.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 71
[2020-11-25 05:09:27,931 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 123 DAG size of output: 17
[2020-11-25 05:09:28,755 WARN  L188               SmtUtils]: Spent 388.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 63
[2020-11-25 05:09:29,955 WARN  L188               SmtUtils]: Spent 868.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 80
[2020-11-25 05:09:30,915 INFO  L134       CoverageAnalysis]: Checked inductivity of 100 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 91 trivial. 0 not checked.
[2020-11-25 05:09:30,915 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:09:30,915 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 05:09:30,915 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:09:30,916 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 05:09:30,916 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=112, Invalid=1078, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 05:09:30,916 INFO  L87              Difference]: Start difference. First operand 2805 states and 3105 transitions. cyclomatic complexity: 312 Second operand 35 states.
[2020-11-25 05:09:31,931 WARN  L188               SmtUtils]: Spent 745.00 ms on a formula simplification that was a NOOP. DAG size: 223
[2020-11-25 05:09:38,542 WARN  L188               SmtUtils]: Spent 3.15 s on a formula simplification. DAG size of input: 300 DAG size of output: 268
[2020-11-25 05:09:46,279 WARN  L188               SmtUtils]: Spent 1.86 s on a formula simplification. DAG size of input: 274 DAG size of output: 265
[2020-11-25 05:09:48,953 WARN  L188               SmtUtils]: Spent 1.89 s on a formula simplification. DAG size of input: 312 DAG size of output: 292
[2020-11-25 05:09:50,531 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 90 DAG size of output: 89
[2020-11-25 05:09:50,899 WARN  L188               SmtUtils]: Spent 260.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 65
[2020-11-25 05:09:51,608 WARN  L188               SmtUtils]: Spent 518.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 82
[2020-11-25 05:10:00,323 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:10:00,323 INFO  L93              Difference]: Finished difference Result 2993 states and 3357 transitions.
[2020-11-25 05:10:00,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 05:10:00,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2993 states and 3357 transitions.
[2020-11-25 05:10:00,330 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:00,338 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2993 states to 2993 states and 3357 transitions.
[2020-11-25 05:10:00,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 874
[2020-11-25 05:10:00,338 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 874
[2020-11-25 05:10:00,338 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2993 states and 3357 transitions.
[2020-11-25 05:10:00,340 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:10:00,340 INFO  L728         BuchiCegarLoop]: Abstraction has 2993 states and 3357 transitions.
[2020-11-25 05:10:00,343 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2993 states and 3357 transitions.
[2020-11-25 05:10:00,360 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2993 to 2863.
[2020-11-25 05:10:00,361 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2863 states.
[2020-11-25 05:10:00,364 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2863 states to 2863 states and 3172 transitions.
[2020-11-25 05:10:00,364 INFO  L751         BuchiCegarLoop]: Abstraction has 2863 states and 3172 transitions.
[2020-11-25 05:10:00,364 INFO  L631         BuchiCegarLoop]: Abstraction has 2863 states and 3172 transitions.
[2020-11-25 05:10:00,364 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 05:10:00,364 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2863 states and 3172 transitions.
[2020-11-25 05:10:00,367 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:00,367 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:10:00,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:10:00,369 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:10:00,369 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2508]  CALL        call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2508]  RET         call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2509]  COND FALSE  !(revert)
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:10:00,372 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:10:00,373 INFO  L82        PathProgramCache]: Analyzing trace with hash -504848368, now seen corresponding path program 1 times
[2020-11-25 05:10:00,373 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:10:00,384 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:10:00,446 INFO  L134       CoverageAnalysis]: Checked inductivity of 103 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 102 trivial. 0 not checked.
[2020-11-25 05:10:00,446 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:10:00,446 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:10:00,447 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:10:00,447 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:10:00,447 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:10:00,447 INFO  L87              Difference]: Start difference. First operand 2863 states and 3172 transitions. cyclomatic complexity: 321 Second operand 3 states.
[2020-11-25 05:10:00,469 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:10:00,469 INFO  L93              Difference]: Finished difference Result 2885 states and 3195 transitions.
[2020-11-25 05:10:00,469 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:10:00,469 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2885 states and 3195 transitions.
[2020-11-25 05:10:00,475 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:00,482 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2885 states to 2885 states and 3195 transitions.
[2020-11-25 05:10:00,482 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 848
[2020-11-25 05:10:00,482 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 848
[2020-11-25 05:10:00,482 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2885 states and 3195 transitions.
[2020-11-25 05:10:00,484 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:10:00,484 INFO  L728         BuchiCegarLoop]: Abstraction has 2885 states and 3195 transitions.
[2020-11-25 05:10:00,487 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2885 states and 3195 transitions.
[2020-11-25 05:10:00,502 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2885 to 2873.
[2020-11-25 05:10:00,502 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2873 states.
[2020-11-25 05:10:00,505 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2873 states to 2873 states and 3182 transitions.
[2020-11-25 05:10:00,505 INFO  L751         BuchiCegarLoop]: Abstraction has 2873 states and 3182 transitions.
[2020-11-25 05:10:00,506 INFO  L631         BuchiCegarLoop]: Abstraction has 2873 states and 3182 transitions.
[2020-11-25 05:10:00,506 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 05:10:00,506 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2873 states and 3182 transitions.
[2020-11-25 05:10:00,509 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:00,509 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:10:00,509 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:10:00,510 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:10:00,511 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2488]  CALL        call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2677]              __ret_0_ := balanceOf_SpaghettiTokenV2[this][arg551_s0];
[L2488]  RET         call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2489]  COND FALSE  !(revert)
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2508]  CALL        call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2508]  RET         call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2509]  COND FALSE  !(revert)
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:10:00,515 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:10:00,515 INFO  L82        PathProgramCache]: Analyzing trace with hash 1507693352, now seen corresponding path program 1 times
[2020-11-25 05:10:00,516 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:10:00,550 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:10:01,842 WARN  L188               SmtUtils]: Spent 703.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 79
[2020-11-25 05:10:02,459 WARN  L188               SmtUtils]: Spent 354.00 ms on a formula simplification. DAG size of input: 138 DAG size of output: 15
[2020-11-25 05:10:03,376 WARN  L188               SmtUtils]: Spent 554.00 ms on a formula simplification. DAG size of input: 150 DAG size of output: 96
[2020-11-25 05:10:04,223 WARN  L188               SmtUtils]: Spent 477.00 ms on a formula simplification. DAG size of input: 160 DAG size of output: 99
[2020-11-25 05:10:04,910 INFO  L134       CoverageAnalysis]: Checked inductivity of 103 backedges. 6 proven. 59 refuted. 0 times theorem prover too weak. 38 trivial. 0 not checked.
[2020-11-25 05:10:04,910 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:10:04,910 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 05:10:04,910 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:10:04,911 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 05:10:04,911 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=122, Invalid=1210, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 05:10:04,911 INFO  L87              Difference]: Start difference. First operand 2873 states and 3182 transitions. cyclomatic complexity: 321 Second operand 37 states.
[2020-11-25 05:10:17,686 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:10:17,687 INFO  L93              Difference]: Finished difference Result 3080 states and 3455 transitions.
[2020-11-25 05:10:17,687 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 05:10:17,687 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3080 states and 3455 transitions.
[2020-11-25 05:10:17,694 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:17,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3080 states to 3080 states and 3455 transitions.
[2020-11-25 05:10:17,701 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 05:10:17,702 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-25 05:10:17,702 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3080 states and 3455 transitions.
[2020-11-25 05:10:17,704 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:10:17,704 INFO  L728         BuchiCegarLoop]: Abstraction has 3080 states and 3455 transitions.
[2020-11-25 05:10:17,707 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3080 states and 3455 transitions.
[2020-11-25 05:10:17,723 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3080 to 2875.
[2020-11-25 05:10:17,723 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2875 states.
[2020-11-25 05:10:17,726 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2875 states to 2875 states and 3184 transitions.
[2020-11-25 05:10:17,726 INFO  L751         BuchiCegarLoop]: Abstraction has 2875 states and 3184 transitions.
[2020-11-25 05:10:17,727 INFO  L631         BuchiCegarLoop]: Abstraction has 2875 states and 3184 transitions.
[2020-11-25 05:10:17,727 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 05:10:17,727 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2875 states and 3184 transitions.
[2020-11-25 05:10:17,730 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:17,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:10:17,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:10:17,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:10:17,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND TRUE   src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L2331]  COND FALSE  !(!(allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] >= wad_s399))
[L2335]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2336]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2336]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2337]  COND FALSE  !(revert)
[L2343]              sum_allowance1[src_s399] := sum_allowance1[src_s399] - allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2344]              allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] := __var_6;
[L2345]              sum_allowance1[src_s399] := sum_allowance1[src_s399] + allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:10:17,735 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:10:17,735 INFO  L82        PathProgramCache]: Analyzing trace with hash 1038382308, now seen corresponding path program 1 times
[2020-11-25 05:10:17,736 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:10:17,752 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:10:17,838 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-11-25 05:10:17,839 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:10:17,839 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 05:10:17,839 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:10:17,839 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 05:10:17,839 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 05:10:17,839 INFO  L87              Difference]: Start difference. First operand 2875 states and 3184 transitions. cyclomatic complexity: 321 Second operand 3 states.
[2020-11-25 05:10:17,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:10:17,859 INFO  L93              Difference]: Finished difference Result 2913 states and 3227 transitions.
[2020-11-25 05:10:17,859 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 05:10:17,859 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2913 states and 3227 transitions.
[2020-11-25 05:10:17,865 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:17,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2913 states to 2913 states and 3227 transitions.
[2020-11-25 05:10:17,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 842
[2020-11-25 05:10:17,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 842
[2020-11-25 05:10:17,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2913 states and 3227 transitions.
[2020-11-25 05:10:17,873 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:10:17,874 INFO  L728         BuchiCegarLoop]: Abstraction has 2913 states and 3227 transitions.
[2020-11-25 05:10:17,876 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2913 states and 3227 transitions.
[2020-11-25 05:10:17,892 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2913 to 2913.
[2020-11-25 05:10:17,892 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2913 states.
[2020-11-25 05:10:17,898 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2913 states to 2913 states and 3227 transitions.
[2020-11-25 05:10:17,898 INFO  L751         BuchiCegarLoop]: Abstraction has 2913 states and 3227 transitions.
[2020-11-25 05:10:17,898 INFO  L631         BuchiCegarLoop]: Abstraction has 2913 states and 3227 transitions.
[2020-11-25 05:10:17,898 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 05:10:17,898 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2913 states and 3227 transitions.
[2020-11-25 05:10:17,903 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:17,903 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:10:17,903 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:10:17,905 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:10:17,906 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2488]  CALL        call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2677]              __ret_0_ := balanceOf_SpaghettiTokenV2[this][arg551_s0];
[L2488]  RET         call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2489]  COND FALSE  !(revert)
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2508]  CALL        call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND TRUE   src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L2331]  COND FALSE  !(!(allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] >= wad_s399))
[L2335]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2336]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2336]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2337]  COND FALSE  !(revert)
[L2343]              sum_allowance1[src_s399] := sum_allowance1[src_s399] - allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2344]              allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] := __var_6;
[L2345]              sum_allowance1[src_s399] := sum_allowance1[src_s399] + allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2508]  RET         call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2509]  COND FALSE  !(revert)
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:10:17,911 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:10:17,911 INFO  L82        PathProgramCache]: Analyzing trace with hash 747284475, now seen corresponding path program 1 times
[2020-11-25 05:10:17,912 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:10:17,985 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:10:18,513 WARN  L188               SmtUtils]: Spent 169.00 ms on a formula simplification. DAG size of input: 82 DAG size of output: 69
[2020-11-25 05:10:18,942 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification. DAG size of input: 89 DAG size of output: 83
[2020-11-25 05:10:19,479 INFO  L134       CoverageAnalysis]: Checked inductivity of 111 backedges. 10 proven. 59 refuted. 0 times theorem prover too weak. 42 trivial. 0 not checked.
[2020-11-25 05:10:19,479 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:10:19,479 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 05:10:19,480 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:10:19,480 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 05:10:19,480 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=1154, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 05:10:19,480 INFO  L87              Difference]: Start difference. First operand 2913 states and 3227 transitions. cyclomatic complexity: 326 Second operand 36 states.
[2020-11-25 05:10:31,449 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:10:31,449 INFO  L93              Difference]: Finished difference Result 3020 states and 3397 transitions.
[2020-11-25 05:10:31,449 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 05:10:31,449 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3020 states and 3397 transitions.
[2020-11-25 05:10:31,456 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:31,463 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3020 states to 3020 states and 3397 transitions.
[2020-11-25 05:10:31,463 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 05:10:31,463 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-25 05:10:31,464 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3020 states and 3397 transitions.
[2020-11-25 05:10:31,465 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:10:31,466 INFO  L728         BuchiCegarLoop]: Abstraction has 3020 states and 3397 transitions.
[2020-11-25 05:10:31,468 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3020 states and 3397 transitions.
[2020-11-25 05:10:31,482 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3020 to 2892.
[2020-11-25 05:10:31,482 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2892 states.
[2020-11-25 05:10:31,486 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2892 states to 2892 states and 3196 transitions.
[2020-11-25 05:10:31,486 INFO  L751         BuchiCegarLoop]: Abstraction has 2892 states and 3196 transitions.
[2020-11-25 05:10:31,486 INFO  L631         BuchiCegarLoop]: Abstraction has 2892 states and 3196 transitions.
[2020-11-25 05:10:31,486 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 05:10:31,486 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2892 states and 3196 transitions.
[2020-11-25 05:10:31,489 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:31,489 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:10:31,489 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:10:31,490 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:10:31,491 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND TRUE   choice == 17
[L3599]              gas := gas - 21000;
[L3600]  COND TRUE   gas >= 0
[L3601]              assume msgvalue_MSG == 0;
[L3602]  CALL        call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L330]   CALL        call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L2138]              __var_3 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2139]  CALL        call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2159]              allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236] := wad_s236;
[L2160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2161]              assert { :EventEmitted "Approval_SpaghettiTokenV2" } true;
[L2162]              __ret_0_ := true;
[L2139]  RET         call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2140]  COND FALSE  !(revert)
[L2143]              __ret_0_ := __var_2;
[L330]   RET         call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L331]               assume !revert && gas >= 0;
[L3602]  RET         call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:10:31,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:10:31,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 2053849599, now seen corresponding path program 1 times
[2020-11-25 05:10:31,496 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:10:31,529 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:10:32,186 INFO  L134       CoverageAnalysis]: Checked inductivity of 174 backedges. 0 proven. 110 refuted. 0 times theorem prover too weak. 64 trivial. 0 not checked.
[2020-11-25 05:10:32,187 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:10:32,187 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [22] total 22
[2020-11-25 05:10:32,187 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:10:32,188 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 05:10:32,188 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=55, Invalid=451, Unknown=0, NotChecked=0, Total=506
[2020-11-25 05:10:32,188 INFO  L87              Difference]: Start difference. First operand 2892 states and 3196 transitions. cyclomatic complexity: 316 Second operand 23 states.
[2020-11-25 05:10:38,508 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:10:38,509 INFO  L93              Difference]: Finished difference Result 2988 states and 3352 transitions.
[2020-11-25 05:10:38,509 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 05:10:38,509 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2988 states and 3352 transitions.
[2020-11-25 05:10:38,516 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:38,523 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2988 states to 2988 states and 3352 transitions.
[2020-11-25 05:10:38,523 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 865
[2020-11-25 05:10:38,524 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 865
[2020-11-25 05:10:38,524 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2988 states and 3352 transitions.
[2020-11-25 05:10:38,526 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:10:38,526 INFO  L728         BuchiCegarLoop]: Abstraction has 2988 states and 3352 transitions.
[2020-11-25 05:10:38,528 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2988 states and 3352 transitions.
[2020-11-25 05:10:38,542 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2988 to 2915.
[2020-11-25 05:10:38,542 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2915 states.
[2020-11-25 05:10:38,545 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2915 states to 2915 states and 3244 transitions.
[2020-11-25 05:10:38,546 INFO  L751         BuchiCegarLoop]: Abstraction has 2915 states and 3244 transitions.
[2020-11-25 05:10:38,546 INFO  L631         BuchiCegarLoop]: Abstraction has 2915 states and 3244 transitions.
[2020-11-25 05:10:38,546 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 05:10:38,546 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2915 states and 3244 transitions.
[2020-11-25 05:10:38,549 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:10:38,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:10:38,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:10:38,551 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:10:38,551 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND TRUE   choice == 17
[L3599]              gas := gas - 21000;
[L3600]  COND TRUE   gas >= 0
[L3601]              assume msgvalue_MSG == 0;
[L3602]  CALL        call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L330]   CALL        call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L2138]              __var_3 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2139]  CALL        call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2159]              allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236] := wad_s236;
[L2160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2161]              assert { :EventEmitted "Approval_SpaghettiTokenV2" } true;
[L2162]              __ret_0_ := true;
[L2139]  RET         call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2140]  COND FALSE  !(revert)
[L2143]              __ret_0_ := __var_2;
[L330]   RET         call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L331]               assume !revert && gas >= 0;
[L3602]  RET         call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND TRUE   choice == 18
[L3592]              gas := gas - 21000;
[L3593]  COND TRUE   gas >= 0
[L3594]              assume wad_s399 >= 0 && wad_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3595]              assume msgvalue_MSG == 0;
[L3596]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L496]               havoc __exception;
[L497]               revert := false;
[L498]   COND FALSE  !(__exception)
[L524]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L524]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L525]               assume !revert && gas >= 0;
[L3596]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:10:38,555 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:10:38,555 INFO  L82        PathProgramCache]: Analyzing trace with hash 1099566387, now seen corresponding path program 1 times
[2020-11-25 05:10:38,556 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:10:38,591 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:10:42,241 WARN  L188               SmtUtils]: Spent 2.70 s on a formula simplification. DAG size of input: 742 DAG size of output: 119
[2020-11-25 05:10:45,043 WARN  L188               SmtUtils]: Spent 2.06 s on a formula simplification. DAG size of input: 735 DAG size of output: 96
[2020-11-25 05:10:45,935 WARN  L188               SmtUtils]: Spent 286.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 46
[2020-11-25 05:10:46,456 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 43
[2020-11-25 05:10:46,959 WARN  L188               SmtUtils]: Spent 274.00 ms on a formula simplification. DAG size of input: 256 DAG size of output: 42
[2020-11-25 05:10:47,566 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 11 refuted. 0 times theorem prover too weak. 166 trivial. 0 not checked.
[2020-11-25 05:10:47,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:10:47,567 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 05:10:47,567 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:10:47,567 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 05:10:47,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=542, Unknown=0, NotChecked=0, Total=600
[2020-11-25 05:10:47,567 INFO  L87              Difference]: Start difference. First operand 2915 states and 3244 transitions. cyclomatic complexity: 343 Second operand 25 states.
[2020-11-25 05:10:50,114 WARN  L188               SmtUtils]: Spent 809.00 ms on a formula simplification. DAG size of input: 211 DAG size of output: 206
[2020-11-25 05:10:53,797 WARN  L188               SmtUtils]: Spent 887.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 213
[2020-11-25 05:10:55,201 WARN  L188               SmtUtils]: Spent 1.04 s on a formula simplification. DAG size of input: 239 DAG size of output: 230
[2020-11-25 05:10:56,270 WARN  L188               SmtUtils]: Spent 919.00 ms on a formula simplification. DAG size of input: 221 DAG size of output: 218
[2020-11-25 05:11:02,020 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:11:02,020 INFO  L93              Difference]: Finished difference Result 2971 states and 3365 transitions.
[2020-11-25 05:11:02,021 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 05:11:02,021 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2971 states and 3365 transitions.
[2020-11-25 05:11:02,028 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:11:02,035 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2971 states to 2971 states and 3365 transitions.
[2020-11-25 05:11:02,035 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 849
[2020-11-25 05:11:02,036 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 849
[2020-11-25 05:11:02,036 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2971 states and 3365 transitions.
[2020-11-25 05:11:02,038 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:11:02,038 INFO  L728         BuchiCegarLoop]: Abstraction has 2971 states and 3365 transitions.
[2020-11-25 05:11:02,040 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2971 states and 3365 transitions.
[2020-11-25 05:11:02,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2971 to 2921.
[2020-11-25 05:11:02,054 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2921 states.
[2020-11-25 05:11:02,057 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2921 states to 2921 states and 3278 transitions.
[2020-11-25 05:11:02,057 INFO  L751         BuchiCegarLoop]: Abstraction has 2921 states and 3278 transitions.
[2020-11-25 05:11:02,057 INFO  L631         BuchiCegarLoop]: Abstraction has 2921 states and 3278 transitions.
[2020-11-25 05:11:02,058 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 05:11:02,058 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2921 states and 3278 transitions.
[2020-11-25 05:11:02,061 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:11:02,061 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:11:02,061 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:11:02,062 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:11:02,062 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND TRUE   choice == 17
[L3599]              gas := gas - 21000;
[L3600]  COND TRUE   gas >= 0
[L3601]              assume msgvalue_MSG == 0;
[L3602]  CALL        call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L330]   CALL        call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L2138]              __var_3 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2139]  CALL        call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2159]              allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236] := wad_s236;
[L2160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2161]              assert { :EventEmitted "Approval_SpaghettiTokenV2" } true;
[L2162]              __ret_0_ := true;
[L2139]  RET         call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2140]  COND FALSE  !(revert)
[L2143]              __ret_0_ := __var_2;
[L330]   RET         call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L331]               assume !revert && gas >= 0;
[L3602]  RET         call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:11:02,067 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:11:02,067 INFO  L82        PathProgramCache]: Analyzing trace with hash 776647170, now seen corresponding path program 1 times
[2020-11-25 05:11:02,067 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:11:02,113 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:11:03,161 WARN  L188               SmtUtils]: Spent 397.00 ms on a formula simplification. DAG size of input: 157 DAG size of output: 61
[2020-11-25 05:11:03,534 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 59
[2020-11-25 05:11:03,860 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 53
[2020-11-25 05:11:04,147 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 40
[2020-11-25 05:11:04,479 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 234 DAG size of output: 10
[2020-11-25 05:11:05,188 WARN  L188               SmtUtils]: Spent 222.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 60
[2020-11-25 05:11:05,755 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 47
[2020-11-25 05:11:06,351 INFO  L134       CoverageAnalysis]: Checked inductivity of 199 backedges. 3 proven. 11 refuted. 0 times theorem prover too weak. 185 trivial. 0 not checked.
[2020-11-25 05:11:06,352 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:11:06,352 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 05:11:06,352 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:11:06,353 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 05:11:06,353 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=84, Invalid=786, Unknown=0, NotChecked=0, Total=870
[2020-11-25 05:11:06,353 INFO  L87              Difference]: Start difference. First operand 2921 states and 3278 transitions. cyclomatic complexity: 373 Second operand 30 states.
[2020-11-25 05:11:08,697 WARN  L188               SmtUtils]: Spent 567.00 ms on a formula simplification. DAG size of input: 181 DAG size of output: 174
[2020-11-25 05:11:11,752 WARN  L188               SmtUtils]: Spent 445.00 ms on a formula simplification. DAG size of input: 190 DAG size of output: 181
[2020-11-25 05:11:12,694 WARN  L188               SmtUtils]: Spent 671.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 200
[2020-11-25 05:11:16,674 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:11:16,674 INFO  L93              Difference]: Finished difference Result 2971 states and 3365 transitions.
[2020-11-25 05:11:16,675 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 05:11:16,675 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2971 states and 3365 transitions.
[2020-11-25 05:11:16,680 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:11:16,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2971 states to 2971 states and 3365 transitions.
[2020-11-25 05:11:16,686 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 849
[2020-11-25 05:11:16,687 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 849
[2020-11-25 05:11:16,687 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2971 states and 3365 transitions.
[2020-11-25 05:11:16,689 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:11:16,689 INFO  L728         BuchiCegarLoop]: Abstraction has 2971 states and 3365 transitions.
[2020-11-25 05:11:16,690 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2971 states and 3365 transitions.
[2020-11-25 05:11:16,702 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2971 to 2915.
[2020-11-25 05:11:16,702 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2915 states.
[2020-11-25 05:11:16,705 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2915 states to 2915 states and 3244 transitions.
[2020-11-25 05:11:16,705 INFO  L751         BuchiCegarLoop]: Abstraction has 2915 states and 3244 transitions.
[2020-11-25 05:11:16,705 INFO  L631         BuchiCegarLoop]: Abstraction has 2915 states and 3244 transitions.
[2020-11-25 05:11:16,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 05:11:16,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2915 states and 3244 transitions.
[2020-11-25 05:11:16,707 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:11:16,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:11:16,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:11:16,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:11:16,708 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND TRUE   choice == 17
[L3599]              gas := gas - 21000;
[L3600]  COND TRUE   gas >= 0
[L3601]              assume msgvalue_MSG == 0;
[L3602]  CALL        call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L330]   CALL        call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L2138]              __var_3 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2139]  CALL        call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2159]              allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236] := wad_s236;
[L2160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2161]              assert { :EventEmitted "Approval_SpaghettiTokenV2" } true;
[L2162]              __ret_0_ := true;
[L2139]  RET         call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2140]  COND FALSE  !(revert)
[L2143]              __ret_0_ := __var_2;
[L330]   RET         call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L331]               assume !revert && gas >= 0;
[L3602]  RET         call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2488]  CALL        call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2677]              __ret_0_ := balanceOf_SpaghettiTokenV2[this][arg551_s0];
[L2488]  RET         call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2489]  COND FALSE  !(revert)
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2508]  CALL        call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2508]  RET         call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2509]  COND FALSE  !(revert)
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:11:16,712 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:11:16,712 INFO  L82        PathProgramCache]: Analyzing trace with hash -1280069217, now seen corresponding path program 1 times
[2020-11-25 05:11:16,712 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:11:16,756 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:11:21,599 WARN  L188               SmtUtils]: Spent 504.00 ms on a formula simplification. DAG size of input: 273 DAG size of output: 110
[2020-11-25 05:11:22,428 WARN  L188               SmtUtils]: Spent 542.00 ms on a formula simplification. DAG size of input: 276 DAG size of output: 110
[2020-11-25 05:11:23,539 WARN  L188               SmtUtils]: Spent 908.00 ms on a formula simplification. DAG size of input: 267 DAG size of output: 84
[2020-11-25 05:11:24,195 WARN  L188               SmtUtils]: Spent 288.00 ms on a formula simplification. DAG size of input: 285 DAG size of output: 10
[2020-11-25 05:11:27,994 WARN  L188               SmtUtils]: Spent 2.72 s on a formula simplification. DAG size of input: 304 DAG size of output: 199
[2020-11-25 05:11:30,123 WARN  L188               SmtUtils]: Spent 1.11 s on a formula simplification. DAG size of input: 309 DAG size of output: 96
[2020-11-25 05:11:30,777 INFO  L134       CoverageAnalysis]: Checked inductivity of 202 backedges. 12 proven. 120 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 05:11:30,777 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:11:30,777 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-11-25 05:11:30,777 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:11:30,777 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-11-25 05:11:30,778 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=208, Invalid=2342, Unknown=0, NotChecked=0, Total=2550
[2020-11-25 05:11:30,778 INFO  L87              Difference]: Start difference. First operand 2915 states and 3244 transitions. cyclomatic complexity: 343 Second operand 51 states.
[2020-11-25 05:11:31,961 WARN  L188               SmtUtils]: Spent 869.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 203
[2020-11-25 05:11:43,612 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification that was a NOOP. DAG size: 85
[2020-11-25 05:11:44,556 WARN  L188               SmtUtils]: Spent 208.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 108
[2020-11-25 05:11:44,842 WARN  L188               SmtUtils]: Spent 231.00 ms on a formula simplification. DAG size of input: 107 DAG size of output: 107
[2020-11-25 05:11:47,083 WARN  L188               SmtUtils]: Spent 681.00 ms on a formula simplification that was a NOOP. DAG size: 197
[2020-11-25 05:11:47,496 WARN  L188               SmtUtils]: Spent 170.00 ms on a formula simplification that was a NOOP. DAG size: 96
[2020-11-25 05:11:59,115 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:11:59,115 INFO  L93              Difference]: Finished difference Result 3108 states and 3613 transitions.
[2020-11-25 05:11:59,115 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2020-11-25 05:11:59,115 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3108 states and 3613 transitions.
[2020-11-25 05:11:59,121 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:11:59,128 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3108 states to 3094 states and 3595 transitions.
[2020-11-25 05:11:59,128 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 882
[2020-11-25 05:11:59,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 882
[2020-11-25 05:11:59,128 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3094 states and 3595 transitions.
[2020-11-25 05:11:59,130 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:11:59,130 INFO  L728         BuchiCegarLoop]: Abstraction has 3094 states and 3595 transitions.
[2020-11-25 05:11:59,132 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3094 states and 3595 transitions.
[2020-11-25 05:11:59,144 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3094 to 2946.
[2020-11-25 05:11:59,144 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2946 states.
[2020-11-25 05:11:59,147 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2946 states to 2946 states and 3317 transitions.
[2020-11-25 05:11:59,147 INFO  L751         BuchiCegarLoop]: Abstraction has 2946 states and 3317 transitions.
[2020-11-25 05:11:59,147 INFO  L631         BuchiCegarLoop]: Abstraction has 2946 states and 3317 transitions.
[2020-11-25 05:11:59,147 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 05:11:59,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2946 states and 3317 transitions.
[2020-11-25 05:11:59,150 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:11:59,150 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:11:59,150 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:11:59,151 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:11:59,151 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND TRUE   choice == 17
[L3599]              gas := gas - 21000;
[L3600]  COND TRUE   gas >= 0
[L3601]              assume msgvalue_MSG == 0;
[L3602]  CALL        call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L302]               havoc __exception;
[L303]               revert := false;
[L304]   COND FALSE  !(__exception)
[L330]   CALL        call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L2138]              __var_3 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2139]  CALL        call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2158]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2159]              allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236] := wad_s236;
[L2160]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_SpaghettiTokenV2[this][msgsender_MSG][guy_s236];
[L2161]              assert { :EventEmitted "Approval_SpaghettiTokenV2" } true;
[L2162]              __ret_0_ := true;
[L2139]  RET         call __var_2 := approve~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208, -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2140]  COND FALSE  !(revert)
[L2143]              __ret_0_ := __var_2;
[L330]   RET         call __ret_0_ := approve~address_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L331]               assume !revert && gas >= 0;
[L3602]  RET         call __ret_0_approve := approve~address_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, guy_s208);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2488]  CALL        call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2677]              __ret_0_ := balanceOf_SpaghettiTokenV2[this][arg551_s0];
[L2488]  RET         call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2489]  COND FALSE  !(revert)
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2508]  CALL        call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND TRUE   src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L2331]  COND FALSE  !(!(allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] >= wad_s399))
[L2335]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2336]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2336]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2337]  COND FALSE  !(revert)
[L2343]              sum_allowance1[src_s399] := sum_allowance1[src_s399] - allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2344]              allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] := __var_6;
[L2345]              sum_allowance1[src_s399] := sum_allowance1[src_s399] + allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2508]  RET         call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2509]  COND FALSE  !(revert)
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:11:59,155 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:11:59,155 INFO  L82        PathProgramCache]: Analyzing trace with hash -97647900, now seen corresponding path program 1 times
[2020-11-25 05:11:59,155 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:11:59,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:12:00,659 WARN  L188               SmtUtils]: Spent 254.00 ms on a formula simplification. DAG size of input: 93 DAG size of output: 81
[2020-11-25 05:12:01,135 INFO  L134       CoverageAnalysis]: Checked inductivity of 210 backedges. 10 proven. 123 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 05:12:01,136 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:12:01,136 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 05:12:01,136 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:12:01,136 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 05:12:01,136 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=129, Invalid=1511, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 05:12:01,137 INFO  L87              Difference]: Start difference. First operand 2946 states and 3317 transitions. cyclomatic complexity: 387 Second operand 41 states.
[2020-11-25 05:12:10,890 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:12:10,890 INFO  L93              Difference]: Finished difference Result 3039 states and 3456 transitions.
[2020-11-25 05:12:10,890 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 05:12:10,890 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3039 states and 3456 transitions.
[2020-11-25 05:12:10,895 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:10,901 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3039 states to 3039 states and 3456 transitions.
[2020-11-25 05:12:10,902 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 854
[2020-11-25 05:12:10,902 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 854
[2020-11-25 05:12:10,902 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3039 states and 3456 transitions.
[2020-11-25 05:12:10,904 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:12:10,904 INFO  L728         BuchiCegarLoop]: Abstraction has 3039 states and 3456 transitions.
[2020-11-25 05:12:10,906 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3039 states and 3456 transitions.
[2020-11-25 05:12:10,923 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3039 to 2884.
[2020-11-25 05:12:10,923 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2884 states.
[2020-11-25 05:12:10,927 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2884 states to 2884 states and 3168 transitions.
[2020-11-25 05:12:10,927 INFO  L751         BuchiCegarLoop]: Abstraction has 2884 states and 3168 transitions.
[2020-11-25 05:12:10,927 INFO  L631         BuchiCegarLoop]: Abstraction has 2884 states and 3168 transitions.
[2020-11-25 05:12:10,927 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 05:12:10,927 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2884 states and 3168 transitions.
[2020-11-25 05:12:10,932 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:10,932 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:12:10,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:12:10,933 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:12:10,933 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND FALSE  !(choice == 5)
[L3678]  COND FALSE  !(choice == 4)
[L3684]  COND TRUE   choice == 3
[L3685]              gas := gas - 21000;
[L3686]  COND TRUE   gas >= 0
[L3687]              assume msgvalue_MSG == 0;
[L3688]  CALL        call burn_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L688]               havoc __exception;
[L689]               revert := false;
[L690]   COND FALSE  !(__exception)
[L716]   CALL        call burn_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              __var_30 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2608]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2609]  CALL        call __var_29 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2609]  RET         call __var_29 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2610]  COND FALSE  !(revert)
[L2616]              totalSupply_SpaghettiTokenV2[this] := __var_29;
[L2617]              assert { :EventEmitted "Burn_SpaghettiTokenV2" } true;
[L2618]              oven_SpaghettiTokenV2[this] := 0;
[L716]   RET         call burn_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L717]               assume !revert && gas >= 0;
[L3688]  RET         call burn_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:12:10,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:12:10,935 INFO  L82        PathProgramCache]: Analyzing trace with hash 649499904, now seen corresponding path program 1 times
[2020-11-25 05:12:10,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:12:10,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:12:11,555 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification. DAG size of input: 94 DAG size of output: 79
[2020-11-25 05:12:11,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 197 backedges. 0 proven. 181 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 05:12:11,970 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:12:11,970 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 05:12:11,971 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:12:11,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 05:12:11,971 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=123, Invalid=1283, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 05:12:11,971 INFO  L87              Difference]: Start difference. First operand 2884 states and 3168 transitions. cyclomatic complexity: 294 Second operand 38 states.
[2020-11-25 05:12:20,870 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:12:20,870 INFO  L93              Difference]: Finished difference Result 3002 states and 3383 transitions.
[2020-11-25 05:12:20,870 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 05:12:20,870 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3002 states and 3383 transitions.
[2020-11-25 05:12:20,876 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:20,883 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3002 states to 3002 states and 3383 transitions.
[2020-11-25 05:12:20,883 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 875
[2020-11-25 05:12:20,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 875
[2020-11-25 05:12:20,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3002 states and 3383 transitions.
[2020-11-25 05:12:20,885 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:12:20,885 INFO  L728         BuchiCegarLoop]: Abstraction has 3002 states and 3383 transitions.
[2020-11-25 05:12:20,887 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3002 states and 3383 transitions.
[2020-11-25 05:12:20,898 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3002 to 2923.
[2020-11-25 05:12:20,898 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2923 states.
[2020-11-25 05:12:20,901 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2923 states to 2923 states and 3267 transitions.
[2020-11-25 05:12:20,901 INFO  L751         BuchiCegarLoop]: Abstraction has 2923 states and 3267 transitions.
[2020-11-25 05:12:20,902 INFO  L631         BuchiCegarLoop]: Abstraction has 2923 states and 3267 transitions.
[2020-11-25 05:12:20,902 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 05:12:20,902 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2923 states and 3267 transitions.
[2020-11-25 05:12:20,904 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:20,904 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:12:20,904 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:12:20,905 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:12:20,905 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND FALSE  !(choice == 5)
[L3678]  COND FALSE  !(choice == 4)
[L3684]  COND TRUE   choice == 3
[L3685]              gas := gas - 21000;
[L3686]  COND TRUE   gas >= 0
[L3687]              assume msgvalue_MSG == 0;
[L3688]  CALL        call burn_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L688]               havoc __exception;
[L689]               revert := false;
[L690]   COND FALSE  !(__exception)
[L716]   CALL        call burn_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              __var_30 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2608]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2609]  CALL        call __var_29 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2609]  RET         call __var_29 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2610]  COND FALSE  !(revert)
[L2616]              totalSupply_SpaghettiTokenV2[this] := __var_29;
[L2617]              assert { :EventEmitted "Burn_SpaghettiTokenV2" } true;
[L2618]              oven_SpaghettiTokenV2[this] := 0;
[L716]   RET         call burn_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L717]               assume !revert && gas >= 0;
[L3688]  RET         call burn_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2488]  CALL        call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2677]              __ret_0_ := balanceOf_SpaghettiTokenV2[this][arg551_s0];
[L2488]  RET         call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2489]  COND FALSE  !(revert)
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2508]  CALL        call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2508]  RET         call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2509]  COND FALSE  !(revert)
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:12:20,909 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:12:20,909 INFO  L82        PathProgramCache]: Analyzing trace with hash 634262910, now seen corresponding path program 1 times
[2020-11-25 05:12:20,909 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:12:20,941 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:12:21,595 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 60
[2020-11-25 05:12:22,507 INFO  L134       CoverageAnalysis]: Checked inductivity of 233 backedges. 6 proven. 187 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 05:12:22,507 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:12:22,507 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 05:12:22,507 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:12:22,508 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 05:12:22,508 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=161, Invalid=1731, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 05:12:22,508 INFO  L87              Difference]: Start difference. First operand 2923 states and 3267 transitions. cyclomatic complexity: 360 Second operand 44 states.
[2020-11-25 05:12:31,608 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:12:31,608 INFO  L93              Difference]: Finished difference Result 3038 states and 3455 transitions.
[2020-11-25 05:12:31,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-11-25 05:12:31,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3038 states and 3455 transitions.
[2020-11-25 05:12:31,613 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:31,620 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3038 states to 3038 states and 3455 transitions.
[2020-11-25 05:12:31,620 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 878
[2020-11-25 05:12:31,620 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 878
[2020-11-25 05:12:31,620 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3038 states and 3455 transitions.
[2020-11-25 05:12:31,622 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:12:31,622 INFO  L728         BuchiCegarLoop]: Abstraction has 3038 states and 3455 transitions.
[2020-11-25 05:12:31,624 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3038 states and 3455 transitions.
[2020-11-25 05:12:31,635 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3038 to 2925.
[2020-11-25 05:12:31,635 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2925 states.
[2020-11-25 05:12:31,638 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2925 states to 2925 states and 3269 transitions.
[2020-11-25 05:12:31,638 INFO  L751         BuchiCegarLoop]: Abstraction has 2925 states and 3269 transitions.
[2020-11-25 05:12:31,638 INFO  L631         BuchiCegarLoop]: Abstraction has 2925 states and 3269 transitions.
[2020-11-25 05:12:31,638 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 05:12:31,638 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2925 states and 3269 transitions.
[2020-11-25 05:12:31,641 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:31,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:12:31,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:12:31,642 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:12:31,642 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND FALSE  !(choice == 5)
[L3678]  COND FALSE  !(choice == 4)
[L3684]  COND TRUE   choice == 3
[L3685]              gas := gas - 21000;
[L3686]  COND TRUE   gas >= 0
[L3687]              assume msgvalue_MSG == 0;
[L3688]  CALL        call burn_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L688]               havoc __exception;
[L689]               revert := false;
[L690]   COND FALSE  !(__exception)
[L716]   CALL        call burn_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2607]              __var_30 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2608]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2609]  CALL        call __var_29 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2609]  RET         call __var_29 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2610]  COND FALSE  !(revert)
[L2616]              totalSupply_SpaghettiTokenV2[this] := __var_29;
[L2617]              assert { :EventEmitted "Burn_SpaghettiTokenV2" } true;
[L2618]              oven_SpaghettiTokenV2[this] := 0;
[L716]   RET         call burn_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L717]               assume !revert && gas >= 0;
[L3688]  RET         call burn_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2488]  CALL        call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2677]              __ret_0_ := balanceOf_SpaghettiTokenV2[this][arg551_s0];
[L2488]  RET         call v1Balance_s461 := balanceOf~address_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_21, msgsender_MSG);
[L2489]  COND FALSE  !(revert)
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2
[L2508]  CALL        call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND TRUE   src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936
[L2331]  COND FALSE  !(!(allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] >= wad_s399))
[L2335]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2336]  CALL        call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2336]  RET         call __var_6 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG], wad_s399);
[L2337]  COND FALSE  !(revert)
[L2343]              sum_allowance1[src_s399] := sum_allowance1[src_s399] - allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2344]              allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] := __var_6;
[L2345]              sum_allowance1[src_s399] := sum_allowance1[src_s399] + allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG];
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2508]  RET         call __var_22 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(pastav1_SpaghettiTokenV2[this], this, __var_23, msgsender_MSG, null, v1Balance_s461);
[L2509]  COND FALSE  !(revert)
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:12:31,645 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:12:31,645 INFO  L82        PathProgramCache]: Analyzing trace with hash -947969691, now seen corresponding path program 1 times
[2020-11-25 05:12:31,645 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:12:31,695 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:12:32,790 INFO  L134       CoverageAnalysis]: Checked inductivity of 245 backedges. 6 proven. 190 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 05:12:32,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:12:32,790 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 05:12:32,791 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:12:32,791 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 05:12:32,791 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=151, Invalid=1741, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 05:12:32,791 INFO  L87              Difference]: Start difference. First operand 2925 states and 3269 transitions. cyclomatic complexity: 360 Second operand 44 states.
[2020-11-25 05:12:42,390 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:12:42,391 INFO  L93              Difference]: Finished difference Result 3046 states and 3497 transitions.
[2020-11-25 05:12:42,391 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-11-25 05:12:42,391 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3046 states and 3497 transitions.
[2020-11-25 05:12:42,396 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:42,403 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3046 states to 3046 states and 3497 transitions.
[2020-11-25 05:12:42,403 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 878
[2020-11-25 05:12:42,403 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 878
[2020-11-25 05:12:42,403 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3046 states and 3497 transitions.
[2020-11-25 05:12:42,405 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:12:42,405 INFO  L728         BuchiCegarLoop]: Abstraction has 3046 states and 3497 transitions.
[2020-11-25 05:12:42,407 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3046 states and 3497 transitions.
[2020-11-25 05:12:42,418 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3046 to 2904.
[2020-11-25 05:12:42,418 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2904 states.
[2020-11-25 05:12:42,421 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2904 states to 2904 states and 3234 transitions.
[2020-11-25 05:12:42,421 INFO  L751         BuchiCegarLoop]: Abstraction has 2904 states and 3234 transitions.
[2020-11-25 05:12:42,421 INFO  L631         BuchiCegarLoop]: Abstraction has 2904 states and 3234 transitions.
[2020-11-25 05:12:42,421 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 05:12:42,421 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2904 states and 3234 transitions.
[2020-11-25 05:12:42,424 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:12:42,424 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:12:42,424 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:12:42,425 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:12:42,425 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:12:42,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:12:42,427 INFO  L82        PathProgramCache]: Analyzing trace with hash 1582485900, now seen corresponding path program 2 times
[2020-11-25 05:12:42,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:12:42,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:12:43,805 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 54
[2020-11-25 05:12:49,321 WARN  L188               SmtUtils]: Spent 5.16 s on a formula simplification. DAG size of input: 748 DAG size of output: 97
[2020-11-25 05:12:52,032 WARN  L188               SmtUtils]: Spent 1.58 s on a formula simplification. DAG size of input: 447 DAG size of output: 70
[2020-11-25 05:12:52,900 INFO  L134       CoverageAnalysis]: Checked inductivity of 239 backedges. 0 proven. 136 refuted. 0 times theorem prover too weak. 103 trivial. 0 not checked.
[2020-11-25 05:12:52,900 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 05:12:52,900 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 05:12:52,901 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 05:12:52,901 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 05:12:52,901 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=88, Invalid=1034, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 05:12:52,901 INFO  L87              Difference]: Start difference. First operand 2904 states and 3234 transitions. cyclomatic complexity: 346 Second operand 34 states.
[2020-11-25 05:13:05,089 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:13:05,090 INFO  L93              Difference]: Finished difference Result 3008 states and 3418 transitions.
[2020-11-25 05:13:05,090 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 05:13:05,090 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3008 states and 3418 transitions.
[2020-11-25 05:13:05,095 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:13:05,101 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3008 states to 3008 states and 3418 transitions.
[2020-11-25 05:13:05,101 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 873
[2020-11-25 05:13:05,101 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 873
[2020-11-25 05:13:05,101 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3008 states and 3418 transitions.
[2020-11-25 05:13:05,103 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:13:05,103 INFO  L728         BuchiCegarLoop]: Abstraction has 3008 states and 3418 transitions.
[2020-11-25 05:13:05,105 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3008 states and 3418 transitions.
[2020-11-25 05:13:05,115 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3008 to 2927.
[2020-11-25 05:13:05,115 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2927 states.
[2020-11-25 05:13:05,118 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2927 states to 2927 states and 3286 transitions.
[2020-11-25 05:13:05,118 INFO  L751         BuchiCegarLoop]: Abstraction has 2927 states and 3286 transitions.
[2020-11-25 05:13:05,118 INFO  L631         BuchiCegarLoop]: Abstraction has 2927 states and 3286 transitions.
[2020-11-25 05:13:05,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 05:13:05,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2927 states and 3286 transitions.
[2020-11-25 05:13:05,121 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:13:05,121 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:13:05,121 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:13:05,122 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:13:05,122 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND TRUE   choice == 18
[L3592]              gas := gas - 21000;
[L3593]  COND TRUE   gas >= 0
[L3594]              assume wad_s399 >= 0 && wad_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3595]              assume msgvalue_MSG == 0;
[L3596]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L496]               havoc __exception;
[L497]               revert := false;
[L498]   COND FALSE  !(__exception)
[L524]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L524]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L525]               assume !revert && gas >= 0;
[L3596]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND FALSE  !(gas >= 0)
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:13:05,125 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:13:05,125 INFO  L82        PathProgramCache]: Analyzing trace with hash 1223532614, now seen corresponding path program 1 times
[2020-11-25 05:13:05,125 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:13:05,167 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:13:05,237 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:13:05,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:13:05,308 INFO  L82        PathProgramCache]: Analyzing trace with hash 1817678568, now seen corresponding path program 1 times
[2020-11-25 05:13:05,308 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:13:05,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 05:13:05,312 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 05:13:05,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 05:13:05,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 05:13:05,313 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 05:13:05,313 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 05:13:05,313 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 05:13:05,313 INFO  L87              Difference]: Start difference. First operand 2927 states and 3286 transitions. cyclomatic complexity: 377 Second operand 4 states.
[2020-11-25 05:13:05,476 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 05:13:05,476 INFO  L93              Difference]: Finished difference Result 3070 states and 3562 transitions.
[2020-11-25 05:13:05,476 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 05:13:05,476 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3070 states and 3562 transitions.
[2020-11-25 05:13:05,486 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 05:13:05,493 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3070 states to 3070 states and 3562 transitions.
[2020-11-25 05:13:05,494 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 848
[2020-11-25 05:13:05,494 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 848
[2020-11-25 05:13:05,494 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3070 states and 3562 transitions.
[2020-11-25 05:13:05,496 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 05:13:05,496 INFO  L728         BuchiCegarLoop]: Abstraction has 3070 states and 3562 transitions.
[2020-11-25 05:13:05,498 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3070 states and 3562 transitions.
[2020-11-25 05:13:05,511 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3070 to 2927.
[2020-11-25 05:13:05,511 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2927 states.
[2020-11-25 05:13:05,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2927 states to 2927 states and 3246 transitions.
[2020-11-25 05:13:05,514 INFO  L751         BuchiCegarLoop]: Abstraction has 2927 states and 3246 transitions.
[2020-11-25 05:13:05,514 INFO  L631         BuchiCegarLoop]: Abstraction has 2927 states and 3246 transitions.
[2020-11-25 05:13:05,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 05:13:05,515 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2927 states and 3246 transitions.
[2020-11-25 05:13:05,519 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 05:13:05,519 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 05:13:05,519 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 05:13:05,520 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 05:13:05,520 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_SpaghettiTokenV20 := false;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]     CALL        call main();
[L3710]              assume null == 0;
[L3711]  CALL        call this := FreshRefGenerator__success();
[L1917]              havoc newRef;
[L1918]              assume Alloc[newRef] == false;
[L1919]              Alloc[newRef] := true;
[L1920]              assume newRef != null;
[L3711]  RET         call this := FreshRefGenerator__success();
[L3712]              assume now >= 0;
[L3713]              assume DType[this] == SpaghettiTokenV2;
[L3714]              assume msgvalue_MSG == 0;
[L3715]              gas := gas - 53000;
[L3716]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3717]              assume !revert && gas >= 0;
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND FALSE  !(choice == 6)
[L3672]  COND TRUE   choice == 5
[L3673]              gas := gas - 21000;
[L3674]  COND TRUE   gas >= 0
[L3675]              assume msgvalue_MSG == 0;
[L3676]  CALL        call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND TRUE   choice == 18
[L3592]              gas := gas - 21000;
[L3593]  COND TRUE   gas >= 0
[L3594]              assume wad_s399 >= 0 && wad_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3595]              assume msgvalue_MSG == 0;
[L3596]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L496]               havoc __exception;
[L497]               revert := false;
[L498]   COND FALSE  !(__exception)
[L524]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L524]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L525]               assume !revert && gas >= 0;
[L3596]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND FALSE  !(choice == 20)
[L3585]  COND FALSE  !(choice == 19)
[L3591]  COND FALSE  !(choice == 18)
[L3598]  COND FALSE  !(choice == 17)
[L3604]  COND FALSE  !(choice == 16)
[L3610]  COND FALSE  !(choice == 15)
[L3616]  COND FALSE  !(choice == 14)
[L3622]  COND FALSE  !(choice == 13)
[L3628]  COND FALSE  !(choice == 12)
[L3634]  COND FALSE  !(choice == 11)
[L3640]  COND FALSE  !(choice == 10)
[L3646]  COND FALSE  !(choice == 9)
[L3652]  COND FALSE  !(choice == 8)
[L3658]  COND FALSE  !(choice == 7)
[L3665]  COND TRUE   choice == 6
[L3666]              gas := gas - 21000;
[L3667]  COND TRUE   gas >= 0
[L3668]              assume wad_s253 >= 0 && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3669]              assume msgvalue_MSG == 0;
[L3670]  CALL        call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

Loop:
[L3720]  CALL        call CorralChoice_SpaghettiTokenV2(this);
[L3537]              havoc msgsender_MSG;
[L3538]              havoc msgvalue_MSG;
[L3539]              havoc choice;
[L3540]              havoc __ret_0_totalSupply;
[L3541]              havoc arg551_s0;
[L3542]              havoc __ret_0_balanceOf;
[L3543]              havoc src_s399;
[L3544]              havoc dst_s399;
[L3545]              havoc wad_s399;
[L3546]              havoc __ret_0_transferFrom;
[L3547]              havoc guy_s208;
[L3548]              havoc __ret_0_approve;
[L3549]              havoc arg552_s0;
[L3550]              havoc arg553_s0;
[L3551]              havoc __ret_0_allowance;
[L3552]              havoc __ret_0_symbol;
[L3553]              havoc __ret_0_decimals;
[L3554]              havoc __ret_0_name;
[L3555]              havoc __ret_0_pastav1;
[L3556]              havoc __ret_0_foodbank;
[L3557]              havoc __ret_0_governance;
[L3558]              havoc __ret_0_food;
[L3559]              havoc __ret_0_oven;
[L3560]              havoc guy_s236;
[L3561]              havoc wad_s236;
[L3562]              havoc dst_s253;
[L3563]              havoc wad_s253;
[L3564]              havoc __ret_0_transfer;
[L3565]              havoc __ret_0_mint;
[L3566]              havoc _foodbank_s530;
[L3567]              havoc _governance_s548;
[L3568]              havoc tmpNow;
[L3569]              havoc gas;
[L3570]              assume gas > 4000000 && gas <= 8000000;
[L3571]              tmpNow := now;
[L3572]              havoc now;
[L3573]              assume now > tmpNow;
[L3574]              assume msgsender_MSG != null;
[L3575]              assume DType[msgsender_MSG] != ERC20;
[L3576]              assume DType[msgsender_MSG] != DSMath;
[L3577]              assume DType[msgsender_MSG] != SpaghettiTokenV2;
[L3578]              Alloc[msgsender_MSG] := true;
[L3579]  COND TRUE   choice == 20
[L3580]              gas := gas - 21000;
[L3581]  COND TRUE   gas >= 0
[L3582]              assume msgvalue_MSG == 0;
[L3583]  CALL        call __ret_0_totalSupply := totalSupply_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L870]               havoc __exception;
[L871]               revert := false;
[L872]   COND FALSE  !(__exception)
[L898]   CALL        call __ret_0_ := totalSupply_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2665]              __ret_0_ := totalSupply_SpaghettiTokenV2[this];
[L898]   RET         call __ret_0_ := totalSupply_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume !revert && gas >= 0;
[L3583]  RET         call __ret_0_totalSupply := totalSupply_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
[L3720]  RET         call CorralChoice_SpaghettiTokenV2(this);

[2020-11-25 05:13:05,523 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:13:05,523 INFO  L82        PathProgramCache]: Analyzing trace with hash 1223532614, now seen corresponding path program 2 times
[2020-11-25 05:13:05,523 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:13:05,568 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:13:05,642 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:13:05,677 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:13:05,677 INFO  L82        PathProgramCache]: Analyzing trace with hash -858800477, now seen corresponding path program 1 times
[2020-11-25 05:13:05,677 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:13:05,680 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:13:05,682 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:13:05,686 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 05:13:05,686 INFO  L82        PathProgramCache]: Analyzing trace with hash -822363736, now seen corresponding path program 1 times
[2020-11-25 05:13:05,686 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 05:13:05,747 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:13:05,871 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
[2020-11-25 05:13:06,226 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 05:13:06,990 WARN  L188               SmtUtils]: Spent 230.00 ms on a formula simplification. DAG size of input: 280 DAG size of output: 234
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 05:13:07,809 WARN  L188               SmtUtils]: Spent 586.00 ms on a formula simplification. DAG size of input: 243 DAG size of output: 237
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
[2020-11-25 05:13:08,133 WARN  L188               SmtUtils]: Spent 318.00 ms on a formula simplification. DAG size of input: 122 DAG size of output: 121
[2020-11-25 05:13:08,526 WARN  L188               SmtUtils]: Spent 391.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 165
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 05:13:08,938 WARN  L188               SmtUtils]: Spent 410.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 154
[2020-11-25 05:13:09,463 WARN  L188               SmtUtils]: Spent 524.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 160
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 29 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
[2020-11-25 05:13:09,673 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification. DAG size of input: 96 DAG size of output: 95
[2020-11-25 05:13:10,291 WARN  L188               SmtUtils]: Spent 617.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 259
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 05:13:11,228 WARN  L188               SmtUtils]: Spent 929.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 244
[2020-11-25 05:13:12,342 WARN  L188               SmtUtils]: Spent 1.11 s on a formula simplification. DAG size of input: 287 DAG size of output: 279
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 05:13:12,937 WARN  L188               SmtUtils]: Spent 587.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 196
[2020-11-25 05:13:13,599 WARN  L188               SmtUtils]: Spent 661.00 ms on a formula simplification that was a NOOP. DAG size: 357
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
[2020-11-25 05:13:14,843 WARN  L188               SmtUtils]: Spent 1.24 s on a formula simplification. DAG size of input: 289 DAG size of output: 288
[2020-11-25 05:13:15,613 WARN  L188               SmtUtils]: Spent 732.00 ms on a formula simplification. DAG size of input: 245 DAG size of output: 239
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 05:13:15,985 WARN  L188               SmtUtils]: Spent 367.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 123
[2020-11-25 05:13:16,261 WARN  L188               SmtUtils]: Spent 274.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 159
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 05:13:16,798 WARN  L188               SmtUtils]: Spent 438.00 ms on a formula simplification. DAG size of input: 156 DAG size of output: 149
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 05:13:17,078 WARN  L188               SmtUtils]: Spent 220.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 127
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 05:13:17,482 WARN  L188               SmtUtils]: Spent 328.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 142
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 05:13:17,664 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification that was a NOOP. DAG size: 102
[2020-11-25 05:13:18,536 WARN  L188               SmtUtils]: Spent 870.00 ms on a formula simplification. DAG size of input: 272 DAG size of output: 267
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-25 05:13:19,088 WARN  L188               SmtUtils]: Spent 549.00 ms on a formula simplification that was a NOOP. DAG size: 248
[2020-11-25 05:13:20,353 WARN  L188               SmtUtils]: Spent 1.26 s on a formula simplification. DAG size of input: 327 DAG size of output: 282
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 05:13:20,713 WARN  L188               SmtUtils]: Spent 353.00 ms on a formula simplification that was a NOOP. DAG size: 198
[2020-11-25 05:13:21,270 WARN  L188               SmtUtils]: Spent 555.00 ms on a formula simplification that was a NOOP. DAG size: 359
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 05:13:21,922 WARN  L188               SmtUtils]: Spent 646.00 ms on a formula simplification that was a NOOP. DAG size: 288
[2020-11-25 05:14:10,811 WARN  L188               SmtUtils]: Spent 48.89 s on a formula simplification. DAG size of input: 926 DAG size of output: 891
Garbage collection #1: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #2: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #3: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #4: 2803 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2803 to 5591
Garbage collection #5: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #6: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #7: 22349 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 22349 to 44687
Garbage collection #8: 44687 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 44687 to 89371
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 05:14:14,797 WARN  L188               SmtUtils]: Spent 3.94 s on a formula simplification that was a NOOP. DAG size: 321
[2020-11-25 05:14:21,608 WARN  L188               SmtUtils]: Spent 6.80 s on a formula simplification that was a NOOP. DAG size: 408
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 05:14:25,472 WARN  L188               SmtUtils]: Spent 3.86 s on a formula simplification that was a NOOP. DAG size: 321
[2020-11-25 05:14:39,970 WARN  L188               SmtUtils]: Spent 14.50 s on a formula simplification. DAG size of input: 410 DAG size of output: 409
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 05:14:47,192 WARN  L188               SmtUtils]: Spent 7.22 s on a formula simplification that was a NOOP. DAG size: 405
[2020-11-25 05:14:47,270 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:14:47,339 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 05:14:47,349 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:14:47 BasicIcfg
[2020-11-25 05:14:47,349 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 05:14:47,350 INFO  L168              Benchmark]: Toolchain (without parser) took 494563.22 ms. Allocated memory was 1.0 GB in the beginning and 1.6 GB in the end (delta: 570.9 MB). Free memory was 940.6 MB in the beginning and 1.0 GB in the end (delta: -86.3 MB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,350 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,351 INFO  L168              Benchmark]: Boogie Preprocessor took 83.32 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,351 INFO  L168              Benchmark]: UtopiaSpecLang took 50.05 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,351 INFO  L168              Benchmark]: Boogie Printer took 12.93 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,352 INFO  L168              Benchmark]: RCFGBuilder took 624.51 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 822.5 MB in the end (delta: 96.6 MB). Peak memory consumption was 96.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,352 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.13 ms. Allocated memory is still 1.0 GB. Free memory was 822.5 MB in the beginning and 818.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,352 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1389.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 165.7 MB). Free memory was 818.9 MB in the beginning and 1.1 GB in the end (delta: -268.6 MB). Peak memory consumption was 179.3 MB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,352 INFO  L168              Benchmark]: BlockEncodingV2 took 141.60 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,353 INFO  L168              Benchmark]: BuchiAutomizer took 492222.75 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 405.3 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 1.6 MB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
[2020-11-25 05:14:47,354 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3402 locations, 5806 edges
  - StatisticsResult: Encoded RCFG
    3276 locations, 5491 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 83.32 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 50.05 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 12.93 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 624.51 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 822.5 MB in the end (delta: 96.6 MB). Peak memory consumption was 96.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.13 ms. Allocated memory is still 1.0 GB. Free memory was 822.5 MB in the beginning and 818.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1389.76 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 165.7 MB). Free memory was 818.9 MB in the beginning and 1.1 GB in the end (delta: -268.6 MB). Peak memory consumption was 179.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 141.60 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 492222.75 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 405.3 MB). Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 1.6 MB). Peak memory consumption was 4.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1445 locations, 1809 edges
  - StatisticsResult: BuchiProgram size
    3402 locations, 5806 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 24 terminating modules (24 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.24 modules have a trivial ranking function, the largest among these consists of 51 locations. The remainder module has 2927 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 492.1s and 25 iterations.  TraceHistogramMax:4. Analysis of lassos took 215.3s. Construction of modules took 208.5s. BÃ¼chi inclusion checks took 66.7s. Highest rank in rank-based complementation 0. Minimization of det autom 24. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 24 MinimizatonAttempts, 3222 StatesRemovedByMinimization, 22 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 2956 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 65650 SDtfs, 89389 SDslu, 254711 SDs, 0 SdLazy, 842692 SolverSat, 11619 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 208.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU23 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(231584178474632390847141970017375815706539969331281123078915168015826259279877) = (new SpaghettiTokenV2)({from : 231584178474632390847141970017375815706539969331281123078915168015826259279878});
[L240]               havoc __exception;
[L241]               revert := false;
[L242]   COND FALSE  !(__exception)
[L268]   CALL        call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2111]  CALL        call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1981]  CALL        call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1966]              assume msgsender_MSG != null;
[L1967]              Balance[this] := 0;
[L1981]  RET         call DSMath_DSMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1982]  COND FALSE  !(revert)
[L2111]  RET         call DSMath_DSMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2112]  COND FALSE  !(revert)
[L2115]  CALL        call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2072]              assume msgsender_MSG != null;
[L2073]              Balance[this] := 0;
[L2074]              totalSupply_SpaghettiTokenV2[this] := 0;
[L2075]              balanceOf_SpaghettiTokenV2[this] := zeroRefintArr();
[L2076]              sum_balanceOf0[this] := 0;
[L2077]              allowance_SpaghettiTokenV2[this] := zeroRefRefintArr();
[L2078]              sum_allowance1[this] := 0;
[L2079]              symbol_SpaghettiTokenV2[this] := 1065626718;
[L2080]              decimals_SpaghettiTokenV2[this] := 18;
[L2081]              name_SpaghettiTokenV2[this] := -432993173;
[L2082]              __var_1 := null;
[L2083]              foodbank_SpaghettiTokenV2[this] := null;
[L2084]              governance_SpaghettiTokenV2[this] := null;
[L2085]              food_SpaghettiTokenV2[this] := 0;
[L2086]              oven_SpaghettiTokenV2[this] := 0;
[L2088]              governance_SpaghettiTokenV2[this] := msgsender_MSG;
[L2089]              totalSupply_SpaghettiTokenV2[this] := 5000000000000000000000000;
[L2090]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2091]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := 5000000000000000000000000;
[L2092]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2115]  RET         call SpaghettiTokenV2_SpaghettiTokenV2_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L268]   RET         call SpaghettiTokenV2_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L269]               assume !revert && gas >= 0;
[L3716]  RET         call SpaghettiTokenV2_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
SpaghettiTokenV2(231584178474632390847141970017375815706539969331281123078915168015826259279877).mint.gas(3979002)({from : 231584178474632390847141970017375815706539969331281123078915168015826259279878});
[L563]               havoc __exception;
[L564]               revert := false;
[L565]   COND FALSE  !(__exception)
[L591]   CALL        call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2487]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2492]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2497]              v1Balance_s461 := v1Balance_s461;
[L2498]  COND FALSE  !(!(now <= 1598745600))
[L2502]  COND FALSE  !(!(v1Balance_s461 > 0))
[L2506]              __var_24 := null;
[L2507]  COND FALSE  !(DType[pastav1_SpaghettiTokenV2[this]] == SpaghettiTokenV2)
[L2512]  COND TRUE   DType[pastav1_SpaghettiTokenV2[this]] == ERC20
[L2517]  COND FALSE  !(!__var_22)
[L2521]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2522]              balanceOf_SpaghettiTokenV2[this][msgsender_MSG] := v1Balance_s461;
[L2523]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][msgsender_MSG];
[L2524]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2525]  CALL        call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2525]  RET         call __var_25 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_SpaghettiTokenV2[this], v1Balance_s461);
[L2526]  COND FALSE  !(revert)
[L2532]              totalSupply_SpaghettiTokenV2[this] := __var_25;
[L2533]              assert { :EventEmitted "Mint_SpaghettiTokenV2" } true;
[L591]   RET         call __ret_0_ := mint_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L592]               assume !revert && gas >= 0;
[L3676]  RET         call __ret_0_mint := mint_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);
SpaghettiTokenV2(231584178474632390847141970017375815706539969331281123078915168015826259279877).transferFrom~address~address~uint256.gas(3979003)({from : 231584178474632390847141970017375815706539969331281123078915168015826259279878, src : 231584178474632390847141970017375815706539969331281123078915168015826259279878, dst : 231584178474632390847141970017375815706539969331281123078915168015826259279875, wad : 115792089237316195423570985008687907853269984665640564039457584007913129639900});
[L496]               havoc __exception;
[L497]               revert := false;
[L498]   COND FALSE  !(__exception)
[L524]   CALL        call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L524]   RET         call __ret_0_ := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
[L525]               assume !revert && gas >= 0;
[L3596]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, src_s399, dst_s399, wad_s399);
SpaghettiTokenV2(231584178474632390847141970017375815706539969331281123078915168015826259279877).transfer~address~uint256.gas(3979004)({from : 231584178474632390847141970017375815706539969331281123078915168015826259279875, dst : 231584178474632390847141970017375815706539969331281123078915168015826259279878, wad : 57896044618658097711785492504343953926634992332820282019728792003956564819962});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != dst_s253 && (wad_s253 > balanceOf_SpaghettiTokenV2[this][msgsender_MSG] || balanceOf_SpaghettiTokenV2[this][dst_s253] + wad_s253 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && wad_s253 >= 0) && wad_s253 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][dst_s253] >= 0) && balanceOf_SpaghettiTokenV2[this][dst_s253] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] >= 0) && balanceOf_SpaghettiTokenV2[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_SpaghettiTokenV20 := true;
[L2]                 call_transfer_SpaghettiTokenV20 := false;
[L2]                 revert := revert_hold;
[L430]               havoc __exception;
[L431]               revert := false;
[L432]   COND FALSE  !(__exception)
[L458]   CALL        call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L2184]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2185]  CALL        call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2329]              __var_5 := -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2330]  COND FALSE  !(src_s399 != msgsender_MSG && allowance_SpaghettiTokenV2[this][src_s399][msgsender_MSG] != -1 % 115792089237316195423570985008687907853269984665640564039457584007913129639936)
[L2347]  COND FALSE  !(!(balanceOf_SpaghettiTokenV2[this][src_s399] >= wad_s399))
[L2351]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2352]  CALL        call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2352]  RET         call __var_7 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][src_s399], wad_s399);
[L2353]  COND FALSE  !(revert)
[L2359]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][src_s399];
[L2360]              balanceOf_SpaghettiTokenV2[this][src_s399] := __var_7;
[L2361]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][src_s399];
[L2362]              one_s399 := wad_s399 / 100 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2363]              __var_9 := 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2364]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2365]  CALL        call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2034]              z_s104 := nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2035]  COND FALSE  !(!(y_s104 == 0 || nonlinearDiv(nonlinearMul(x_s104, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936, y_s104) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == x_s104))
[L2365]  RET         call __var_8 := mul~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, one_s399, 2 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2366]  COND FALSE  !(revert)
[L2372]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2373]  CALL        call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2016]              z_s76 := (x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2017]  COND FALSE  !(!((x_s76 - y_s76) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 <= x_s76))
[L2373]  RET         call ninetyeight_s399 := sub~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, wad_s399, __var_8);
[L2374]  COND FALSE  !(revert)
[L2380]              ninetyeight_s399 := ninetyeight_s399;
[L2381]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2382]  CALL        call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2382]  RET         call __var_10 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, balanceOf_SpaghettiTokenV2[this][dst_s399], ninetyeight_s399);
[L2383]  COND FALSE  !(revert)
[L2389]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2390]              balanceOf_SpaghettiTokenV2[this][dst_s399] := __var_10;
[L2391]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_SpaghettiTokenV2[this][dst_s399];
[L2392]              __var_13 := food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2393]              __var_15 := one_s399 % 340282366920938463463374607431768211456;
[L2394]              __var_14 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2395]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2396]  CALL        call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2396]  RET         call __var_12 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, food_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2397]  COND FALSE  !(revert)
[L2403]              __var_11 := __var_12 % 340282366920938463463374607431768211456;
[L2404]              food_SpaghettiTokenV2[this] := __var_11;
[L2405]              __var_18 := oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2406]              __var_20 := one_s399 % 340282366920938463463374607431768211456;
[L2407]              __var_19 := one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  COND TRUE   DType[this] == SpaghettiTokenV2
[L2409]  CALL        call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L1998]              z_s54 := (x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1999]  COND FALSE  !(!((x_s54 + y_s54) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= x_s54))
[L2409]  RET         call __var_17 := add~uint256~uint256_DSMath__success(this, msgsender_MSG, msgvalue_MSG, oven_SpaghettiTokenV2[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936, one_s399 % 340282366920938463463374607431768211456 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2410]  COND FALSE  !(revert)
[L2416]              __var_16 := __var_17 % 340282366920938463463374607431768211456;
[L2417]              oven_SpaghettiTokenV2[this] := __var_16;
[L2418]              assert { :EventEmitted "Transfer_SpaghettiTokenV2" } true;
[L2419]              __ret_0_ := true;
[L2185]  RET         call __var_4 := transferFrom~address~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, dst_s253, wad_s253);
[L2186]  COND FALSE  !(revert)
[L2192]              __ret_0_ := __var_4;
[L458]   RET         call __ret_0_ := transfer~address~uint256_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);
[L459]               assume !revert && gas >= 0;
[L3670]  RET         call __ret_0_transfer := transfer~address~uint256_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG, dst_s253, wad_s253);

Loop:
SpaghettiTokenV2(231584178474632390847141970017375815706539969331281123078915168015826259279877).totalSupply.gas(3979001)({from : 231584178474632390847141970017375815706539969331281123078915168015826259279876});
[L870]               havoc __exception;
[L871]               revert := false;
[L872]   COND FALSE  !(__exception)
[L898]   CALL        call __ret_0_ := totalSupply_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L2665]              __ret_0_ := totalSupply_SpaghettiTokenV2[this];
[L898]   RET         call __ret_0_ := totalSupply_SpaghettiTokenV2__success(this, msgsender_MSG, msgvalue_MSG);
[L899]               assume !revert && gas >= 0;
[L3583]  RET         call __ret_0_totalSupply := totalSupply_SpaghettiTokenV2(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
