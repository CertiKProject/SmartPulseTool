This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:11:43,227 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:11:43,228 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:11:43,241 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:11:43,242 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:11:43,242 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:11:43,243 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:11:43,245 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:11:43,246 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:11:43,247 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:11:43,248 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:11:43,248 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:11:43,249 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:11:43,250 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:11:43,251 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:11:43,252 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:11:43,252 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:11:43,253 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:11:43,255 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:11:43,256 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:11:43,257 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:11:43,258 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:11:43,260 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:11:43,260 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:11:43,260 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:11:43,261 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:11:43,261 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:11:43,262 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:11:43,262 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:11:43,262 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:11:43,263 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:11:43,263 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:11:43,264 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:11:43,264 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:11:43,265 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:11:43,265 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:11:43,266 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:11:43,266 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:11:43,266 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:11:43,267 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:11:43,267 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:11:43,267 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:11:43,276 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:11:43,276 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:11:43,277 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:11:43,277 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:11:43,277 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:11:43,277 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:11:43,278 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:11:43,278 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:11:43,278 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:11:43,279 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:11:43,279 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:11:43,301 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:11:43,313 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:11:43,317 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:11:43,318 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:11:43,319 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:11:43,319 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl
[2020-11-24 20:11:43,320 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl'
[2020-11-24 20:11:43,424 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:11:43,425 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:11:43,426 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:11:43,426 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:11:43,426 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:11:43,448 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,451 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,501 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,502 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,534 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,549 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,561 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,576 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:11:43,576 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:11:43,576 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:11:43,578 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:11:43,582 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/1) ...
[2020-11-24 20:11:43,602 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:11:43,608 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:11:43,616 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:11:43,624 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s458 && ( value_s458>_balances_ERC20[this][msg.sender] || ( _balances_ERC20[this][to_s458] + value_s458 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s458>=0 ) && value_s458<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s458]>=0 ) && _balances_ERC20[this][to_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IdentifierExpression[value_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:11:43,632 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender != to && (value > _balances_ERC20[this][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transfer)))
[2020-11-24 20:11:43,632 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(fail_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:11:43,647 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:11:43 PropertyContainer
[2020-11-24 20:11:43,648 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:11:43,648 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:11:43,648 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:11:43,648 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:11:43,649 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/2) ...
[2020-11-24 20:11:43,649 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:11:43,650 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:11:43,671 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:11:43" (2/2) ...
[2020-11-24 20:11:43,671 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:11:43,671 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:11:43,671 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:11:43,671 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:11:43,672 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/2) ...
[2020-11-24 20:11:43,727 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:11:43,727 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-24 20:11:43,727 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:11:43,727 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:11:43,727 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:11:43,727 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,727 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-24 20:11:43,728 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-24 20:11:43,728 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-24 20:11:43,729 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-24 20:11:43,729 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-24 20:11:43,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-24 20:11:43,729 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-24 20:11:43,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-24 20:11:43,729 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-24 20:11:43,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-24 20:11:43,729 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-24 20:11:43,729 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-24 20:11:43,730 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-24 20:11:43,730 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-24 20:11:43,730 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:11:43,730 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:11:43,730 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:11:43,730 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:11:43,730 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:11:43,730 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:11:43,731 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:11:43,731 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:11:43,731 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:11:43,731 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:11:43,731 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:11:43,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:11:43,731 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:11:43,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:11:43,731 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:11:43,731 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:11:43,732 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:11:43,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:11:43,732 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:11:43,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:11:43,732 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:11:43,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:11:43,732 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:11:43,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:11:43,732 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:11:43,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:11:43,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-24 20:11:43,733 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-24 20:11:43,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-24 20:11:43,734 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-24 20:11:43,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-24 20:11:43,734 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-24 20:11:43,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-24 20:11:43,734 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-24 20:11:43,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-24 20:11:43,734 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-24 20:11:43,734 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-24 20:11:43,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-24 20:11:43,734 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-24 20:11:43,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-24 20:11:43,735 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-24 20:11:43,735 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-24 20:11:43,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-24 20:11:43,735 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-24 20:11:43,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-24 20:11:43,735 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-24 20:11:43,735 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-24 20:11:43,735 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-24 20:11:43,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-24 20:11:43,736 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-24 20:11:43,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-24 20:11:43,736 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-24 20:11:43,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-24 20:11:43,736 INFO  L130     BoogieDeclarations]: Found specification of procedure KOCToken_KOCToken_NoBaseCtor__success
[2020-11-24 20:11:43,736 INFO  L130     BoogieDeclarations]: Found specification of procedure KOCToken_KOCToken
[2020-11-24 20:11:43,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure KOCToken_KOCToken
[2020-11-24 20:11:43,736 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:11:43,736 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:11:43,737 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-24 20:11:43,738 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KOCToken
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,739 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-24 20:11:43,740 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-24 20:11:43,741 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:11:43,742 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:11:43,743 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-24 20:11:43,744 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-24 20:11:43,745 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-24 20:11:43,746 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure KOCToken_KOCToken_NoBaseCtor__fail
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure KOCToken_KOCToken__success
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure KOCToken_KOCToken__fail
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:11:43,747 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-24 20:11:43,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:11:43,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:11:43,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-24 20:11:43,747 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,748 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-24 20:11:43,749 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-24 20:11:43,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:11:43,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:11:43,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:11:43,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-24 20:11:43,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-24 20:11:43,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-24 20:11:43,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure KOCToken_KOCToken_NoBaseCtor__fail
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure KOCToken_KOCToken_NoBaseCtor__success
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure KOCToken_KOCToken__fail
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure KOCToken_KOCToken__success
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-24 20:11:43,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-24 20:11:43,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KOCToken
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:11:43,759 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:11:43,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:11:44,082 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:11:44,082 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:11:44,848 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:11:44,848 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-24 20:11:44,851 INFO  L202        PluginConnector]: Adding new model KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:11:44 BoogieIcfgContainer
[2020-11-24 20:11:44,851 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:11:43" (2/2) ...
[2020-11-24 20:11:44,851 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:11:44,851 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@488d39d0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:11:44, skipping insertion in model container
[2020-11-24 20:11:44,852 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:11:44,852 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:11:44,852 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:11:44,853 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:11:44,853 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/3) ...
[2020-11-24 20:11:44,854 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3ce64546 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:11:44, skipping insertion in model container
[2020-11-24 20:11:44,854 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:11:43" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:11:44,892 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:11:44 NWAContainer
[2020-11-24 20:11:44,892 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:11:44,893 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:11:44,893 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:11:44,893 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:11:44,894 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:11:44" (3/4) ...
[2020-11-24 20:11:44,895 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6dae432b and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:11:44, skipping insertion in model container
[2020-11-24 20:11:44,895 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:11:44" (4/4) ...
[2020-11-24 20:11:44,899 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:11:44,905 INFO  L110   BuchiProductObserver]: Initial RCFG 2795 locations, 4114 edges
[2020-11-24 20:11:44,905 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:11:44,918 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:11:47,136 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:11:47,146 INFO  L110   BuchiProductObserver]: BuchiProgram size 7222 locations, 13519 edges
[2020-11-24 20:11:47,146 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:11:47 BoogieIcfgContainer
[2020-11-24 20:11:47,146 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:11:47,146 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:11:47,146 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:11:47,148 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:11:47,148 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:11:47" (1/1) ...
[2020-11-24 20:11:47,277 INFO  L313           BlockEncoder]: Initial Icfg 7222 locations, 13519 edges
[2020-11-24 20:11:47,278 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:11:47,278 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:11:47,278 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:11:47,279 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:11:47,294 INFO  L70    emoveInfeasibleEdges]: Removed 198 edges and 24 locations because of local infeasibility
[2020-11-24 20:11:47,306 INFO  L70        RemoveSinkStates]: Removed 212 edges and 124 locations by removing sink states
[2020-11-24 20:11:47,320 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:11:47,324 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:11:47,328 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:11:47,329 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:11:47,332 INFO  L313           BlockEncoder]: Encoded RCFG 7040 locations, 13059 edges
[2020-11-24 20:11:47,333 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:11:47 BasicIcfg
[2020-11-24 20:11:47,333 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:11:47,333 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:11:47,333 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:11:47,335 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:11:47,335 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:11:47,335 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:11:43" (1/6) ...
[2020-11-24 20:11:47,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@466941b1 and model type KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:11:47, skipping insertion in model container
[2020-11-24 20:11:47,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:11:47,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:11:43" (2/6) ...
[2020-11-24 20:11:47,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@466941b1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:11:47, skipping insertion in model container
[2020-11-24 20:11:47,337 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:11:47,337 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:11:44" (3/6) ...
[2020-11-24 20:11:47,337 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@466941b1 and model type KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:11:47, skipping insertion in model container
[2020-11-24 20:11:47,338 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:11:47,338 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:11:44" (4/6) ...
[2020-11-24 20:11:47,338 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@466941b1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:11:47, skipping insertion in model container
[2020-11-24 20:11:47,338 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:11:47,338 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:11:47" (5/6) ...
[2020-11-24 20:11:47,338 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@466941b1 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:11:47, skipping insertion in model container
[2020-11-24 20:11:47,338 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:11:47,338 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:11:47" (6/6) ...
[2020-11-24 20:11:47,339 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KOCToken_0xfae2b2f57ce6dce9a089b746e32ede3941b2208b_transfer-fail.bpl_BEv2
[2020-11-24 20:11:47,365 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:11:47,365 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:11:47,365 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:11:47,365 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:11:47,365 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:11:47,365 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:11:47,365 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:11:47,365 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:11:47,365 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:11:47,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7040 states.
[2020-11-24 20:11:47,470 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:47,470 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:47,470 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:47,480 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:47,480 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:47,480 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:11:47,480 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7040 states.
[2020-11-24 20:11:47,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:47,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:47,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:47,509 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:47,509 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND FALSE  !(__exception)
[L1969]  CALL        call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4870]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4870]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4871]  COND TRUE   revert
[L1969]  RET         call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1970]              assume !revert && gas >= 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND FALSE  !(gas >= 0)
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:47,526 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:47,526 INFO  L82        PathProgramCache]: Analyzing trace with hash -1212596038, now seen corresponding path program 1 times
[2020-11-24 20:11:47,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:47,552 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:47,597 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:11:47,599 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:47,599 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:11:47,889 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:47,897 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:11:47,898 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:11:47,899 INFO  L87              Difference]: Start difference. First operand 7040 states. Second operand 3 states.
[2020-11-24 20:11:48,104 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:48,105 INFO  L93              Difference]: Finished difference Result 2745 states and 3377 transitions.
[2020-11-24 20:11:48,105 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:11:48,106 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2745 states and 3377 transitions.
[2020-11-24 20:11:48,121 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:48,142 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2745 states to 2745 states and 3377 transitions.
[2020-11-24 20:11:48,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 20:11:48,145 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 742
[2020-11-24 20:11:48,145 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2745 states and 3377 transitions.
[2020-11-24 20:11:48,153 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:48,153 INFO  L728         BuchiCegarLoop]: Abstraction has 2745 states and 3377 transitions.
[2020-11-24 20:11:48,167 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2745 states and 3377 transitions.
[2020-11-24 20:11:48,207 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2745 to 2745.
[2020-11-24 20:11:48,207 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2745 states.
[2020-11-24 20:11:48,213 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2745 states to 2745 states and 3377 transitions.
[2020-11-24 20:11:48,214 INFO  L751         BuchiCegarLoop]: Abstraction has 2745 states and 3377 transitions.
[2020-11-24 20:11:48,214 INFO  L631         BuchiCegarLoop]: Abstraction has 2745 states and 3377 transitions.
[2020-11-24 20:11:48,214 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:11:48,214 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2745 states and 3377 transitions.
[2020-11-24 20:11:48,221 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:48,221 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:48,221 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:48,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:48,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND FALSE  !(__exception)
[L1969]  CALL        call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4870]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4870]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4871]  COND TRUE   revert
[L1969]  RET         call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1970]              assume !revert && gas >= 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND TRUE   !(to_s612 != null)
[L4060]              revert := true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND TRUE   revert
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND TRUE   !(to_s612 != null)
[L4060]              revert := true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND TRUE   revert
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:48,226 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:48,226 INFO  L82        PathProgramCache]: Analyzing trace with hash 1083893647, now seen corresponding path program 1 times
[2020-11-24 20:11:48,227 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:48,237 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:48,255 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:11:48,255 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:48,255 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:11:48,256 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:48,257 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:11:48,257 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:11:48,257 INFO  L87              Difference]: Start difference. First operand 2745 states and 3377 transitions. cyclomatic complexity: 634 Second operand 3 states.
[2020-11-24 20:11:48,362 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:48,362 INFO  L93              Difference]: Finished difference Result 3685 states and 4560 transitions.
[2020-11-24 20:11:48,362 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:11:48,363 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3685 states and 4560 transitions.
[2020-11-24 20:11:48,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:11:48,395 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3685 states to 3685 states and 4560 transitions.
[2020-11-24 20:11:48,395 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1007
[2020-11-24 20:11:48,396 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1007
[2020-11-24 20:11:48,396 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3685 states and 4560 transitions.
[2020-11-24 20:11:48,402 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:48,402 INFO  L728         BuchiCegarLoop]: Abstraction has 3685 states and 4560 transitions.
[2020-11-24 20:11:48,405 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3685 states and 4560 transitions.
[2020-11-24 20:11:48,440 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3685 to 3327.
[2020-11-24 20:11:48,440 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3327 states.
[2020-11-24 20:11:48,444 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3327 states to 3327 states and 4134 transitions.
[2020-11-24 20:11:48,444 INFO  L751         BuchiCegarLoop]: Abstraction has 3327 states and 4134 transitions.
[2020-11-24 20:11:48,445 INFO  L631         BuchiCegarLoop]: Abstraction has 3327 states and 4134 transitions.
[2020-11-24 20:11:48,445 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:11:48,445 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3327 states and 4134 transitions.
[2020-11-24 20:11:48,451 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:11:48,451 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:48,451 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:48,453 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:48,453 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND FALSE  !(__exception)
[L1969]  CALL        call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4870]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4870]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4871]  COND FALSE  !(revert)
[L4874]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4874]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4875]  COND FALSE  !(revert)
[L4878]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4389]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4389]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4364]              assume msgsender_MSG != null;
[L4365]              Balance[this] := 0;
[L4366]              _name_ERC20Detailed[this] := 1767506099;
[L4367]              _symbol_ERC20Detailed[this] := 1767506099;
[L4368]              _decimals_ERC20Detailed[this] := 0;
[L4370]              _name_ERC20Detailed[this] := name_s795;
[L4371]              _symbol_ERC20Detailed[this] := symbol_s795;
[L4372]              _decimals_ERC20Detailed[this] := decimals_s795;
[L4393]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4394]  COND FALSE  !(revert)
[L4878]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4879]  COND FALSE  !(revert)
[L4882]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4721]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4725]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L4729]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4698]              assume msgsender_MSG != null;
[L4699]              Balance[this] := 0;
[L4729]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4730]  COND FALSE  !(revert)
[L4882]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]  COND FALSE  !(revert)
[L4886]  CALL        call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]              assume msgsender_MSG != null;
[L4827]              Balance[this] := 0;
[L4828]              amount_KOCToken[this] := 10000000;
[L4830]              __var_27 := ConstantToRef(7544919301613266970804652377014389568456575767);
[L4831]  COND TRUE   DType[this] == KOCToken
[L4832]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4109]              __var_15 := null;
[L4110]  COND TRUE   !(account_s654 != null)
[L4111]              revert := true;
[L4832]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4833]  COND TRUE   revert
[L4886]  RET         call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4887]  COND FALSE  !(revert)
[L1969]  RET         call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1970]              assume !revert && gas >= 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND TRUE   !(to_s612 != null)
[L4060]              revert := true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND TRUE   revert
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND TRUE   !(to_s612 != null)
[L4060]              revert := true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND TRUE   revert
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:48,457 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:48,457 INFO  L82        PathProgramCache]: Analyzing trace with hash -1110216492, now seen corresponding path program 1 times
[2020-11-24 20:11:48,458 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:48,470 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:48,519 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-11-24 20:11:48,519 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:48,519 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:11:48,519 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:48,520 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:11:48,520 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:11:48,520 INFO  L87              Difference]: Start difference. First operand 3327 states and 4134 transitions. cyclomatic complexity: 809 Second operand 5 states.
[2020-11-24 20:11:48,549 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:48,549 INFO  L93              Difference]: Finished difference Result 3329 states and 4135 transitions.
[2020-11-24 20:11:48,549 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:11:48,549 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3329 states and 4135 transitions.
[2020-11-24 20:11:48,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:11:48,568 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3329 states to 3326 states and 4132 transitions.
[2020-11-24 20:11:48,569 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 937
[2020-11-24 20:11:48,569 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 937
[2020-11-24 20:11:48,569 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3326 states and 4132 transitions.
[2020-11-24 20:11:48,572 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:48,572 INFO  L728         BuchiCegarLoop]: Abstraction has 3326 states and 4132 transitions.
[2020-11-24 20:11:48,575 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3326 states and 4132 transitions.
[2020-11-24 20:11:48,603 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3326 to 3326.
[2020-11-24 20:11:48,603 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3326 states.
[2020-11-24 20:11:48,608 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3326 states to 3326 states and 4132 transitions.
[2020-11-24 20:11:48,608 INFO  L751         BuchiCegarLoop]: Abstraction has 3326 states and 4132 transitions.
[2020-11-24 20:11:48,608 INFO  L631         BuchiCegarLoop]: Abstraction has 3326 states and 4132 transitions.
[2020-11-24 20:11:48,608 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:11:48,608 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3326 states and 4132 transitions.
[2020-11-24 20:11:48,612 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:11:48,613 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:48,613 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:48,614 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:48,614 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND FALSE  !(__exception)
[L1969]  CALL        call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4870]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4870]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4871]  COND FALSE  !(revert)
[L4874]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4874]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4875]  COND FALSE  !(revert)
[L4878]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4389]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4389]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4364]              assume msgsender_MSG != null;
[L4365]              Balance[this] := 0;
[L4366]              _name_ERC20Detailed[this] := 1767506099;
[L4367]              _symbol_ERC20Detailed[this] := 1767506099;
[L4368]              _decimals_ERC20Detailed[this] := 0;
[L4370]              _name_ERC20Detailed[this] := name_s795;
[L4371]              _symbol_ERC20Detailed[this] := symbol_s795;
[L4372]              _decimals_ERC20Detailed[this] := decimals_s795;
[L4393]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4394]  COND FALSE  !(revert)
[L4878]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4879]  COND FALSE  !(revert)
[L4882]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4721]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4725]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L4729]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4698]              assume msgsender_MSG != null;
[L4699]              Balance[this] := 0;
[L4729]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4730]  COND FALSE  !(revert)
[L4882]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]  COND FALSE  !(revert)
[L4886]  CALL        call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]              assume msgsender_MSG != null;
[L4827]              Balance[this] := 0;
[L4828]              amount_KOCToken[this] := 10000000;
[L4830]              __var_27 := ConstantToRef(7544919301613266970804652377014389568456575767);
[L4831]  COND TRUE   DType[this] == KOCToken
[L4832]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4109]              __var_15 := null;
[L4110]  COND FALSE  !(!(account_s654 != null))
[L4114]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND TRUE   !(c_s106 >= a_s106)
[L3084]              revert := true;
[L4114]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L4115]  COND TRUE   revert
[L4832]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4833]  COND TRUE   revert
[L4886]  RET         call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4887]  COND FALSE  !(revert)
[L1969]  RET         call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1970]              assume !revert && gas >= 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND TRUE   !(to_s612 != null)
[L4060]              revert := true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND TRUE   revert
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND TRUE   !(to_s612 != null)
[L4060]              revert := true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND TRUE   revert
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:48,618 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:48,618 INFO  L82        PathProgramCache]: Analyzing trace with hash 654402935, now seen corresponding path program 1 times
[2020-11-24 20:11:48,619 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:48,627 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:48,660 INFO  L134       CoverageAnalysis]: Checked inductivity of 119 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 119 trivial. 0 not checked.
[2020-11-24 20:11:48,660 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:48,660 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:11:48,661 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:48,661 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:11:48,661 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:11:48,661 INFO  L87              Difference]: Start difference. First operand 3326 states and 4132 transitions. cyclomatic complexity: 808 Second operand 3 states.
[2020-11-24 20:11:48,732 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:48,732 INFO  L93              Difference]: Finished difference Result 3687 states and 4348 transitions.
[2020-11-24 20:11:48,733 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:11:48,733 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3687 states and 4348 transitions.
[2020-11-24 20:11:48,744 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:11:48,758 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3687 states to 3350 states and 3918 transitions.
[2020-11-24 20:11:48,758 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 897
[2020-11-24 20:11:48,759 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 917
[2020-11-24 20:11:48,759 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3350 states and 3918 transitions.
[2020-11-24 20:11:48,763 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:48,763 INFO  L728         BuchiCegarLoop]: Abstraction has 3350 states and 3918 transitions.
[2020-11-24 20:11:48,766 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3350 states and 3918 transitions.
[2020-11-24 20:11:48,797 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3350 to 3061.
[2020-11-24 20:11:48,797 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3061 states.
[2020-11-24 20:11:48,801 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3061 states to 3061 states and 3561 transitions.
[2020-11-24 20:11:48,802 INFO  L751         BuchiCegarLoop]: Abstraction has 3061 states and 3561 transitions.
[2020-11-24 20:11:48,802 INFO  L631         BuchiCegarLoop]: Abstraction has 3061 states and 3561 transitions.
[2020-11-24 20:11:48,802 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:11:48,802 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3061 states and 3561 transitions.
[2020-11-24 20:11:48,807 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:11:48,807 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:48,807 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:48,809 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:48,809 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND FALSE  !(__exception)
[L1969]  CALL        call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4870]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4870]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4871]  COND FALSE  !(revert)
[L4874]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4874]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4875]  COND FALSE  !(revert)
[L4878]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4389]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4389]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4364]              assume msgsender_MSG != null;
[L4365]              Balance[this] := 0;
[L4366]              _name_ERC20Detailed[this] := 1767506099;
[L4367]              _symbol_ERC20Detailed[this] := 1767506099;
[L4368]              _decimals_ERC20Detailed[this] := 0;
[L4370]              _name_ERC20Detailed[this] := name_s795;
[L4371]              _symbol_ERC20Detailed[this] := symbol_s795;
[L4372]              _decimals_ERC20Detailed[this] := decimals_s795;
[L4393]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4394]  COND FALSE  !(revert)
[L4878]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4879]  COND FALSE  !(revert)
[L4882]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4721]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4725]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L4729]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4698]              assume msgsender_MSG != null;
[L4699]              Balance[this] := 0;
[L4729]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4730]  COND FALSE  !(revert)
[L4882]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]  COND FALSE  !(revert)
[L4886]  CALL        call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]              assume msgsender_MSG != null;
[L4827]              Balance[this] := 0;
[L4828]              amount_KOCToken[this] := 10000000;
[L4830]              __var_27 := ConstantToRef(7544919301613266970804652377014389568456575767);
[L4831]  COND TRUE   DType[this] == KOCToken
[L4832]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4109]              __var_15 := null;
[L4110]  COND FALSE  !(!(account_s654 != null))
[L4114]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4114]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L4115]  COND FALSE  !(revert)
[L4118]              _totalSupply_ERC20[this] := __var_16;
[L4119]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], value_s654);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4119]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], value_s654);
[L4120]  COND FALSE  !(revert)
[L4123]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L4124]              _balances_ERC20[this][account_s654] := __var_17;
[L4125]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L4126]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4832]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4833]  COND FALSE  !(revert)
[L4839]              assert { :EventEmitted "CreateTokenSuccess_KOCToken" } true;
[L4886]  RET         call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4887]  COND FALSE  !(revert)
[L1969]  RET         call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1970]              assume !revert && gas >= 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND FALSE  !(!(to_s612 != null))
[L4063]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4063]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L4064]  COND FALSE  !(revert)
[L4067]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s612];
[L4068]              _balances_ERC20[this][from_s612] := __var_13;
[L4069]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s612];
[L4070]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4070]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L4071]  COND FALSE  !(revert)
[L4074]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s612];
[L4075]              _balances_ERC20[this][to_s612] := __var_14;
[L4076]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s612];
[L4077]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND FALSE  !(revert)
[L3665]              __ret_0_ := true;
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND FALSE  !(!(to_s612 != null))
[L4063]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4063]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L4064]  COND FALSE  !(revert)
[L4067]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s612];
[L4068]              _balances_ERC20[this][from_s612] := __var_13;
[L4069]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s612];
[L4070]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4070]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L4071]  COND FALSE  !(revert)
[L4074]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s612];
[L4075]              _balances_ERC20[this][to_s612] := __var_14;
[L4076]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s612];
[L4077]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND FALSE  !(revert)
[L3665]              __ret_0_ := true;
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:48,812 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:48,813 INFO  L82        PathProgramCache]: Analyzing trace with hash 1604719344, now seen corresponding path program 1 times
[2020-11-24 20:11:48,813 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:48,833 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:49,168 INFO  L134       CoverageAnalysis]: Checked inductivity of 124 backedges. 14 proven. 0 refuted. 0 times theorem prover too weak. 110 trivial. 0 not checked.
[2020-11-24 20:11:49,168 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:49,168 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-24 20:11:49,169 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:49,169 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-24 20:11:49,169 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=48, Invalid=414, Unknown=0, NotChecked=0, Total=462
[2020-11-24 20:11:49,169 INFO  L87              Difference]: Start difference. First operand 3061 states and 3561 transitions. cyclomatic complexity: 502 Second operand 22 states.
[2020-11-24 20:11:53,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:53,125 INFO  L93              Difference]: Finished difference Result 3166 states and 3678 transitions.
[2020-11-24 20:11:53,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-24 20:11:53,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3166 states and 3678 transitions.
[2020-11-24 20:11:53,132 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:11:53,142 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3166 states to 3166 states and 3678 transitions.
[2020-11-24 20:11:53,142 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 891
[2020-11-24 20:11:53,143 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 891
[2020-11-24 20:11:53,143 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3166 states and 3678 transitions.
[2020-11-24 20:11:53,146 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:53,146 INFO  L728         BuchiCegarLoop]: Abstraction has 3166 states and 3678 transitions.
[2020-11-24 20:11:53,149 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3166 states and 3678 transitions.
[2020-11-24 20:11:53,169 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3166 to 2992.
[2020-11-24 20:11:53,170 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2992 states.
[2020-11-24 20:11:53,173 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2992 states to 2992 states and 3469 transitions.
[2020-11-24 20:11:53,173 INFO  L751         BuchiCegarLoop]: Abstraction has 2992 states and 3469 transitions.
[2020-11-24 20:11:53,173 INFO  L631         BuchiCegarLoop]: Abstraction has 2992 states and 3469 transitions.
[2020-11-24 20:11:53,173 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:11:53,173 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2992 states and 3469 transitions.
[2020-11-24 20:11:53,177 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:53,177 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:53,177 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:53,179 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:53,179 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND TRUE   __exception
[L1943]              __tmp__Balance := Balance;
[L1944]              __tmp__DType := DType;
[L1945]              __tmp__Alloc := Alloc;
[L1946]              __tmp__balance_ADDR := balance_ADDR;
[L1947]              __tmp__M_Ref_bool := M_Ref_bool;
[L1948]              __tmp__sum := sum;
[L1949]              __tmp__M_Ref_int := M_Ref_int;
[L1950]              __tmp__sum__balances0 := sum__balances0;
[L1951]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L1952]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1953]              __tmp__sum__allowed1 := sum__allowed1;
[L1954]              __tmp__Length := Length;
[L1955]              __tmp__now := now;
[L1956]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L1957]              __tmp___minters_MinterRole := _minters_MinterRole;
[L1958]              __tmp___balances_ERC20 := _balances_ERC20;
[L1959]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L1960]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1961]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1962]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1963]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1964]              __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L1965]              __tmp__amount_KOCToken := amount_KOCToken;
[L1966]  CALL        call KOCToken_KOCToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4845]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3501]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3486]              assume msgsender_MSG != null;
[L3487]              __tmp__Balance[this] := 0;
[L3501]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3502]  COND FALSE  !(revert)
[L4845]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4846]  COND FALSE  !(revert)
[L4849]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3543]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3501]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3486]              assume msgsender_MSG != null;
[L3487]              __tmp__Balance[this] := 0;
[L3501]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3502]  COND FALSE  !(revert)
[L3543]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3544]  COND FALSE  !(revert)
[L3547]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3518]              assume msgsender_MSG != null;
[L3519]              __tmp__Balance[this] := 0;
[L3520]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3521]              __tmp__sum__balances0[this] := 0;
[L3522]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L3523]              __tmp__sum__allowed1[this] := 0;
[L3524]              __tmp___totalSupply_ERC20[this] := 0;
[L3547]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3548]  COND FALSE  !(revert)
[L4849]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4850]  COND FALSE  !(revert)
[L4853]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4377]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3501]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3486]              assume msgsender_MSG != null;
[L3487]              __tmp__Balance[this] := 0;
[L3501]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3502]  COND FALSE  !(revert)
[L4377]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4378]  COND FALSE  !(revert)
[L4381]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4350]              assume msgsender_MSG != null;
[L4351]              __tmp__Balance[this] := 0;
[L4352]              __tmp___name_ERC20Detailed[this] := 1767506099;
[L4353]              __tmp___symbol_ERC20Detailed[this] := 1767506099;
[L4354]              __tmp___decimals_ERC20Detailed[this] := 0;
[L4356]              __tmp___name_ERC20Detailed[this] := name_s795;
[L4357]              __tmp___symbol_ERC20Detailed[this] := symbol_s795;
[L4358]              __tmp___decimals_ERC20Detailed[this] := decimals_s795;
[L4381]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4382]  COND FALSE  !(revert)
[L4853]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4854]  COND FALSE  !(revert)
[L4857]  CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4705]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3501]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3486]              assume msgsender_MSG != null;
[L3487]              __tmp__Balance[this] := 0;
[L3501]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3502]  COND FALSE  !(revert)
[L4705]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3543]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3501]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3486]              assume msgsender_MSG != null;
[L3487]              __tmp__Balance[this] := 0;
[L3501]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3502]  COND FALSE  !(revert)
[L3543]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3544]  COND FALSE  !(revert)
[L3547]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3518]              assume msgsender_MSG != null;
[L3519]              __tmp__Balance[this] := 0;
[L3520]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L3521]              __tmp__sum__balances0[this] := 0;
[L3522]              __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L3523]              __tmp__sum__allowed1[this] := 0;
[L3524]              __tmp___totalSupply_ERC20[this] := 0;
[L3547]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3548]  COND FALSE  !(revert)
[L4709]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]              assume msgsender_MSG != null;
[L4691]              __tmp__Balance[this] := 0;
[L4713]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4857]  RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4858]  COND FALSE  !(revert)
[L4861]  CALL        call KOCToken_KOCToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4807]              assume msgsender_MSG != null;
[L4808]              __tmp__Balance[this] := 0;
[L4809]              __tmp__amount_KOCToken[this] := 10000000;
[L4811]              __var_27 := ConstantToRef(7544919301613266970804652377014389568456575767);
[L4812]  COND TRUE   __tmp__DType[this] == KOCToken
[L4813]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(__tmp__amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4085]              __var_15 := null;
[L4086]  COND FALSE  !(!(account_s654 != null))
[L4090]  CALL        call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s654);
[L3070]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3071]  COND FALSE  !(!(c_s106 >= a_s106))
[L3075]              __ret_0_ := c_s106;
[L4090]  RET         call __var_16 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s654);
[L4091]  COND FALSE  !(revert)
[L4094]              __tmp___totalSupply_ERC20[this] := __var_16;
[L4095]  CALL        call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s654], value_s654);
[L3070]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3071]  COND FALSE  !(!(c_s106 >= a_s106))
[L3075]              __ret_0_ := c_s106;
[L4095]  RET         call __var_17 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s654], value_s654);
[L4096]  COND FALSE  !(revert)
[L4099]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s654];
[L4100]              __tmp___balances_ERC20[this][account_s654] := __var_17;
[L4101]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s654];
[L4813]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(__tmp__amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4814]  COND FALSE  !(revert)
[L4861]  RET         call KOCToken_KOCToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4862]  COND FALSE  !(revert)
[L1966]  RET         call KOCToken_KOCToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L1967]              assume revert || gas < 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND FALSE  !(!(to_s612 != null))
[L4063]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4063]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L4064]  COND FALSE  !(revert)
[L4067]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s612];
[L4068]              _balances_ERC20[this][from_s612] := __var_13;
[L4069]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s612];
[L4070]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4070]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L4071]  COND FALSE  !(revert)
[L4074]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s612];
[L4075]              _balances_ERC20[this][to_s612] := __var_14;
[L4076]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s612];
[L4077]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND FALSE  !(revert)
[L3665]              __ret_0_ := true;
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND FALSE  !(gas >= 0)
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:53,182 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:53,182 INFO  L82        PathProgramCache]: Analyzing trace with hash -202208937, now seen corresponding path program 1 times
[2020-11-24 20:11:53,183 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:53,194 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:53,239 INFO  L134       CoverageAnalysis]: Checked inductivity of 124 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 124 trivial. 0 not checked.
[2020-11-24 20:11:53,239 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:53,240 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:11:53,240 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:53,241 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:11:53,241 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:11:53,241 INFO  L87              Difference]: Start difference. First operand 2992 states and 3469 transitions. cyclomatic complexity: 480 Second operand 4 states.
[2020-11-24 20:11:53,605 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:53,605 INFO  L93              Difference]: Finished difference Result 3559 states and 4182 transitions.
[2020-11-24 20:11:53,605 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:11:53,605 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3559 states and 4182 transitions.
[2020-11-24 20:11:53,613 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:11:53,622 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3559 states to 3412 states and 4029 transitions.
[2020-11-24 20:11:53,622 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 962
[2020-11-24 20:11:53,623 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 962
[2020-11-24 20:11:53,623 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3412 states and 4029 transitions.
[2020-11-24 20:11:53,626 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:53,626 INFO  L728         BuchiCegarLoop]: Abstraction has 3412 states and 4029 transitions.
[2020-11-24 20:11:53,628 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3412 states and 4029 transitions.
[2020-11-24 20:11:53,646 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3412 to 2845.
[2020-11-24 20:11:53,646 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2845 states.
[2020-11-24 20:11:53,649 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2845 states to 2845 states and 3315 transitions.
[2020-11-24 20:11:53,649 INFO  L751         BuchiCegarLoop]: Abstraction has 2845 states and 3315 transitions.
[2020-11-24 20:11:53,649 INFO  L631         BuchiCegarLoop]: Abstraction has 2845 states and 3315 transitions.
[2020-11-24 20:11:53,649 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:11:53,649 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2845 states and 3315 transitions.
[2020-11-24 20:11:53,653 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:53,653 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:53,653 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:53,654 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:53,654 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND FALSE  !(__exception)
[L1969]  CALL        call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4870]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4870]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4871]  COND FALSE  !(revert)
[L4874]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4874]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4875]  COND FALSE  !(revert)
[L4878]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4389]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4389]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4364]              assume msgsender_MSG != null;
[L4365]              Balance[this] := 0;
[L4366]              _name_ERC20Detailed[this] := 1767506099;
[L4367]              _symbol_ERC20Detailed[this] := 1767506099;
[L4368]              _decimals_ERC20Detailed[this] := 0;
[L4370]              _name_ERC20Detailed[this] := name_s795;
[L4371]              _symbol_ERC20Detailed[this] := symbol_s795;
[L4372]              _decimals_ERC20Detailed[this] := decimals_s795;
[L4393]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4394]  COND FALSE  !(revert)
[L4878]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4879]  COND FALSE  !(revert)
[L4882]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4721]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4725]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L4729]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4698]              assume msgsender_MSG != null;
[L4699]              Balance[this] := 0;
[L4729]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4730]  COND FALSE  !(revert)
[L4882]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]  COND FALSE  !(revert)
[L4886]  CALL        call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]              assume msgsender_MSG != null;
[L4827]              Balance[this] := 0;
[L4828]              amount_KOCToken[this] := 10000000;
[L4830]              __var_27 := ConstantToRef(7544919301613266970804652377014389568456575767);
[L4831]  COND TRUE   DType[this] == KOCToken
[L4832]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4109]              __var_15 := null;
[L4110]  COND FALSE  !(!(account_s654 != null))
[L4114]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4114]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L4115]  COND FALSE  !(revert)
[L4118]              _totalSupply_ERC20[this] := __var_16;
[L4119]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], value_s654);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4119]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], value_s654);
[L4120]  COND FALSE  !(revert)
[L4123]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L4124]              _balances_ERC20[this][account_s654] := __var_17;
[L4125]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L4126]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4832]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4833]  COND FALSE  !(revert)
[L4839]              assert { :EventEmitted "CreateTokenSuccess_KOCToken" } true;
[L4886]  RET         call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4887]  COND FALSE  !(revert)
[L1969]  RET         call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1970]              assume !revert && gas >= 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND FALSE  !(choice == 13)
[L7713]  COND FALSE  !(choice == 12)
[L7720]  COND FALSE  !(choice == 11)
[L7727]  COND FALSE  !(choice == 10)
[L7733]  COND FALSE  !(choice == 9)
[L7739]  COND FALSE  !(choice == 8)
[L7745]  COND FALSE  !(choice == 7)
[L7752]  COND FALSE  !(choice == 6)
[L7759]  COND FALSE  !(choice == 5)
[L7765]  COND FALSE  !(choice == 4)
[L7771]  COND FALSE  !(choice == 3)
[L7777]  COND TRUE   choice == 2
[L7778]              gas := gas - 21000;
[L7779]  COND TRUE   gas >= 0
[L7780]              assume value_s912 >= 0 && value_s912 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7781]              assume msgvalue_MSG == 0;
[L7782]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L1793]              havoc __exception;
[L1794]              revert := false;
[L1795]  COND FALSE  !(__exception)
[L1822]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L4754]  COND FALSE  !(DType[this] == KOCToken)
[L4759]  COND TRUE   DType[this] == ERC20Burnable
[L4760]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s912);
[L4158]              __var_18 := null;
[L4159]  COND FALSE  !(!(account_s696 != null))
[L4163]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s696);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4163]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s696);
[L4164]  COND FALSE  !(revert)
[L4167]              _totalSupply_ERC20[this] := __var_19;
[L4168]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s696], value_s696);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4168]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s696], value_s696);
[L4169]  COND FALSE  !(revert)
[L4172]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s696];
[L4173]              _balances_ERC20[this][account_s696] := __var_20;
[L4174]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s696];
[L4175]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4760]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s912);
[L4761]  COND FALSE  !(revert)
[L1822]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L1823]              assume !revert && gas >= 0;
[L7782]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L7809]  RET         call CorralChoice_KOCToken(this);
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND FALSE  !(!(to_s612 != null))
[L4063]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4063]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L4064]  COND FALSE  !(revert)
[L4067]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s612];
[L4068]              _balances_ERC20[this][from_s612] := __var_13;
[L4069]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s612];
[L4070]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4070]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L4071]  COND FALSE  !(revert)
[L4074]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s612];
[L4075]              _balances_ERC20[this][to_s612] := __var_14;
[L4076]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s612];
[L4077]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND FALSE  !(revert)
[L3665]              __ret_0_ := true;
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND FALSE  !(gas >= 0)
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:53,659 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:53,659 INFO  L82        PathProgramCache]: Analyzing trace with hash -2076120070, now seen corresponding path program 1 times
[2020-11-24 20:11:53,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:53,672 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:53,739 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 183 trivial. 0 not checked.
[2020-11-24 20:11:53,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:53,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 20:11:53,739 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:53,740 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:11:53,740 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:11:53,740 INFO  L87              Difference]: Start difference. First operand 2845 states and 3315 transitions. cyclomatic complexity: 473 Second operand 6 states.
[2020-11-24 20:11:53,805 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:53,805 INFO  L93              Difference]: Finished difference Result 2863 states and 3331 transitions.
[2020-11-24 20:11:53,805 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 20:11:53,806 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2863 states and 3331 transitions.
[2020-11-24 20:11:53,811 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:53,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2863 states to 2835 states and 3301 transitions.
[2020-11-24 20:11:53,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 826
[2020-11-24 20:11:53,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 826
[2020-11-24 20:11:53,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2835 states and 3301 transitions.
[2020-11-24 20:11:53,821 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:53,821 INFO  L728         BuchiCegarLoop]: Abstraction has 2835 states and 3301 transitions.
[2020-11-24 20:11:53,823 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2835 states and 3301 transitions.
[2020-11-24 20:11:53,837 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2835 to 2835.
[2020-11-24 20:11:53,837 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2835 states.
[2020-11-24 20:11:53,840 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2835 states to 2835 states and 3301 transitions.
[2020-11-24 20:11:53,840 INFO  L751         BuchiCegarLoop]: Abstraction has 2835 states and 3301 transitions.
[2020-11-24 20:11:53,840 INFO  L631         BuchiCegarLoop]: Abstraction has 2835 states and 3301 transitions.
[2020-11-24 20:11:53,840 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:11:53,840 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2835 states and 3301 transitions.
[2020-11-24 20:11:53,843 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:11:53,843 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:11:53,843 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:11:53,844 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:11:53,844 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L7799]              assume null == 0;
[L7800]  CALL        call this := FreshRefGenerator__success();
[L2939]              havoc newRef;
[L2940]              assume Alloc[newRef] == false;
[L2941]              Alloc[newRef] := true;
[L2942]              assume newRef != null;
[L7800]  RET         call this := FreshRefGenerator__success();
[L7801]              assume now >= 0;
[L7802]              assume DType[this] == KOCToken;
[L7803]              assume msgvalue_MSG == 0;
[L7804]              gas := gas - 53000;
[L7805]  CALL        call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L1940]              havoc __exception;
[L1941]              revert := false;
[L1942]  COND FALSE  !(__exception)
[L1969]  CALL        call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4870]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4870]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4871]  COND FALSE  !(revert)
[L4874]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4874]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4875]  COND FALSE  !(revert)
[L4878]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4389]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4389]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4390]  COND FALSE  !(revert)
[L4393]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4364]              assume msgsender_MSG != null;
[L4365]              Balance[this] := 0;
[L4366]              _name_ERC20Detailed[this] := 1767506099;
[L4367]              _symbol_ERC20Detailed[this] := 1767506099;
[L4368]              _decimals_ERC20Detailed[this] := 0;
[L4370]              _name_ERC20Detailed[this] := name_s795;
[L4371]              _symbol_ERC20Detailed[this] := symbol_s795;
[L4372]              _decimals_ERC20Detailed[this] := decimals_s795;
[L4393]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s795, symbol_s795, decimals_s795);
[L4394]  COND FALSE  !(revert)
[L4878]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1257239932, 1257239932, 18);
[L4879]  COND FALSE  !(revert)
[L4882]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4721]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L4721]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3555]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3509]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3494]              assume msgsender_MSG != null;
[L3495]              Balance[this] := 0;
[L3509]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3510]  COND FALSE  !(revert)
[L3555]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3556]  COND FALSE  !(revert)
[L3559]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3531]              assume msgsender_MSG != null;
[L3532]              Balance[this] := 0;
[L3533]              _balances_ERC20[this] := zeroRefintArr();
[L3534]              sum__balances0[this] := 0;
[L3535]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3536]              sum__allowed1[this] := 0;
[L3537]              _totalSupply_ERC20[this] := 0;
[L3559]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3560]  COND FALSE  !(revert)
[L4725]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L4729]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4698]              assume msgsender_MSG != null;
[L4699]              Balance[this] := 0;
[L4729]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4730]  COND FALSE  !(revert)
[L4882]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4883]  COND FALSE  !(revert)
[L4886]  CALL        call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]              assume msgsender_MSG != null;
[L4827]              Balance[this] := 0;
[L4828]              amount_KOCToken[this] := 10000000;
[L4830]              __var_27 := ConstantToRef(7544919301613266970804652377014389568456575767);
[L4831]  COND TRUE   DType[this] == KOCToken
[L4832]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4109]              __var_15 := null;
[L4110]  COND FALSE  !(!(account_s654 != null))
[L4114]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4114]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s654);
[L4115]  COND FALSE  !(revert)
[L4118]              _totalSupply_ERC20[this] := __var_16;
[L4119]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], value_s654);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4119]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], value_s654);
[L4120]  COND FALSE  !(revert)
[L4123]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L4124]              _balances_ERC20[this][account_s654] := __var_17;
[L4125]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L4126]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4832]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, ConstantToRef(7544919301613266970804652377014389568456575767), nonlinearMul(amount_KOCToken[this], 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4833]  COND FALSE  !(revert)
[L4839]              assert { :EventEmitted "CreateTokenSuccess_KOCToken" } true;
[L4886]  RET         call KOCToken_KOCToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4887]  COND FALSE  !(revert)
[L1969]  RET         call KOCToken_KOCToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1970]              assume !revert && gas >= 0;
[L7805]  RET         call KOCToken_KOCToken(this, msgsender_MSG, msgvalue_MSG);
[L7806]              assume !revert && gas >= 0;
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND FALSE  !(choice == 13)
[L7713]  COND FALSE  !(choice == 12)
[L7720]  COND FALSE  !(choice == 11)
[L7727]  COND FALSE  !(choice == 10)
[L7733]  COND FALSE  !(choice == 9)
[L7739]  COND FALSE  !(choice == 8)
[L7745]  COND FALSE  !(choice == 7)
[L7752]  COND FALSE  !(choice == 6)
[L7759]  COND FALSE  !(choice == 5)
[L7765]  COND FALSE  !(choice == 4)
[L7771]  COND FALSE  !(choice == 3)
[L7777]  COND TRUE   choice == 2
[L7778]              gas := gas - 21000;
[L7779]  COND TRUE   gas >= 0
[L7780]              assume value_s912 >= 0 && value_s912 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7781]              assume msgvalue_MSG == 0;
[L7782]  CALL        call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L1793]              havoc __exception;
[L1794]              revert := false;
[L1795]  COND FALSE  !(__exception)
[L1822]  CALL        call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L4754]  COND TRUE   DType[this] == KOCToken
[L4755]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s912);
[L4158]              __var_18 := null;
[L4159]  COND FALSE  !(!(account_s696 != null))
[L4163]  CALL        call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s696);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4163]  RET         call __var_19 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s696);
[L4164]  COND FALSE  !(revert)
[L4167]              _totalSupply_ERC20[this] := __var_19;
[L4168]  CALL        call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s696], value_s696);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4168]  RET         call __var_20 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s696], value_s696);
[L4169]  COND FALSE  !(revert)
[L4172]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s696];
[L4173]              _balances_ERC20[this][account_s696] := __var_20;
[L4174]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s696];
[L4175]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4755]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, value_s912);
[L4756]  COND FALSE  !(revert)
[L1822]  RET         call burn~uint256_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L1823]              assume !revert && gas >= 0;
[L7782]  RET         call burn~uint256_ERC20Burnable(this, msgsender_MSG, msgvalue_MSG, value_s912);
[L7809]  RET         call CorralChoice_KOCToken(this);
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND FALSE  !(!(to_s612 != null))
[L4063]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4063]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L4064]  COND FALSE  !(revert)
[L4067]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s612];
[L4068]              _balances_ERC20[this][from_s612] := __var_13;
[L4069]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s612];
[L4070]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4070]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L4071]  COND FALSE  !(revert)
[L4074]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s612];
[L4075]              _balances_ERC20[this][to_s612] := __var_14;
[L4076]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s612];
[L4077]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND FALSE  !(revert)
[L3665]              __ret_0_ := true;
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

Loop:
[L7809]  CALL        call CorralChoice_KOCToken(this);
[L7654]              havoc msgsender_MSG;
[L7655]              havoc msgvalue_MSG;
[L7656]              havoc choice;
[L7657]              havoc to_s458;
[L7658]              havoc value_s458;
[L7659]              havoc __ret_0_transfer;
[L7660]              havoc spender_s477;
[L7661]              havoc value_s477;
[L7662]              havoc __ret_0_approve;
[L7663]              havoc from_s512;
[L7664]              havoc to_s512;
[L7665]              havoc value_s512;
[L7666]              havoc __ret_0_transferFrom;
[L7667]              havoc __ret_0_totalSupply;
[L7668]              havoc owner_s423;
[L7669]              havoc __ret_0_balanceOf;
[L7670]              havoc owner_s439;
[L7671]              havoc spender_s439;
[L7672]              havoc __ret_0_allowance;
[L7673]              havoc spender_s539;
[L7674]              havoc addedValue_s539;
[L7675]              havoc __ret_0_increaseAllowance;
[L7676]              havoc spender_s566;
[L7677]              havoc subtractedValue_s566;
[L7678]              havoc __ret_0_decreaseAllowance;
[L7679]              havoc name_s795;
[L7680]              havoc symbol_s795;
[L7681]              havoc decimals_s795;
[L7682]              havoc __ret_0_name;
[L7683]              havoc __ret_0_symbol;
[L7684]              havoc __ret_0_decimals;
[L7685]              havoc value_s912;
[L7686]              havoc from_s925;
[L7687]              havoc value_s925;
[L7688]              havoc tmpNow;
[L7689]              havoc gas;
[L7690]              assume gas > 4000000 && gas <= 8000000;
[L7691]              tmpNow := now;
[L7692]              havoc now;
[L7693]              assume now > tmpNow;
[L7694]              assume msgsender_MSG != null;
[L7695]              assume DType[msgsender_MSG] != SafeMath;
[L7696]              assume DType[msgsender_MSG] != Roles;
[L7697]              assume DType[msgsender_MSG] != MinterRole;
[L7698]              assume DType[msgsender_MSG] != IERC20;
[L7699]              assume DType[msgsender_MSG] != ERC20;
[L7700]              assume DType[msgsender_MSG] != ERC20Detailed;
[L7701]              assume DType[msgsender_MSG] != ERC20Mintable;
[L7702]              assume DType[msgsender_MSG] != ERC20Capped;
[L7703]              assume DType[msgsender_MSG] != ERC20Burnable;
[L7704]              assume DType[msgsender_MSG] != KOCToken;
[L7705]              Alloc[msgsender_MSG] := true;
[L7706]  COND TRUE   choice == 13
[L7707]              gas := gas - 21000;
[L7708]  COND TRUE   gas >= 0
[L7709]              assume value_s458 >= 0 && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7710]              assume msgvalue_MSG == 0;
[L7711]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != to_s458 && (value_s458 > _balances_ERC20[this][msgsender_MSG] || _balances_ERC20[this][to_s458] + value_s458 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s458 >= 0) && value_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s458] >= 0) && _balances_ERC20[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L833]               havoc __exception;
[L834]               revert := false;
[L835]   COND FALSE  !(__exception)
[L862]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L3637]  COND TRUE   DType[this] == KOCToken
[L3638]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L4058]              __var_12 := null;
[L4059]  COND FALSE  !(!(to_s612 != null))
[L4063]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L3058]  COND FALSE  !(!(b_s82 <= a_s82))
[L3062]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s82;
[L4063]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][from_s612], value_s612);
[L4064]  COND FALSE  !(revert)
[L4067]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][from_s612];
[L4068]              _balances_ERC20[this][from_s612] := __var_13;
[L4069]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][from_s612];
[L4070]  CALL        call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L3082]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3083]  COND FALSE  !(!(c_s106 >= a_s106))
[L3087]              __ret_0_ := c_s106;
[L4070]  RET         call __var_14 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][to_s612], value_s612);
[L4071]  COND FALSE  !(revert)
[L4074]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][to_s612];
[L4075]              _balances_ERC20[this][to_s612] := __var_14;
[L4076]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][to_s612];
[L4077]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3638]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s458, value_s458);
[L3639]  COND FALSE  !(revert)
[L3665]              __ret_0_ := true;
[L862]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L863]               assume !revert && gas >= 0;
[L7711]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, to_s458, value_s458);
[L7809]  RET         call CorralChoice_KOCToken(this);

[2020-11-24 20:11:53,849 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:11:53,849 INFO  L82        PathProgramCache]: Analyzing trace with hash 1051785101, now seen corresponding path program 1 times
[2020-11-24 20:11:53,850 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:11:53,871 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:11:54,006 INFO  L134       CoverageAnalysis]: Checked inductivity of 184 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 184 trivial. 0 not checked.
[2020-11-24 20:11:54,007 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:11:54,007 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-24 20:11:54,007 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:11:54,007 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 20:11:54,007 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=107, Unknown=0, NotChecked=0, Total=132
[2020-11-24 20:11:54,007 INFO  L87              Difference]: Start difference. First operand 2835 states and 3301 transitions. cyclomatic complexity: 469 Second operand 12 states.
[2020-11-24 20:11:55,229 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:11:55,229 INFO  L93              Difference]: Finished difference Result 1704 states and 1973 transitions.
[2020-11-24 20:11:55,229 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-24 20:11:55,229 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1704 states and 1973 transitions.
[2020-11-24 20:11:55,232 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:11:55,232 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1704 states to 0 states and 0 transitions.
[2020-11-24 20:11:55,232 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:11:55,232 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:11:55,232 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:11:55,232 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:11:55,232 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:11:55,232 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:11:55,232 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:11:55,232 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:11:55,232 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:11:55,232 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:11:55,233 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:11:55,235 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:11:55 BasicIcfg
[2020-11-24 20:11:55,235 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:11:55,236 INFO  L168              Benchmark]: Toolchain (without parser) took 11811.23 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 929.8 MB in the beginning and 1.6 GB in the end (delta: -706.6 MB). Peak memory consumption was 383.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,237 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.24 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,237 INFO  L168              Benchmark]: Boogie Preprocessor took 150.36 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,237 INFO  L168              Benchmark]: UtopiaSpecLang took 71.44 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,237 INFO  L168              Benchmark]: Boogie Printer took 23.03 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,238 INFO  L168              Benchmark]: RCFGBuilder took 1180.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 897.6 MB in the beginning and 923.3 MB in the end (delta: -25.7 MB). Peak memory consumption was 185.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,238 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.78 ms. Allocated memory is still 1.1 GB. Free memory was 923.3 MB in the beginning and 919.9 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,238 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2253.36 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 188.2 MB). Free memory was 919.9 MB in the beginning and 1.0 GB in the end (delta: -127.7 MB). Peak memory consumption was 481.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,239 INFO  L168              Benchmark]: BlockEncodingV2 took 186.71 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 938.0 MB in the end (delta: 109.7 MB). Peak memory consumption was 109.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,239 INFO  L168              Benchmark]: BuchiAutomizer took 7902.22 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 836.2 MB). Free memory was 938.0 MB in the beginning and 1.6 GB in the end (delta: -698.5 MB). Peak memory consumption was 137.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:11:55,241 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7222 locations, 13519 edges
  - StatisticsResult: Encoded RCFG
    7040 locations, 13059 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.24 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 150.36 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 71.44 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 23.03 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1180.34 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 897.6 MB in the beginning and 923.3 MB in the end (delta: -25.7 MB). Peak memory consumption was 185.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.78 ms. Allocated memory is still 1.1 GB. Free memory was 923.3 MB in the beginning and 919.9 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2253.36 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 188.2 MB). Free memory was 919.9 MB in the beginning and 1.0 GB in the end (delta: -127.7 MB). Peak memory consumption was 481.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 186.71 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 938.0 MB in the end (delta: 109.7 MB). Peak memory consumption was 109.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 7902.22 ms. Allocated memory was 1.3 GB in the beginning and 2.1 GB in the end (delta: 836.2 MB). Free memory was 938.0 MB in the beginning and 1.6 GB in the end (delta: -698.5 MB). Peak memory consumption was 137.8 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2795 locations, 4114 edges
  - StatisticsResult: BuchiProgram size
    7222 locations, 13519 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 22 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 7.8s and 9 iterations.  TraceHistogramMax:5. Analysis of lassos took 1.1s. Construction of modules took 4.4s. BÃ¼chi inclusion checks took 1.6s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 7 MinimizatonAttempts, 1388 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3327 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 25182 SDtfs, 17741 SDslu, 49456 SDs, 0 SdLazy, 52580 SolverSat, 2770 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 4.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(fail_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
