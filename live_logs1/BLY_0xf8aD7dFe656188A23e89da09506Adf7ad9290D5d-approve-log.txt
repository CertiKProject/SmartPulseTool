This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:45:21,159 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:45:21,160 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:45:21,171 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:45:21,172 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:45:21,172 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:45:21,173 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:45:21,175 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:45:21,177 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:45:21,177 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:45:21,178 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:45:21,178 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:45:21,179 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:45:21,180 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:45:21,180 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:45:21,181 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:45:21,182 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:45:21,183 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:45:21,184 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:45:21,186 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:45:21,187 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:45:21,188 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:45:21,189 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:45:21,189 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:45:21,189 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:45:21,190 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:45:21,190 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:45:21,191 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:45:21,191 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:45:21,191 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:45:21,192 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:45:21,192 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:45:21,193 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:45:21,193 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:45:21,194 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:45:21,194 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:45:21,195 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:45:21,195 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:45:21,195 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:45:21,196 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:45:21,196 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:45:21,196 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:45:21,204 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:45:21,205 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:45:21,206 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:45:21,206 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:45:21,206 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:45:21,206 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:45:21,206 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:45:21,206 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:45:21,206 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:45:21,206 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:45:21,207 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:45:21,207 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:45:21,208 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:45:21,208 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:45:21,208 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:45:21,208 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:45:21,208 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:45:21,208 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:45:21,230 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:45:21,242 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:45:21,244 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:45:21,245 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:45:21,246 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:45:21,246 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl
[2020-11-25 00:45:21,246 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl'
[2020-11-25 00:45:21,383 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:45:21,384 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:45:21,385 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:45:21,385 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:45:21,385 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:45:21,402 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,403 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,462 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,463 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,501 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,531 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,547 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,570 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:45:21,571 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:45:21,571 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:45:21,573 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:45:21,577 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/1) ...
[2020-11-25 00:45:21,605 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(HxERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(HxERC20.approve(spender, value), return == true && _allowed_HxERC20[this][msg.sender][spender] == value &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:21,611 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(HxERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(HxERC20.approve(spender, value), return == true && _allowed_HxERC20[this][msg.sender][spender] == value &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:21,618 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(HxERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(HxERC20.approve(spender, value), return == true && _allowed_HxERC20[this][msg.sender][spender] == value &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:21,628 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s711 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s711,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]
[2020-11-25 00:45:21,632 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowed_HxERC20[this][msg.sender][spender_s711]==value_s711 ) && _totalSupply_HxERC20[this]==( old(_totalSupply_HxERC20[this]) ) ) && _balances_HxERC20[this]==( old(_balances_HxERC20[this]) ) ) && _allowed_HxERC20[this][p1][p2]==( old(_allowed_HxERC20[this][p1][p2]) ) ) && implementation_BLY[this]==( old(implementation_BLY[this]) ) ) && M_Ref_Ref[timelockList_BLY[this]]==( old(M_Ref_Ref[timelockList_BLY[this]]) ) ) && frozenAccount_BLY[this]==( old(frozenAccount_BLY[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_HxOwnable[this]==( old(owner_HxOwnable[this]) ) ) && newOwner_HxOwnable[this]==( old(newOwner_HxOwnable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_HxERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],[IdentifierExpression[spender_s711,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],IdentifierExpression[value_s711,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_HxERC20>]]]]]]
[2020-11-25 00:45:21,640 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(HxERC20.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(HxERC20.approve(spender, value), return == true && _allowed_HxERC20[this][msg.sender][spender] == value &&  _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:45:21,640 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_HxERC200) ==> ( <>AP(success_approve_HxERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:45:21,662 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:21 PropertyContainer
[2020-11-25 00:45:21,662 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:45:21,662 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:45:21,662 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:45:21,662 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:45:21,663 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/2) ...
[2020-11-25 00:45:21,664 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:45:21,664 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:45:21,692 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:21" (2/2) ...
[2020-11-25 00:45:21,692 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:45:21,693 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:45:21,693 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:45:21,693 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:45:21,694 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/2) ...
[2020-11-25 00:45:21,749 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:45:21,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:45:21,750 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,750 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:45:21,751 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 00:45:21,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 00:45:21,751 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 00:45:21,751 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 00:45:21,751 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 00:45:21,751 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:45:21,751 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 00:45:21,751 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 00:45:21,752 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 00:45:21,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 00:45:21,752 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:45:21,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:45:21,752 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 00:45:21,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 00:45:21,752 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 00:45:21,752 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 00:45:21,752 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 00:45:21,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 00:45:21,753 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:45:21,753 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 00:45:21,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 00:45:21,753 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 00:45:21,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 00:45:21,753 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 00:45:21,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 00:45:21,753 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 00:45:21,753 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 00:45:21,754 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 00:45:21,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 00:45:21,754 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:45:21,754 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:45:21,754 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:45:21,754 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 00:45:21,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 00:45:21,754 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 00:45:21,754 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 00:45:21,754 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 00:45:21,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 00:45:21,755 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 00:45:21,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 00:45:21,755 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:45:21,755 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 00:45:21,755 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 00:45:21,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 00:45:21,755 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 00:45:21,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 00:45:21,755 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 00:45:21,756 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 00:45:21,756 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 00:45:21,756 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:45:21,756 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 00:45:21,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 00:45:21,756 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 00:45:21,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 00:45:21,756 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 00:45:21,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 00:45:21,756 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 00:45:21,756 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 00:45:21,757 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:21,757 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:45:21,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:45:21,758 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:45:21,758 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:45:21,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:45:21,759 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:45:21,759 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:45:21,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:45:21,759 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 00:45:21,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 00:45:21,759 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 00:45:21,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 00:45:21,759 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 00:45:21,759 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 00:45:21,760 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:45:21,760 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 00:45:21,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 00:45:21,760 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 00:45:21,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 00:45:21,760 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 00:45:21,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 00:45:21,760 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:45:21,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:45:21,760 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 00:45:21,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 00:45:21,761 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 00:45:21,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 00:45:21,761 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:45:21,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:45:21,761 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:45:21,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:45:21,761 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 00:45:21,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 00:45:21,761 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 00:45:21,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 00:45:21,762 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:21,762 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:45:21,762 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:45:21,762 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 00:45:21,762 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 00:45:21,762 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 00:45:21,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 00:45:21,762 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 00:45:21,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 00:45:21,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 00:45:21,763 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 00:45:21,764 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 00:45:21,765 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:45:21,766 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 00:45:21,767 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 00:45:21,768 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:45:21,769 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 00:45:21,770 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:45:21,771 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:21,772 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:21,773 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 00:45:21,774 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:21,775 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 00:45:21,776 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 00:45:21,777 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 00:45:21,778 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 00:45:21,778 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 00:45:21,778 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:45:21,778 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:45:21,779 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:45:21,780 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 00:45:21,781 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 00:45:21,782 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 00:45:21,783 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:45:21,784 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,785 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:45:21,786 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 00:45:21,787 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:45:21,788 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:45:21,789 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:45:21,790 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 00:45:21,791 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 00:45:21,792 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 00:45:21,793 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:45:21,793 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:45:21,794 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:45:22,043 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:45:22,043 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:45:22,044 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:45:22,840 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:45:23,166 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:45:23,166 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 00:45:23,169 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:23 BoogieIcfgContainer
[2020-11-25 00:45:23,169 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:21" (2/2) ...
[2020-11-25 00:45:23,169 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:45:23,169 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@a9da308 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:23, skipping insertion in model container
[2020-11-25 00:45:23,169 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:45:23,170 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:45:23,170 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:45:23,171 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:45:23,171 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/3) ...
[2020-11-25 00:45:23,172 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@232afbec and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:23, skipping insertion in model container
[2020-11-25 00:45:23,172 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:21" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:45:23,211 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:23 NWAContainer
[2020-11-25 00:45:23,212 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:45:23,212 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:45:23,212 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:45:23,213 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:45:23,213 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:23" (3/4) ...
[2020-11-25 00:45:23,214 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7a403ba9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:23, skipping insertion in model container
[2020-11-25 00:45:23,214 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:23" (4/4) ...
[2020-11-25 00:45:23,217 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:45:23,224 INFO  L110   BuchiProductObserver]: Initial RCFG 4607 locations, 6370 edges
[2020-11-25 00:45:23,224 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:45:23,239 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:45:26,531 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:45:26,545 INFO  L110   BuchiProductObserver]: BuchiProgram size 11438 locations, 20724 edges
[2020-11-25 00:45:26,545 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:26 BoogieIcfgContainer
[2020-11-25 00:45:26,545 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:45:26,546 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:45:26,546 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:45:26,547 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:45:26,547 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:26" (1/1) ...
[2020-11-25 00:45:26,720 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:45:26,724 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:45:26,741 INFO  L313           BlockEncoder]: Initial Icfg 11438 locations, 20724 edges
[2020-11-25 00:45:26,741 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:45:26,742 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:45:26,742 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:45:26,742 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:45:26,764 INFO  L70    emoveInfeasibleEdges]: Removed 213 edges and 23 locations because of local infeasibility
[2020-11-25 00:45:26,784 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 00:45:26,807 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:45:26,814 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:45:26,820 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:45:26,821 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:45:26,826 INFO  L313           BlockEncoder]: Encoded RCFG 11296 locations, 20333 edges
[2020-11-25 00:45:26,827 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:45:26 BasicIcfg
[2020-11-25 00:45:26,827 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:45:26,827 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:45:26,827 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:45:26,829 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:45:26,829 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:26,829 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:45:21" (1/6) ...
[2020-11-25 00:45:26,830 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ac25d63 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:45:26, skipping insertion in model container
[2020-11-25 00:45:26,830 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:26,830 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:45:21" (2/6) ...
[2020-11-25 00:45:26,831 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ac25d63 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:45:26, skipping insertion in model container
[2020-11-25 00:45:26,831 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:26,831 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:45:23" (3/6) ...
[2020-11-25 00:45:26,831 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ac25d63 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:45:26, skipping insertion in model container
[2020-11-25 00:45:26,831 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:26,831 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:45:23" (4/6) ...
[2020-11-25 00:45:26,831 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ac25d63 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:45:26, skipping insertion in model container
[2020-11-25 00:45:26,831 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:26,832 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:45:26" (5/6) ...
[2020-11-25 00:45:26,832 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@4ac25d63 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:45:26, skipping insertion in model container
[2020-11-25 00:45:26,832 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:45:26,832 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:45:26" (6/6) ...
[2020-11-25 00:45:26,833 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_approve.bpl_BEv2
[2020-11-25 00:45:26,867 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:45:26,867 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:45:26,868 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:45:26,868 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:45:26,868 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:45:26,868 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:45:26,868 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:45:26,868 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:45:26,868 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:45:26,948 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11296 states.
[2020-11-25 00:45:27,036 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:27,036 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:27,036 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:27,044 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:27,044 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:27,044 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:45:27,044 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11296 states.
[2020-11-25 00:45:27,090 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:27,091 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:27,091 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:27,092 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:27,092 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND TRUE   choice == 32
[L11979]              gas := gas - 21000;
[L11980]  COND FALSE  !(gas >= 0)
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:27,107 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:27,107 INFO  L82        PathProgramCache]: Analyzing trace with hash -215510293, now seen corresponding path program 1 times
[2020-11-25 00:45:27,113 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:27,134 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:27,171 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:45:27,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:27,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:45:27,639 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:27,652 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:45:27,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:45:27,654 INFO  L87              Difference]: Start difference. First operand 11296 states. Second operand 3 states.
[2020-11-25 00:45:28,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:28,128 INFO  L93              Difference]: Finished difference Result 7167 states and 8391 transitions.
[2020-11-25 00:45:28,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:45:28,129 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7167 states and 8391 transitions.
[2020-11-25 00:45:28,160 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:28,201 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7167 states to 7167 states and 8391 transitions.
[2020-11-25 00:45:28,202 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 00:45:28,205 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1323
[2020-11-25 00:45:28,205 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7167 states and 8391 transitions.
[2020-11-25 00:45:28,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:28,219 INFO  L728         BuchiCegarLoop]: Abstraction has 7167 states and 8391 transitions.
[2020-11-25 00:45:28,239 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7167 states and 8391 transitions.
[2020-11-25 00:45:28,330 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7167 to 7167.
[2020-11-25 00:45:28,331 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7167 states.
[2020-11-25 00:45:28,342 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7167 states to 7167 states and 8391 transitions.
[2020-11-25 00:45:28,343 INFO  L751         BuchiCegarLoop]: Abstraction has 7167 states and 8391 transitions.
[2020-11-25 00:45:28,343 INFO  L631         BuchiCegarLoop]: Abstraction has 7167 states and 8391 transitions.
[2020-11-25 00:45:28,343 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:45:28,343 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7167 states and 8391 transitions.
[2020-11-25 00:45:28,354 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:28,354 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:28,354 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:28,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:28,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:28,361 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:28,362 INFO  L82        PathProgramCache]: Analyzing trace with hash -1249770618, now seen corresponding path program 1 times
[2020-11-25 00:45:28,363 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:28,376 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:28,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:45:28,404 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:28,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:45:28,405 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:28,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:45:28,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:45:28,405 INFO  L87              Difference]: Start difference. First operand 7167 states and 8391 transitions. cyclomatic complexity: 1234 Second operand 3 states.
[2020-11-25 00:45:28,615 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:28,615 INFO  L93              Difference]: Finished difference Result 9121 states and 10654 transitions.
[2020-11-25 00:45:28,615 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:45:28,615 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9121 states and 10654 transitions.
[2020-11-25 00:45:28,642 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:28,680 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9121 states to 9121 states and 10654 transitions.
[2020-11-25 00:45:28,680 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1836
[2020-11-25 00:45:28,681 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1836
[2020-11-25 00:45:28,681 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9121 states and 10654 transitions.
[2020-11-25 00:45:28,691 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:28,691 INFO  L728         BuchiCegarLoop]: Abstraction has 9121 states and 10654 transitions.
[2020-11-25 00:45:28,700 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9121 states and 10654 transitions.
[2020-11-25 00:45:28,781 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9121 to 7969.
[2020-11-25 00:45:28,781 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7969 states.
[2020-11-25 00:45:28,791 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7969 states to 7969 states and 9260 transitions.
[2020-11-25 00:45:28,791 INFO  L751         BuchiCegarLoop]: Abstraction has 7969 states and 9260 transitions.
[2020-11-25 00:45:28,791 INFO  L631         BuchiCegarLoop]: Abstraction has 7969 states and 9260 transitions.
[2020-11-25 00:45:28,791 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:45:28,791 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7969 states and 9260 transitions.
[2020-11-25 00:45:28,802 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:28,802 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:28,802 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:28,804 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:28,804 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND TRUE   !(account_s164 != null)
[L5740]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:28,809 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:28,809 INFO  L82        PathProgramCache]: Analyzing trace with hash -1004445649, now seen corresponding path program 1 times
[2020-11-25 00:45:28,810 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:28,821 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:28,896 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:45:28,896 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:28,897 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 00:45:28,897 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:28,897 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:45:28,897 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:45:28,897 INFO  L87              Difference]: Start difference. First operand 7969 states and 9260 transitions. cyclomatic complexity: 1301 Second operand 9 states.
[2020-11-25 00:45:29,033 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:29,033 INFO  L93              Difference]: Finished difference Result 8015 states and 9335 transitions.
[2020-11-25 00:45:29,033 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:45:29,033 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8015 states and 9335 transitions.
[2020-11-25 00:45:29,056 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:29,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8015 states to 8015 states and 9335 transitions.
[2020-11-25 00:45:29,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1540
[2020-11-25 00:45:29,083 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1540
[2020-11-25 00:45:29,083 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8015 states and 9335 transitions.
[2020-11-25 00:45:29,091 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:29,091 INFO  L728         BuchiCegarLoop]: Abstraction has 8015 states and 9335 transitions.
[2020-11-25 00:45:29,098 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8015 states and 9335 transitions.
[2020-11-25 00:45:29,162 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8015 to 8006.
[2020-11-25 00:45:29,162 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8006 states.
[2020-11-25 00:45:29,172 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8006 states to 8006 states and 9319 transitions.
[2020-11-25 00:45:29,172 INFO  L751         BuchiCegarLoop]: Abstraction has 8006 states and 9319 transitions.
[2020-11-25 00:45:29,172 INFO  L631         BuchiCegarLoop]: Abstraction has 8006 states and 9319 transitions.
[2020-11-25 00:45:29,172 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:45:29,173 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8006 states and 9319 transitions.
[2020-11-25 00:45:29,183 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:29,183 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:29,183 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:29,185 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:29,185 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND TRUE   DType[this] == ERC20Pausable
[L6022]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND TRUE   !(account_s218 != null)
[L5811]               revert := true;
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND TRUE   revert
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6022]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6023]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:29,190 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:29,190 INFO  L82        PathProgramCache]: Analyzing trace with hash 1564534097, now seen corresponding path program 1 times
[2020-11-25 00:45:29,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:29,200 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:29,261 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:45:29,261 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:29,261 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 00:45:29,262 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:29,262 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 00:45:29,262 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 00:45:29,262 INFO  L87              Difference]: Start difference. First operand 8006 states and 9319 transitions. cyclomatic complexity: 1323 Second operand 10 states.
[2020-11-25 00:45:29,384 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:29,384 INFO  L93              Difference]: Finished difference Result 8066 states and 9410 transitions.
[2020-11-25 00:45:29,384 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:45:29,384 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8066 states and 9410 transitions.
[2020-11-25 00:45:29,402 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:29,428 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8066 states to 8066 states and 9410 transitions.
[2020-11-25 00:45:29,428 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1547
[2020-11-25 00:45:29,429 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1547
[2020-11-25 00:45:29,429 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8066 states and 9410 transitions.
[2020-11-25 00:45:29,435 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:29,435 INFO  L728         BuchiCegarLoop]: Abstraction has 8066 states and 9410 transitions.
[2020-11-25 00:45:29,444 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8066 states and 9410 transitions.
[2020-11-25 00:45:29,505 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8066 to 8013.
[2020-11-25 00:45:29,505 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8013 states.
[2020-11-25 00:45:29,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8013 states to 8013 states and 9327 transitions.
[2020-11-25 00:45:29,514 INFO  L751         BuchiCegarLoop]: Abstraction has 8013 states and 9327 transitions.
[2020-11-25 00:45:29,514 INFO  L631         BuchiCegarLoop]: Abstraction has 8013 states and 9327 transitions.
[2020-11-25 00:45:29,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:45:29,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8013 states and 9327 transitions.
[2020-11-25 00:45:29,524 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:29,524 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:29,524 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:29,526 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:29,526 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND TRUE   !!__var_2
[L5748]               revert := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND TRUE   revert
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND TRUE   revert
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND TRUE   revert
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND TRUE   revert
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND TRUE   !(spender_s711 != null)
[L6605]               revert := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:29,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:29,530 INFO  L82        PathProgramCache]: Analyzing trace with hash -910926787, now seen corresponding path program 1 times
[2020-11-25 00:45:29,531 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:29,540 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:29,576 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 00:45:29,576 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:29,577 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:45:29,577 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:29,577 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:45:29,577 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:45:29,577 INFO  L87              Difference]: Start difference. First operand 8013 states and 9327 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 00:45:29,707 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:29,707 INFO  L93              Difference]: Finished difference Result 9141 states and 10342 transitions.
[2020-11-25 00:45:29,708 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:45:29,708 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9141 states and 10342 transitions.
[2020-11-25 00:45:29,727 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:45:29,753 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9141 states to 8463 states and 9538 transitions.
[2020-11-25 00:45:29,753 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1638
[2020-11-25 00:45:29,754 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1720
[2020-11-25 00:45:29,754 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8463 states and 9538 transitions.
[2020-11-25 00:45:29,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:29,761 INFO  L728         BuchiCegarLoop]: Abstraction has 8463 states and 9538 transitions.
[2020-11-25 00:45:29,767 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8463 states and 9538 transitions.
[2020-11-25 00:45:29,818 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8463 to 7479.
[2020-11-25 00:45:29,818 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7479 states.
[2020-11-25 00:45:29,826 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7479 states to 7479 states and 8312 transitions.
[2020-11-25 00:45:29,826 INFO  L751         BuchiCegarLoop]: Abstraction has 7479 states and 8312 transitions.
[2020-11-25 00:45:29,826 INFO  L631         BuchiCegarLoop]: Abstraction has 7479 states and 8312 transitions.
[2020-11-25 00:45:29,826 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:45:29,826 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7479 states and 8312 transitions.
[2020-11-25 00:45:29,834 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:45:29,834 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:29,834 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:29,838 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:29,838 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND FALSE  !(!(spender_s711 != null))
[L6608]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6609]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6610]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6611]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6612]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND FALSE  !(!(spender_s711 != null))
[L6608]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6609]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6610]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6611]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6612]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:29,844 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:29,845 INFO  L82        PathProgramCache]: Analyzing trace with hash -1608490155, now seen corresponding path program 1 times
[2020-11-25 00:45:29,845 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:29,919 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:30,266 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 8 proven. 0 refuted. 0 times theorem prover too weak. 922 trivial. 0 not checked.
[2020-11-25 00:45:30,266 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:45:30,266 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 00:45:30,267 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:30,267 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 00:45:30,267 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 00:45:30,267 INFO  L87              Difference]: Start difference. First operand 7479 states and 8312 transitions. cyclomatic complexity: 843 Second operand 15 states.
[2020-11-25 00:45:37,343 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:37,343 INFO  L93              Difference]: Finished difference Result 7646 states and 8501 transitions.
[2020-11-25 00:45:37,344 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 00:45:37,344 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7646 states and 8501 transitions.
[2020-11-25 00:45:37,359 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:45:37,377 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7646 states to 7646 states and 8501 transitions.
[2020-11-25 00:45:37,377 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1564
[2020-11-25 00:45:37,379 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1564
[2020-11-25 00:45:37,379 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7646 states and 8501 transitions.
[2020-11-25 00:45:37,383 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:37,383 INFO  L728         BuchiCegarLoop]: Abstraction has 7646 states and 8501 transitions.
[2020-11-25 00:45:37,390 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7646 states and 8501 transitions.
[2020-11-25 00:45:37,465 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7646 to 7602.
[2020-11-25 00:45:37,465 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7602 states.
[2020-11-25 00:45:37,472 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7602 states to 7602 states and 8448 transitions.
[2020-11-25 00:45:37,472 INFO  L751         BuchiCegarLoop]: Abstraction has 7602 states and 8448 transitions.
[2020-11-25 00:45:37,473 INFO  L631         BuchiCegarLoop]: Abstraction has 7602 states and 8448 transitions.
[2020-11-25 00:45:37,473 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:45:37,473 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7602 states and 8448 transitions.
[2020-11-25 00:45:37,480 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:45:37,480 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:37,480 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:37,482 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:37,482 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]               __tmp__implementation_BLY := implementation_BLY;
[L2072]               __tmp__timelockList_BLY := timelockList_BLY;
[L2073]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]               __var_14 := null;
[L6589]   COND TRUE   !(spender_s711 != null)
[L6590]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]               __tmp__implementation_BLY := implementation_BLY;
[L2072]               __tmp__timelockList_BLY := timelockList_BLY;
[L2073]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]               __var_14 := null;
[L6589]   COND TRUE   !(spender_s711 != null)
[L6590]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:37,500 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:37,501 INFO  L82        PathProgramCache]: Analyzing trace with hash 1322929916, now seen corresponding path program 1 times
[2020-11-25 00:45:37,501 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:37,514 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:37,673 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 00:45:37,673 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:37,673 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:45:37,674 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:37,674 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:45:37,674 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:45:37,674 INFO  L87              Difference]: Start difference. First operand 7602 states and 8448 transitions. cyclomatic complexity: 858 Second operand 7 states.
[2020-11-25 00:45:37,791 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:37,791 INFO  L93              Difference]: Finished difference Result 7625 states and 8475 transitions.
[2020-11-25 00:45:37,792 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:45:37,792 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7625 states and 8475 transitions.
[2020-11-25 00:45:37,804 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:45:37,819 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7625 states to 7608 states and 8455 transitions.
[2020-11-25 00:45:37,819 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1562
[2020-11-25 00:45:37,820 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1562
[2020-11-25 00:45:37,820 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7608 states and 8455 transitions.
[2020-11-25 00:45:37,824 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:37,825 INFO  L728         BuchiCegarLoop]: Abstraction has 7608 states and 8455 transitions.
[2020-11-25 00:45:37,830 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7608 states and 8455 transitions.
[2020-11-25 00:45:37,873 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7608 to 7608.
[2020-11-25 00:45:37,874 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7608 states.
[2020-11-25 00:45:37,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7608 states to 7608 states and 8455 transitions.
[2020-11-25 00:45:37,882 INFO  L751         BuchiCegarLoop]: Abstraction has 7608 states and 8455 transitions.
[2020-11-25 00:45:37,882 INFO  L631         BuchiCegarLoop]: Abstraction has 7608 states and 8455 transitions.
[2020-11-25 00:45:37,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:45:37,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7608 states and 8455 transitions.
[2020-11-25 00:45:37,890 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:45:37,890 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:37,890 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:37,892 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:37,892 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND FALSE  !(DType[this] == BLY)
[L6021]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6026]   COND FALSE  !(DType[this] == Pausable)
[L6031]   COND TRUE   DType[this] == PauserRole
[L6032]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6032]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6033]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]               __tmp__implementation_BLY := implementation_BLY;
[L2072]               __tmp__timelockList_BLY := timelockList_BLY;
[L2073]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]               __var_14 := null;
[L6589]   COND TRUE   !(spender_s711 != null)
[L6590]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]               __tmp__implementation_BLY := implementation_BLY;
[L2072]               __tmp__timelockList_BLY := timelockList_BLY;
[L2073]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]               __var_14 := null;
[L6589]   COND TRUE   !(spender_s711 != null)
[L6590]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:37,898 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:37,898 INFO  L82        PathProgramCache]: Analyzing trace with hash 881453695, now seen corresponding path program 1 times
[2020-11-25 00:45:37,899 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:37,914 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:38,086 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:45:38,086 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:38,086 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:45:38,087 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:38,087 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:45:38,087 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:45:38,087 INFO  L87              Difference]: Start difference. First operand 7608 states and 8455 transitions. cyclomatic complexity: 859 Second operand 8 states.
[2020-11-25 00:45:38,216 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:38,216 INFO  L93              Difference]: Finished difference Result 7629 states and 8479 transitions.
[2020-11-25 00:45:38,216 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:45:38,216 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7629 states and 8479 transitions.
[2020-11-25 00:45:38,229 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:45:38,244 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7629 states to 7615 states and 8463 transitions.
[2020-11-25 00:45:38,244 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1562
[2020-11-25 00:45:38,245 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1562
[2020-11-25 00:45:38,245 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7615 states and 8463 transitions.
[2020-11-25 00:45:38,249 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:38,249 INFO  L728         BuchiCegarLoop]: Abstraction has 7615 states and 8463 transitions.
[2020-11-25 00:45:38,255 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7615 states and 8463 transitions.
[2020-11-25 00:45:38,295 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7615 to 7615.
[2020-11-25 00:45:38,296 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7615 states.
[2020-11-25 00:45:38,303 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7615 states to 7615 states and 8463 transitions.
[2020-11-25 00:45:38,303 INFO  L751         BuchiCegarLoop]: Abstraction has 7615 states and 8463 transitions.
[2020-11-25 00:45:38,303 INFO  L631         BuchiCegarLoop]: Abstraction has 7615 states and 8463 transitions.
[2020-11-25 00:45:38,303 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:45:38,304 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7615 states and 8463 transitions.
[2020-11-25 00:45:38,311 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:45:38,311 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:38,311 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:38,313 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:38,313 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3036]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3040]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3041]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3046]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3047]               __tmp__implementation_BLY := implementation_BLY;
[L3048]               __tmp__timelockList_BLY := timelockList_BLY;
[L3049]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3050]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7307]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7308]   COND FALSE  !(revert)
[L7311]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7177]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L7177]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7178]   COND FALSE  !(revert)
[L7181]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7150]               assume msgsender_MSG != null;
[L7151]               __tmp__Balance[this] := 0;
[L7152]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7154]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7156]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7157]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7158]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7181]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7182]   COND FALSE  !(revert)
[L7311]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7312]   COND FALSE  !(revert)
[L7315]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L7315]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7316]   COND FALSE  !(revert)
[L7319]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7319]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7320]   COND FALSE  !(revert)
[L7323]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7323]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7324]   COND FALSE  !(revert)
[L7327]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7327]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7328]   COND FALSE  !(revert)
[L7331]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6993]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6994]   COND FALSE  !(revert)
[L6997]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]               assume msgsender_MSG != null;
[L6423]               __tmp__Balance[this] := 0;
[L6437]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6438]   COND FALSE  !(revert)
[L6479]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6480]   COND FALSE  !(revert)
[L6483]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6454]               assume msgsender_MSG != null;
[L6455]               __tmp__Balance[this] := 0;
[L6456]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6457]               __tmp__sum__balances0[this] := 0;
[L6458]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6459]               __tmp__sum__allowed1[this] := 0;
[L6460]               __tmp___totalSupply_HxERC20[this] := 0;
[L6483]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6484]   COND FALSE  !(revert)
[L6997]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6998]   COND FALSE  !(revert)
[L7001]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L7001]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7002]   COND FALSE  !(revert)
[L7005]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L7005]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7006]   COND FALSE  !(revert)
[L7009]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6323]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6327]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5822]               assume msgsender_MSG != null;
[L5823]               __tmp__Balance[this] := 0;
[L5824]               __tmp__owner_HxOwnable[this] := null;
[L5825]               __tmp__newOwner_HxOwnable[this] := null;
[L5827]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5828]               __var_6 := null;
[L5829]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5849]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5850]   COND FALSE  !(revert)
[L6044]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6045]   COND FALSE  !(revert)
[L6048]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5969]               assume msgsender_MSG != null;
[L5970]               __tmp__Balance[this] := 0;
[L5972]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L5972]   RET         call __var_10 := FreshRefGenerator__fail();
[L5973]   COND FALSE  !(revert)
[L5976]               __tmp___pausers_PauserRole[this] := __var_10;
[L5978]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5983]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5984]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6269]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5718]               __var_1 := null;
[L5719]   COND FALSE  !(!(account_s164 != null))
[L5723]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5797]               __var_5 := null;
[L5798]   COND FALSE  !(!(account_s218 != null))
[L5802]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5723]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5724]   COND FALSE  !(revert)
[L5727]   COND FALSE  !(!!__var_2)
[L5731]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6269]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6270]   COND FALSE  !(revert)
[L5984]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5985]   COND FALSE  !(revert)
[L6048]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6049]   COND FALSE  !(revert)
[L6327]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6328]   COND FALSE  !(revert)
[L6331]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6304]               assume msgsender_MSG != null;
[L6305]               __tmp__Balance[this] := 0;
[L6306]               __tmp___paused_Pausable[this] := false;
[L6308]               __tmp___paused_Pausable[this] := false;
[L6331]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6332]   COND FALSE  !(revert)
[L7009]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7010]   COND FALSE  !(revert)
[L7013]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6978]               assume msgsender_MSG != null;
[L6979]               __tmp__Balance[this] := 0;
[L7013]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7014]   COND FALSE  !(revert)
[L7331]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7332]   COND FALSE  !(revert)
[L7335]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7240]               assume msgsender_MSG != null;
[L7241]               __tmp__Balance[this] := 0;
[L7242]               __tmp__implementation_BLY[this] := null;
[L7244]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5490]               havoc newRef;
[L5491]               assume __tmp__Alloc[newRef] == false;
[L5492]               __tmp__Alloc[newRef] := true;
[L5493]               assume newRef != null;
[L7244]   RET         call __var_36 := FreshRefGenerator__fail();
[L7245]   COND FALSE  !(revert)
[L7248]               __tmp__timelockList_BLY[this] := __var_36;
[L7250]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7251]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7254]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7255]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7256]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7258]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7259]   COND TRUE   __tmp__DType[this] == BLY
[L7260]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6821]               __var_23 := null;
[L6822]   COND FALSE  !(!(account_s946 != null))
[L6826]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6826]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6827]   COND FALSE  !(revert)
[L6830]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6831]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5641]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5642]   COND FALSE  !(!(c_s106 >= a_s106))
[L5646]               __ret_0_ := c_s106;
[L6831]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6832]   COND FALSE  !(revert)
[L6835]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6836]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6837]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7260]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7261]   COND FALSE  !(revert)
[L7335]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7336]   COND FALSE  !(revert)
[L3050]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND FALSE  !(__exception)
[L2077]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6603]               __var_14 := null;
[L6604]   COND FALSE  !(!(spender_s711 != null))
[L6608]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6609]               _allowed_HxERC20[this][msgsender_MSG][spender_s711] := value_s711;
[L6610]               sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_HxERC20[this][msgsender_MSG][spender_s711];
[L6611]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6612]               __ret_0_ := true;
[L2077]   RET         call __ret_0_ := approve~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2078]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_HxERC20[this][msgsender_MSG][spender_s711] == value_s711) && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this][p1][p2] == old(_allowed_HxERC20[this][p1][p2])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]               __tmp__implementation_BLY := implementation_BLY;
[L2072]               __tmp__timelockList_BLY := timelockList_BLY;
[L2073]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]               __var_14 := null;
[L6589]   COND TRUE   !(spender_s711 != null)
[L6590]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:38,319 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:38,319 INFO  L82        PathProgramCache]: Analyzing trace with hash -36798838, now seen corresponding path program 1 times
[2020-11-25 00:45:38,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:38,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:45:38,494 INFO  L134       CoverageAnalysis]: Checked inductivity of 900 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 873 trivial. 0 not checked.
[2020-11-25 00:45:38,494 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:45:38,494 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:45:38,495 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:45:38,495 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:45:38,495 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:45:38,495 INFO  L87              Difference]: Start difference. First operand 7615 states and 8463 transitions. cyclomatic complexity: 860 Second operand 8 states.
[2020-11-25 00:45:39,763 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:45:39,763 INFO  L93              Difference]: Finished difference Result 10568 states and 11922 transitions.
[2020-11-25 00:45:39,763 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:45:39,763 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10568 states and 11922 transitions.
[2020-11-25 00:45:39,784 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:45:39,809 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10568 states to 10551 states and 11902 transitions.
[2020-11-25 00:45:39,809 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2169
[2020-11-25 00:45:39,811 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2169
[2020-11-25 00:45:39,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10551 states and 11902 transitions.
[2020-11-25 00:45:39,817 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:45:39,817 INFO  L728         BuchiCegarLoop]: Abstraction has 10551 states and 11902 transitions.
[2020-11-25 00:45:39,824 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10551 states and 11902 transitions.
[2020-11-25 00:45:39,875 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10551 to 10419.
[2020-11-25 00:45:39,875 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10419 states.
[2020-11-25 00:45:39,887 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10419 states to 10419 states and 11770 transitions.
[2020-11-25 00:45:39,887 INFO  L751         BuchiCegarLoop]: Abstraction has 10419 states and 11770 transitions.
[2020-11-25 00:45:39,887 INFO  L631         BuchiCegarLoop]: Abstraction has 10419 states and 11770 transitions.
[2020-11-25 00:45:39,887 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:45:39,887 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10419 states and 11770 transitions.
[2020-11-25 00:45:39,897 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:45:39,897 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:45:39,897 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:45:39,899 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:45:39,899 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_approve_HxERC200 := false;
[L3]                  call_approve_HxERC200 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12189]              assume null == 0;
[L12190]  CALL        call this := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L12190]  RET         call this := FreshRefGenerator__success();
[L12191]              assume now >= 0;
[L12192]              assume DType[this] == BLY;
[L12193]              assume msgvalue_MSG >= 0;
[L12194]              gas := gas - 53000;
[L12195]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12196]              assume !revert && gas >= 0;
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]               __tmp__implementation_BLY := implementation_BLY;
[L2072]               __tmp__timelockList_BLY := timelockList_BLY;
[L2073]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]               __var_14 := null;
[L6589]   COND TRUE   !(spender_s711 != null)
[L6590]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

Loop:
[L12199]  CALL        call CorralChoice_BLY(this);
[L11896]              havoc msgsender_MSG;
[L11897]              havoc msgvalue_MSG;
[L11898]              havoc choice;
[L11899]              havoc __ret_0_owner;
[L11900]              havoc __ret_0_newOwner;
[L11901]              havoc account_s293;
[L11902]              havoc __ret_0_isOwner;
[L11903]              havoc _newOwner_s313;
[L11904]              havoc __ret_0_acceptOwnership;
[L11905]              havoc account_s390;
[L11906]              havoc __ret_0_isPauser;
[L11907]              havoc account_s402;
[L11908]              havoc account_s414;
[L11909]              havoc __ret_0_paused;
[L11910]              havoc to_s1288;
[L11911]              havoc value_s1288;
[L11912]              havoc __ret_0_transfer;
[L11913]              havoc spender_s711;
[L11914]              havoc value_s711;
[L11915]              havoc __ret_0_approve;
[L11916]              havoc from_s1322;
[L11917]              havoc to_s1322;
[L11918]              havoc value_s1322;
[L11919]              havoc __ret_0_transferFrom;
[L11920]              havoc __ret_0_totalSupply;
[L11921]              havoc owner_s1254;
[L11922]              havoc __ret_0_balanceOf;
[L11923]              havoc owner_s656;
[L11924]              havoc spender_s656;
[L11925]              havoc __ret_0_allowance;
[L11926]              havoc spender_s809;
[L11927]              havoc addedValue_s809;
[L11928]              havoc __ret_0_increaseAllowance;
[L11929]              havoc spender_s858;
[L11930]              havoc subtractedValue_s858;
[L11931]              havoc __ret_0_decreaseAllowance;
[L11932]              havoc name_s1105;
[L11933]              havoc symbol_s1105;
[L11934]              havoc decimals_s1105;
[L11935]              havoc __ret_0_name;
[L11936]              havoc __ret_0_symbol;
[L11937]              havoc __ret_0_decimals;
[L11938]              havoc __ret_0_implementation;
[L11939]              havoc arg1675_s0;
[L11940]              havoc arg1676_s0;
[L11941]              havoc __ret_0_timelockList;
[L11942]              havoc arg1677_s0;
[L11943]              havoc __ret_0_frozenAccount;
[L11944]              havoc holder_s1351;
[L11945]              havoc __ret_0_freezeAccount;
[L11946]              havoc holder_s1379;
[L11947]              havoc __ret_0_unfreezeAccount;
[L11948]              havoc holder_s1410;
[L11949]              havoc value_s1410;
[L11950]              havoc releaseTime_s1410;
[L11951]              havoc __ret_0_lock;
[L11952]              havoc holder_s1439;
[L11953]              havoc value_s1439;
[L11954]              havoc releaseTime_s1439;
[L11955]              havoc __ret_0_transferWithLock;
[L11956]              havoc holder_s1468;
[L11957]              havoc idx_s1468;
[L11958]              havoc __ret_0_unlock;
[L11959]              havoc _newImplementation_s1486;
[L11960]              havoc tmpNow;
[L11961]              havoc gas;
[L11962]              assume gas > 4000000 && gas <= 8000000;
[L11963]              tmpNow := now;
[L11964]              havoc now;
[L11965]              assume now > tmpNow;
[L11966]              assume msgsender_MSG != null;
[L11967]              assume DType[msgsender_MSG] != HxSafeMath;
[L11968]              assume DType[msgsender_MSG] != Roles;
[L11969]              assume DType[msgsender_MSG] != HxOwnable;
[L11970]              assume DType[msgsender_MSG] != PauserRole;
[L11971]              assume DType[msgsender_MSG] != Pausable;
[L11972]              assume DType[msgsender_MSG] != IERC20;
[L11973]              assume DType[msgsender_MSG] != HxERC20;
[L11974]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11975]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11976]              assume DType[msgsender_MSG] != BLY;
[L11977]              Alloc[msgsender_MSG] := true;
[L11978]  COND FALSE  !(choice == 32)
[L11984]  COND FALSE  !(choice == 31)
[L11990]  COND FALSE  !(choice == 30)
[L11996]  COND FALSE  !(choice == 29)
[L12002]  COND FALSE  !(choice == 28)
[L12008]  COND FALSE  !(choice == 27)
[L12014]  COND FALSE  !(choice == 26)
[L12020]  COND FALSE  !(choice == 25)
[L12026]  COND FALSE  !(choice == 24)
[L12032]  COND FALSE  !(choice == 23)
[L12038]  COND FALSE  !(choice == 22)
[L12044]  COND FALSE  !(choice == 21)
[L12050]  COND FALSE  !(choice == 20)
[L12057]  COND TRUE   choice == 19
[L12058]              gas := gas - 21000;
[L12059]  COND TRUE   gas >= 0
[L12060]              assume value_s711 >= 0 && value_s711 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12061]              assume msgvalue_MSG == 0;
[L12062]  CALL        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                  call_approve_HxERC200 := true;
[L3]                  call_approve_HxERC200 := false;
[L3]                  revert := revert_hold;
[L2039]               havoc __exception;
[L2040]               revert := false;
[L2041]   COND TRUE   __exception
[L2042]               __tmp__Balance := Balance;
[L2043]               __tmp__DType := DType;
[L2044]               __tmp__Alloc := Alloc;
[L2045]               __tmp__balance_ADDR := balance_ADDR;
[L2046]               __tmp__M_Ref_bool := M_Ref_bool;
[L2047]               __tmp__sum := sum;
[L2048]               __tmp__M_Ref_int := M_Ref_int;
[L2049]               __tmp__sum__balances0 := sum__balances0;
[L2050]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]               __tmp__sum__allowed1 := sum__allowed1;
[L2053]               __tmp__M_int_Ref := M_int_Ref;
[L2054]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]               __tmp__Length := Length;
[L2057]               __tmp__now := now;
[L2058]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]               __tmp___paused_Pausable := _paused_Pausable;
[L2063]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]               __tmp__implementation_BLY := implementation_BLY;
[L2072]               __tmp__timelockList_BLY := timelockList_BLY;
[L2073]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]               __var_14 := null;
[L6589]   COND TRUE   !(spender_s711 != null)
[L6590]               revert := true;
[L2074]   RET         call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]               assume revert || gas < 0;
[L12062]  RET         call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L12199]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:45:39,904 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:39,904 INFO  L82        PathProgramCache]: Analyzing trace with hash -461413018, now seen corresponding path program 1 times
[2020-11-25 00:45:39,905 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:39,932 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:45:39,964 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:45:40,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:40,118 INFO  L82        PathProgramCache]: Analyzing trace with hash -1808991440, now seen corresponding path program 1 times
[2020-11-25 00:45:40,119 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:40,123 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:45:40,128 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:45:40,141 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:45:40,141 INFO  L82        PathProgramCache]: Analyzing trace with hash 3816597, now seen corresponding path program 1 times
[2020-11-25 00:45:40,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:45:40,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:45:40,209 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 883 to 1759
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 3137 to 6271
[2020-11-25 00:45:40,534 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification. DAG size of input: 127 DAG size of output: 121
[2020-11-25 00:45:40,701 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 7933 to 15859
[2020-11-25 00:45:41,429 WARN  L188               SmtUtils]: Spent 706.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 258
[2020-11-25 00:45:42,302 WARN  L188               SmtUtils]: Spent 869.00 ms on a formula simplification. DAG size of input: 358 DAG size of output: 317
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8713 to 17419
[2020-11-25 00:45:42,553 WARN  L188               SmtUtils]: Spent 217.00 ms on a formula simplification. DAG size of input: 189 DAG size of output: 183
[2020-11-25 00:45:42,842 WARN  L188               SmtUtils]: Spent 287.00 ms on a formula simplification that was a NOOP. DAG size: 438
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 22349 to 44687
[2020-11-25 00:45:43,591 WARN  L188               SmtUtils]: Spent 717.00 ms on a formula simplification. DAG size of input: 360 DAG size of output: 355
[2020-11-25 00:45:43,924 WARN  L188               SmtUtils]: Spent 330.00 ms on a formula simplification that was a NOOP. DAG size: 355
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #8: 17077 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17077 to 34147
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 00:45:44,145 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 194 DAG size of output: 194
[2020-11-25 00:45:44,157 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 00:45:45,028 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 232 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 00:45:46,825 WARN  L188               SmtUtils]: Spent 1.39 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 00:45:47,015 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 00:45:47,292 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 00:45:47,686 WARN  L188               SmtUtils]: Spent 332.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 00:45:47,957 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 00:45:48,195 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 00:45:48,757 WARN  L188               SmtUtils]: Spent 551.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 258
[2020-11-25 00:45:49,679 WARN  L188               SmtUtils]: Spent 919.00 ms on a formula simplification. DAG size of input: 357 DAG size of output: 317
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 00:45:49,886 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 189 DAG size of output: 183
[2020-11-25 00:45:50,215 WARN  L188               SmtUtils]: Spent 327.00 ms on a formula simplification that was a NOOP. DAG size: 438
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 00:45:50,607 WARN  L188               SmtUtils]: Spent 381.00 ms on a formula simplification that was a NOOP. DAG size: 355
[2020-11-25 00:45:54,904 WARN  L188               SmtUtils]: Spent 4.30 s on a formula simplification. DAG size of input: 697 DAG size of output: 692
Garbage collection #1: 269 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 269 to 523
Garbage collection #2: 523 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 523 to 1039
Garbage collection #3: 1039 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1039 to 2069
Garbage collection #4: 2069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2069 to 4133
Garbage collection #5: 4133 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4133 to 8263
Garbage collection #6: 8263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8263 to 16519
Garbage collection #7: 16519 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 16519 to 33037
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 00:45:56,127 WARN  L188               SmtUtils]: Spent 1.17 s on a formula simplification. DAG size of input: 322 DAG size of output: 322
[2020-11-25 00:45:57,248 WARN  L188               SmtUtils]: Spent 1.06 s on a formula simplification that was a NOOP. DAG size: 486
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7027 to 14051
[2020-11-25 00:45:58,500 WARN  L188               SmtUtils]: Spent 1.23 s on a formula simplification. DAG size of input: 360 DAG size of output: 347
[2020-11-25 00:46:00,151 WARN  L188               SmtUtils]: Spent 1.65 s on a formula simplification. DAG size of input: 513 DAG size of output: 512
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 22349 to 44687
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 22349 to 44687
Garbage collection #9: 44687 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 44687 to 89371
Garbage collection #10: 89371 nodes / 0 free / 0.003s / 0.006s total
Resizing node table from 89371 to 139369
Garbage collection #11: 139369 nodes / 0 free / 0.004s / 0.01s total
Resizing node table from 139369 to 189361
[2020-11-25 00:46:03,965 WARN  L188               SmtUtils]: Spent 3.74 s on a formula simplification. DAG size of input: 524 DAG size of output: 507
[2020-11-25 00:46:03,989 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:04,017 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:46:04,031 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:46:04 BasicIcfg
[2020-11-25 00:46:04,031 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 00:46:04,032 INFO  L168              Benchmark]: Toolchain (without parser) took 42648.56 ms. Allocated memory was 1.0 GB in the beginning and 3.5 GB in the end (delta: 2.5 GB). Free memory was 919.1 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,034 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,034 INFO  L168              Benchmark]: Boogie Preprocessor took 185.71 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,035 INFO  L168              Benchmark]: UtopiaSpecLang took 91.45 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,036 INFO  L168              Benchmark]: Boogie Printer took 30.16 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,037 INFO  L168              Benchmark]: RCFGBuilder took 1476.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 870.7 MB in the beginning and 768.6 MB in the end (delta: 102.1 MB). Peak memory consumption was 162.8 MB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,038 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.07 ms. Allocated memory is still 1.1 GB. Free memory was 768.6 MB in the beginning and 765.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,038 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3333.77 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 454.0 MB). Free memory was 765.3 MB in the beginning and 900.1 MB in the end (delta: -134.9 MB). Peak memory consumption was 366.5 MB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,039 INFO  L168              Benchmark]: BlockEncodingV2 took 280.96 ms. Allocated memory is still 1.5 GB. Free memory was 900.1 MB in the beginning and 746.6 MB in the end (delta: 153.5 MB). Peak memory consumption was 153.5 MB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,039 INFO  L168              Benchmark]: BuchiAutomizer took 37204.63 ms. Allocated memory was 1.5 GB in the beginning and 3.5 GB in the end (delta: 2.0 GB). Free memory was 746.6 MB in the beginning and 2.7 GB in the end (delta: -2.0 GB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
[2020-11-25 00:46:04,042 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11438 locations, 20724 edges
  - StatisticsResult: Encoded RCFG
    11296 locations, 20333 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 185.71 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 91.45 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 30.16 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1476.65 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 58.7 MB). Free memory was 870.7 MB in the beginning and 768.6 MB in the end (delta: 102.1 MB). Peak memory consumption was 162.8 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.07 ms. Allocated memory is still 1.1 GB. Free memory was 768.6 MB in the beginning and 765.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3333.77 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 454.0 MB). Free memory was 765.3 MB in the beginning and 900.1 MB in the end (delta: -134.9 MB). Peak memory consumption was 366.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 280.96 ms. Allocated memory is still 1.5 GB. Free memory was 900.1 MB in the beginning and 746.6 MB in the end (delta: 153.5 MB). Peak memory consumption was 153.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 37204.63 ms. Allocated memory was 1.5 GB in the beginning and 3.5 GB in the end (delta: 2.0 GB). Free memory was 746.6 MB in the beginning and 2.7 GB in the end (delta: -2.0 GB). Peak memory consumption was 1.8 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4607 locations, 6370 edges
  - StatisticsResult: BuchiProgram size
    11438 locations, 20724 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.9 modules have a trivial ranking function, the largest among these consists of 15 locations. The remainder module has 10419 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 37.1s and 10 iterations.  TraceHistogramMax:8. Analysis of lassos took 25.9s. Construction of modules took 6.9s. BÃ¼chi inclusion checks took 2.7s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 9 MinimizatonAttempts, 2374 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 10419 states and ocurred in iteration 9.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 76061 SDtfs, 32612 SDslu, 278061 SDs, 0 SdLazy, 95945 SolverSat, 5547 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.9s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000000028) = (new BLY)({from : 1000000000000000000000000001});
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7345]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7346]   COND FALSE  !(revert)
[L7349]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7189]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7189]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7190]   COND FALSE  !(revert)
[L7193]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7164]               assume msgsender_MSG != null;
[L7165]               Balance[this] := 0;
[L7166]               _name_ERC20Detailed[this] := -1412326813;
[L7167]               _symbol_ERC20Detailed[this] := -1412326813;
[L7168]               _decimals_ERC20Detailed[this] := 0;
[L7170]               _name_ERC20Detailed[this] := name_s1105;
[L7171]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7172]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7193]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7194]   COND FALSE  !(revert)
[L7349]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7350]   COND FALSE  !(revert)
[L7353]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7353]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7354]   COND FALSE  !(revert)
[L7357]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7357]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7358]   COND FALSE  !(revert)
[L7361]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7361]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7362]   COND FALSE  !(revert)
[L7365]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7365]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7366]   COND FALSE  !(revert)
[L7369]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L7021]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7022]   COND FALSE  !(revert)
[L7025]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6430]               assume msgsender_MSG != null;
[L6431]               Balance[this] := 0;
[L6445]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6446]   COND FALSE  !(revert)
[L6491]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6492]   COND FALSE  !(revert)
[L6495]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6467]               assume msgsender_MSG != null;
[L6468]               Balance[this] := 0;
[L6469]               _balances_HxERC20[this] := zeroRefintArr();
[L6470]               sum__balances0[this] := 0;
[L6471]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6472]               sum__allowed1[this] := 0;
[L6473]               _totalSupply_HxERC20[this] := 0;
[L6495]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6496]   COND FALSE  !(revert)
[L7025]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7026]   COND FALSE  !(revert)
[L7029]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L7029]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7030]   COND FALSE  !(revert)
[L7033]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L7033]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7034]   COND FALSE  !(revert)
[L7037]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6339]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6340]   COND FALSE  !(revert)
[L6343]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5836]               assume msgsender_MSG != null;
[L5837]               Balance[this] := 0;
[L5838]               owner_HxOwnable[this] := null;
[L5839]               newOwner_HxOwnable[this] := null;
[L5841]               owner_HxOwnable[this] := msgsender_MSG;
[L5842]               __var_6 := null;
[L5843]               newOwner_HxOwnable[this] := __var_6;
[L5858]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5859]   COND FALSE  !(revert)
[L6057]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6058]   COND FALSE  !(revert)
[L6061]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6007]               assume msgsender_MSG != null;
[L6008]               Balance[this] := 0;
[L6010]   CALL        call __var_10 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L6010]   RET         call __var_10 := FreshRefGenerator__success();
[L6011]   COND FALSE  !(revert)
[L6014]               _pausers_PauserRole[this] := __var_10;
[L6016]   COND TRUE   DType[this] == BLY
[L6017]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6277]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5738]               __var_1 := null;
[L5739]   COND FALSE  !(!(account_s164 != null))
[L5743]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5809]               __var_5 := null;
[L5810]   COND FALSE  !(!(account_s218 != null))
[L5814]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5743]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5744]   COND FALSE  !(revert)
[L5747]   COND FALSE  !(!!__var_2)
[L5751]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6277]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6278]   COND FALSE  !(revert)
[L6281]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6017]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6018]   COND FALSE  !(revert)
[L6061]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6062]   COND FALSE  !(revert)
[L6343]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6344]   COND FALSE  !(revert)
[L6347]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6314]               assume msgsender_MSG != null;
[L6315]               Balance[this] := 0;
[L6316]               _paused_Pausable[this] := false;
[L6318]               _paused_Pausable[this] := false;
[L6347]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6348]   COND FALSE  !(revert)
[L7037]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7038]   COND FALSE  !(revert)
[L7041]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6986]               assume msgsender_MSG != null;
[L6987]               Balance[this] := 0;
[L7041]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]   COND FALSE  !(revert)
[L7369]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7370]   COND FALSE  !(revert)
[L7373]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7274]               assume msgsender_MSG != null;
[L7275]               Balance[this] := 0;
[L7276]               implementation_BLY[this] := null;
[L7278]   CALL        call __var_36 := FreshRefGenerator__success();
[L5498]               havoc newRef;
[L5499]               assume Alloc[newRef] == false;
[L5500]               Alloc[newRef] := true;
[L5501]               assume newRef != null;
[L7278]   RET         call __var_36 := FreshRefGenerator__success();
[L7279]   COND FALSE  !(revert)
[L7282]               timelockList_BLY[this] := __var_36;
[L7284]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7285]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7288]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7289]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7290]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7292]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7293]   COND TRUE   DType[this] == BLY
[L7294]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6845]               __var_23 := null;
[L6846]   COND FALSE  !(!(account_s946 != null))
[L6850]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6850]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6851]   COND FALSE  !(revert)
[L6854]               _totalSupply_HxERC20[this] := __var_24;
[L6855]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5653]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5654]   COND FALSE  !(!(c_s106 >= a_s106))
[L5658]               __ret_0_ := c_s106;
[L6855]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6856]   COND FALSE  !(revert)
[L6859]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6860]               _balances_HxERC20[this][account_s946] := __var_25;
[L6861]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6862]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7294]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7295]   COND FALSE  !(revert)
[L7373]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7374]   COND FALSE  !(revert)
[L3053]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12195]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
HxERC20(1000000000000000000000000028).approve~address~uint256.gas(3979002)({from : 1000000000000000000000000012, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                 call_approve_HxERC200 := true;
[L3]                 call_approve_HxERC200 := false;
[L3]                 revert := revert_hold;
[L2039]              havoc __exception;
[L2040]              revert := false;
[L2041]   COND TRUE  __exception
[L2042]              __tmp__Balance := Balance;
[L2043]              __tmp__DType := DType;
[L2044]              __tmp__Alloc := Alloc;
[L2045]              __tmp__balance_ADDR := balance_ADDR;
[L2046]              __tmp__M_Ref_bool := M_Ref_bool;
[L2047]              __tmp__sum := sum;
[L2048]              __tmp__M_Ref_int := M_Ref_int;
[L2049]              __tmp__sum__balances0 := sum__balances0;
[L2050]              __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]              __tmp__sum__allowed1 := sum__allowed1;
[L2053]              __tmp__M_int_Ref := M_int_Ref;
[L2054]              __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]              __tmp__Length := Length;
[L2057]              __tmp__now := now;
[L2058]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]              __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]              __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]              __tmp___paused_Pausable := _paused_Pausable;
[L2063]              __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]              __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]              __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]              __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]              __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]              __tmp__implementation_BLY := implementation_BLY;
[L2072]              __tmp__timelockList_BLY := timelockList_BLY;
[L2073]              __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL       call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]              __var_14 := null;
[L6589]   COND TRUE  !(spender_s711 != null)
[L6590]              revert := true;
[L2074]   RET        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]              assume revert || gas < 0;
[L12062]  RET        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);

Loop:
HxERC20(1000000000000000000000000028).approve~address~uint256.gas(3979001)({from : 1000000000000000000000000017, spender : 0, value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s711;
[L3]                 call_approve_HxERC200 := true;
[L3]                 call_approve_HxERC200 := false;
[L3]                 revert := revert_hold;
[L2039]              havoc __exception;
[L2040]              revert := false;
[L2041]   COND TRUE  __exception
[L2042]              __tmp__Balance := Balance;
[L2043]              __tmp__DType := DType;
[L2044]              __tmp__Alloc := Alloc;
[L2045]              __tmp__balance_ADDR := balance_ADDR;
[L2046]              __tmp__M_Ref_bool := M_Ref_bool;
[L2047]              __tmp__sum := sum;
[L2048]              __tmp__M_Ref_int := M_Ref_int;
[L2049]              __tmp__sum__balances0 := sum__balances0;
[L2050]              __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L2051]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2052]              __tmp__sum__allowed1 := sum__allowed1;
[L2053]              __tmp__M_int_Ref := M_int_Ref;
[L2054]              __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L2055]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L2056]              __tmp__Length := Length;
[L2057]              __tmp__now := now;
[L2058]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2059]              __tmp__owner_HxOwnable := owner_HxOwnable;
[L2060]              __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L2061]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2062]              __tmp___paused_Pausable := _paused_Pausable;
[L2063]              __tmp___balances_HxERC20 := _balances_HxERC20;
[L2064]              __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L2065]              __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L2066]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2067]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2068]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2069]              __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L2070]              __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L2071]              __tmp__implementation_BLY := implementation_BLY;
[L2072]              __tmp__timelockList_BLY := timelockList_BLY;
[L2073]              __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L2074]   CALL       call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L6588]              __var_14 := null;
[L6589]   COND TRUE  !(spender_s711 != null)
[L6590]              revert := true;
[L2074]   RET        call __ret_0_ := approve~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);
[L2075]              assume revert || gas < 0;
[L12062]  RET        call __ret_0_approve := approve~address~uint256_HxERC20(this, msgsender_MSG, msgvalue_MSG, spender_s711, value_s711);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
