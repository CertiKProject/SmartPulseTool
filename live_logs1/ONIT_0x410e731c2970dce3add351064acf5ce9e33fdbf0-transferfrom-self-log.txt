This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:54:03,918 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:54:03,919 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:54:03,930 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:54:03,930 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:54:03,932 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:54:03,933 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:54:03,934 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:54:03,936 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:54:03,936 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:54:03,937 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:54:03,938 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:54:03,939 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:54:03,940 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:54:03,941 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:54:03,941 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:54:03,942 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:54:03,944 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:54:03,945 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:54:03,947 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:54:03,948 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:54:03,949 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:54:03,951 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:54:03,951 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:54:03,951 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:54:03,952 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:54:03,952 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:54:03,953 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:54:03,953 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:54:03,953 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:54:03,954 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:54:03,954 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:54:03,955 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:54:03,955 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:54:03,956 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:54:03,956 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:54:03,957 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:54:03,957 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:54:03,957 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:54:03,958 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:54:03,958 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:54:03,959 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:54:03,966 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:54:03,967 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:54:03,968 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:54:03,968 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:54:03,968 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:54:03,968 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:54:03,968 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:54:03,968 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:54:03,968 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:54:03,969 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:54:03,969 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:54:03,969 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:54:03,969 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:54:03,969 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:54:03,969 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:54:03,969 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:54:03,969 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:54:03,970 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:54:03,970 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:54:03,970 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:54:03,970 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:54:03,970 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:54:03,970 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:54:03,970 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:54:03,970 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:54:03,971 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:54:03,994 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:54:04,007 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:54:04,010 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:54:04,011 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:54:04,012 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:54:04,012 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl
[2020-11-25 02:54:04,013 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl'
[2020-11-25 02:54:04,144 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:54:04,145 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:54:04,146 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:54:04,146 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:54:04,146 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:54:04,163 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,164 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,214 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,215 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,260 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,285 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,301 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,323 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:54:04,324 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:54:04,324 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:54:04,326 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:54:04,330 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/1) ...
[2020-11-25 02:54:04,359 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ONIT.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:54:04,364 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ONIT.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:54:04,373 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ONIT.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:54:04,386 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s1322 || p2!=msg.sender ) && from_s1322==to_s1322 ) && value_s1322<=_balances_ERC20[this][from_s1322] ) && value_s1322<=_allowed_ERC20[this][from_s1322][msg.sender] ) && value_s1322>=0 ) && value_s1322<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1322]>=0 ) && _balances_ERC20[this][to_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s1322]>=0 ) && _balances_ERC20[this][from_s1322]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][from_s1322][msg.sender]>=0 ) && _allowed_ERC20[this][from_s1322][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[to_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:54:04,390 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowed_ERC20[this][from_s1322][msg.sender]==( ( old(_allowed_ERC20[this][from_s1322][msg.sender]) ) - value_s1322 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this][p1][p2]==( old(_allowed_ERC20[this][p1][p2]) ) ) && implementation_ONIT[this]==( old(implementation_ONIT[this]) ) ) && M_Ref_Ref[timelockList_ONIT[this]]==( old(M_Ref_Ref[timelockList_ONIT[this]]) ) ) && frozenAccount_ONIT[this]==( old(frozenAccount_ONIT[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && newOwner_Ownable[this]==( old(newOwner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ONIT>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[from_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]],IdentifierExpression[value_s1322,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_ONIT,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ONIT>]]]]]]
[2020-11-25 02:54:04,398 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ONIT.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ONIT.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && implementation_ONIT[this] == old(implementation_ONIT[this]) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]]) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && newOwner_Ownable[this] == old(newOwner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 02:54:04,399 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ONIT0) ==> ( <>AP(success_transferFrom_ONIT0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:54:04,423 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:54:04 PropertyContainer
[2020-11-25 02:54:04,424 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:54:04,424 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:54:04,424 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:54:04,424 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:54:04,425 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/2) ...
[2020-11-25 02:54:04,425 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:54:04,426 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:54:04,454 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:54:04" (2/2) ...
[2020-11-25 02:54:04,455 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:54:04,455 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:54:04,455 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:54:04,455 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:54:04,456 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/2) ...
[2020-11-25 02:54:04,516 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 02:54:04,517 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,517 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:54:04,518 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 02:54:04,518 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 02:54:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 02:54:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 02:54:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 02:54:04,519 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:54:04,520 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 02:54:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 02:54:04,520 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable
[2020-11-25 02:54:04,520 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable
[2020-11-25 02:54:04,521 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 02:54:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 02:54:04,521 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable
[2020-11-25 02:54:04,521 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable
[2020-11-25 02:54:04,521 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 02:54:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 02:54:04,522 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable
[2020-11-25 02:54:04,522 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable
[2020-11-25 02:54:04,522 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:54:04,522 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 02:54:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 02:54:04,523 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 02:54:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 02:54:04,523 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 02:54:04,523 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 02:54:04,524 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 02:54:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 02:54:04,524 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 02:54:04,524 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 02:54:04,524 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:54:04,525 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:54:04,525 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:54:04,525 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 02:54:04,525 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 02:54:04,525 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 02:54:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 02:54:04,526 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 02:54:04,526 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 02:54:04,526 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 02:54:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 02:54:04,527 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:54:04,527 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 02:54:04,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 02:54:04,527 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 02:54:04,528 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 02:54:04,528 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 02:54:04,528 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 02:54:04,528 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 02:54:04,528 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 02:54:04,529 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:54:04,529 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 02:54:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 02:54:04,529 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 02:54:04,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 02:54:04,529 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 02:54:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 02:54:04,530 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 02:54:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 02:54:04,530 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 02:54:04,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 02:54:04,531 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 02:54:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 02:54:04,531 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:54:04,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 02:54:04,532 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:54:04,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 02:54:04,532 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:54:04,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 02:54:04,532 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:54:04,533 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:54:04,533 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:54:04,533 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:54:04,533 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:54:04,533 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:54:04,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 02:54:04,534 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:54:04,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 02:54:04,534 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:54:04,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 02:54:04,534 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:54:04,535 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:54:04,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 02:54:04,535 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 02:54:04,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 02:54:04,535 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 02:54:04,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 02:54:04,536 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 02:54:04,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 02:54:04,536 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:54:04,536 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT
[2020-11-25 02:54:04,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT
[2020-11-25 02:54:04,536 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT
[2020-11-25 02:54:04,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT
[2020-11-25 02:54:04,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT
[2020-11-25 02:54:04,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT
[2020-11-25 02:54:04,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:54:04,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT
[2020-11-25 02:54:04,537 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT
[2020-11-25 02:54:04,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT
[2020-11-25 02:54:04,537 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:54:04,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT
[2020-11-25 02:54:04,537 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:54:04,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT
[2020-11-25 02:54:04,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:54:04,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT
[2020-11-25 02:54:04,538 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT
[2020-11-25 02:54:04,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT
[2020-11-25 02:54:04,538 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT
[2020-11-25 02:54:04,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT
[2020-11-25 02:54:04,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:54:04,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:54:04,538 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:54:04,538 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT
[2020-11-25 02:54:04,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT
[2020-11-25 02:54:04,539 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:54:04,539 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__success
[2020-11-25 02:54:04,539 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT
[2020-11-25 02:54:04,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT
[2020-11-25 02:54:04,539 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:54:04,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT
[2020-11-25 02:54:04,539 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT
[2020-11-25 02:54:04,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 02:54:04,540 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 02:54:04,541 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ONIT
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:54:04,542 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,543 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__success
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_Ownable__fail
[2020-11-25 02:54:04,544 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__success
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__success
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Ownable__fail
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 02:54:04,545 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 02:54:04,546 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 02:54:04,547 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:54:04,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:54:04,549 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 02:54:04,550 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__success
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure ONIT_ONIT__fail
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__success
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:54:04,551 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:54:04,552 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__success
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~uint256_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__success
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:54:04,553 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 02:54:04,554 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 02:54:04,554 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__fail
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT.LockInfo_ctor__success
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,555 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 02:54:04,556 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__fail
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_Ownable__success
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 02:54:04,557 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__fail
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Ownable__success
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__fail
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Ownable__success
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 02:54:04,558 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 02:54:04,559 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 02:54:04,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 02:54:04,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 02:54:04,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 02:54:04,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__fail
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT_NoBaseCtor__success
[2020-11-25 02:54:04,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__fail
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure ONIT_ONIT__success
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__fail
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ONIT__success
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__fail
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ONIT__success
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__fail
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ONIT__success
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__fail
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_ONIT__success
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__fail
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_ONIT__success
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:54:04,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_ONIT__success
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__fail
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_ONIT__success
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__fail
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_ONIT__success
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__fail
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_ONIT__success
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__fail
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_ONIT__success
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__fail
[2020-11-25 02:54:04,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_ONIT__success
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__fail
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~uint256_ONIT__success
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__fail
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_ONIT__success
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__fail
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ONIT__success
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__fail
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_ONIT__success
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__fail
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_ONIT__success
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__fail
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_ONIT__success
[2020-11-25 02:54:04,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 02:54:04,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 02:54:04,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ONIT
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:54:04,570 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:54:04,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:54:05,267 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:54:05,267 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:54:05,267 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:54:05,505 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:54:05,686 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:54:05,687 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 02:54:05,689 INFO  L202        PluginConnector]: Adding new model ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:54:05 BoogieIcfgContainer
[2020-11-25 02:54:05,689 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:54:04" (2/2) ...
[2020-11-25 02:54:05,689 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:54:05,690 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@14bdc5a1 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:54:05, skipping insertion in model container
[2020-11-25 02:54:05,690 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:54:05,690 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:54:05,690 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:54:05,691 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:54:05,691 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/3) ...
[2020-11-25 02:54:05,691 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@dfd6827 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:54:05, skipping insertion in model container
[2020-11-25 02:54:05,691 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:54:04" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:54:05,723 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:54:05 NWAContainer
[2020-11-25 02:54:05,723 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:54:05,723 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:54:05,723 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:54:05,723 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:54:05,724 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:54:05" (3/4) ...
[2020-11-25 02:54:05,725 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@26e9436 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:54:05, skipping insertion in model container
[2020-11-25 02:54:05,725 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:54:05" (4/4) ...
[2020-11-25 02:54:05,727 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:54:05,733 INFO  L110   BuchiProductObserver]: Initial RCFG 4670 locations, 6457 edges
[2020-11-25 02:54:05,733 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:54:05,746 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:54:09,146 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:54:09,159 INFO  L110   BuchiProductObserver]: BuchiProgram size 11596 locations, 21005 edges
[2020-11-25 02:54:09,160 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:54:09 BoogieIcfgContainer
[2020-11-25 02:54:09,160 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:54:09,160 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:54:09,160 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:54:09,161 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:54:09,162 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:54:09" (1/1) ...
[2020-11-25 02:54:09,332 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:54:09,333 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowed_ERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 02:54:09,358 INFO  L313           BlockEncoder]: Initial Icfg 11596 locations, 21005 edges
[2020-11-25 02:54:09,358 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:54:09,358 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:54:09,358 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:54:09,359 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:54:09,379 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 23 locations because of local infeasibility
[2020-11-25 02:54:09,397 INFO  L70        RemoveSinkStates]: Removed 104 edges and 69 locations by removing sink states
[2020-11-25 02:54:09,418 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:54:09,425 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:54:09,431 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:54:09,432 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:54:09,437 INFO  L313           BlockEncoder]: Encoded RCFG 11450 locations, 20602 edges
[2020-11-25 02:54:09,437 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:54:09 BasicIcfg
[2020-11-25 02:54:09,437 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:54:09,437 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:54:09,437 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:54:09,439 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:54:09,439 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:54:09,439 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:54:04" (1/6) ...
[2020-11-25 02:54:09,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e4fe6c3 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:54:09, skipping insertion in model container
[2020-11-25 02:54:09,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:54:09,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:54:04" (2/6) ...
[2020-11-25 02:54:09,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e4fe6c3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:54:09, skipping insertion in model container
[2020-11-25 02:54:09,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:54:09,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:54:05" (3/6) ...
[2020-11-25 02:54:09,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e4fe6c3 and model type ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:54:09, skipping insertion in model container
[2020-11-25 02:54:09,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:54:09,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:54:05" (4/6) ...
[2020-11-25 02:54:09,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e4fe6c3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:54:09, skipping insertion in model container
[2020-11-25 02:54:09,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:54:09,442 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:54:09" (5/6) ...
[2020-11-25 02:54:09,442 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e4fe6c3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:54:09, skipping insertion in model container
[2020-11-25 02:54:09,442 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:54:09,442 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:54:09" (6/6) ...
[2020-11-25 02:54:09,443 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ONIT_0x410e731c2970dce3add351064acf5ce9e33fdbf0_transferfrom-self.bpl_BEv2
[2020-11-25 02:54:09,474 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:54:09,474 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:54:09,474 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:54:09,474 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:54:09,474 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:54:09,474 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:54:09,474 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:54:09,474 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:54:09,474 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:54:09,576 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11450 states.
[2020-11-25 02:54:09,674 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:09,675 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:09,675 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:09,682 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:09,682 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:09,683 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:54:09,683 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11450 states.
[2020-11-25 02:54:09,731 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:09,731 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:09,731 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:09,733 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:09,733 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND TRUE   choice == 33
[L12132]              gas := gas - 21000;
[L12133]  COND FALSE  !(gas >= 0)
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:09,749 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:09,749 INFO  L82        PathProgramCache]: Analyzing trace with hash 311789298, now seen corresponding path program 1 times
[2020-11-25 02:54:09,755 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:09,785 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:09,828 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:54:09,830 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:09,830 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:54:10,290 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:10,298 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:54:10,298 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:54:10,299 INFO  L87              Difference]: Start difference. First operand 11450 states. Second operand 4 states.
[2020-11-25 02:54:11,445 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:11,445 INFO  L93              Difference]: Finished difference Result 7354 states and 8608 transitions.
[2020-11-25 02:54:11,445 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:54:11,446 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7354 states and 8608 transitions.
[2020-11-25 02:54:11,479 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:11,521 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7354 states to 7354 states and 8608 transitions.
[2020-11-25 02:54:11,521 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 02:54:11,524 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1363
[2020-11-25 02:54:11,525 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7354 states and 8608 transitions.
[2020-11-25 02:54:11,540 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:11,540 INFO  L728         BuchiCegarLoop]: Abstraction has 7354 states and 8608 transitions.
[2020-11-25 02:54:11,561 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7354 states and 8608 transitions.
[2020-11-25 02:54:11,652 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7354 to 7354.
[2020-11-25 02:54:11,652 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7354 states.
[2020-11-25 02:54:11,665 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7354 states to 7354 states and 8608 transitions.
[2020-11-25 02:54:11,666 INFO  L751         BuchiCegarLoop]: Abstraction has 7354 states and 8608 transitions.
[2020-11-25 02:54:11,666 INFO  L631         BuchiCegarLoop]: Abstraction has 7354 states and 8608 transitions.
[2020-11-25 02:54:11,666 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:54:11,666 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7354 states and 8608 transitions.
[2020-11-25 02:54:11,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:11,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:11,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:11,680 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:11,680 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND FALSE  !(!!frozenAccount_ONIT[this][_holder_s1185])
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:11,685 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:11,685 INFO  L82        PathProgramCache]: Analyzing trace with hash -340671243, now seen corresponding path program 1 times
[2020-11-25 02:54:11,686 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:11,698 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:11,728 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:54:11,728 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:11,728 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:54:11,730 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:11,730 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:54:11,730 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:54:11,730 INFO  L87              Difference]: Start difference. First operand 7354 states and 8608 transitions. cyclomatic complexity: 1264 Second operand 3 states.
[2020-11-25 02:54:11,953 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:11,953 INFO  L93              Difference]: Finished difference Result 9380 states and 10961 transitions.
[2020-11-25 02:54:11,953 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:54:11,953 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9380 states and 10961 transitions.
[2020-11-25 02:54:11,981 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:54:12,027 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9380 states to 9380 states and 10961 transitions.
[2020-11-25 02:54:12,027 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1907
[2020-11-25 02:54:12,029 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1907
[2020-11-25 02:54:12,029 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9380 states and 10961 transitions.
[2020-11-25 02:54:12,039 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:12,039 INFO  L728         BuchiCegarLoop]: Abstraction has 9380 states and 10961 transitions.
[2020-11-25 02:54:12,048 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9380 states and 10961 transitions.
[2020-11-25 02:54:12,141 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9380 to 8184.
[2020-11-25 02:54:12,141 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8184 states.
[2020-11-25 02:54:12,153 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8184 states to 8184 states and 9515 transitions.
[2020-11-25 02:54:12,153 INFO  L751         BuchiCegarLoop]: Abstraction has 8184 states and 9515 transitions.
[2020-11-25 02:54:12,153 INFO  L631         BuchiCegarLoop]: Abstraction has 8184 states and 9515 transitions.
[2020-11-25 02:54:12,154 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:54:12,154 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8184 states and 9515 transitions.
[2020-11-25 02:54:12,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:12,165 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:12,165 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:12,167 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:12,167 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND TRUE   !(account_s164 != null)
[L5839]               revert := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:12,172 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:12,172 INFO  L82        PathProgramCache]: Analyzing trace with hash -1954985475, now seen corresponding path program 1 times
[2020-11-25 02:54:12,173 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:12,185 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:12,276 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:54:12,276 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:54:12,276 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 02:54:12,277 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:12,277 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:54:12,277 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:54:12,277 INFO  L87              Difference]: Start difference. First operand 8184 states and 9515 transitions. cyclomatic complexity: 1341 Second operand 9 states.
[2020-11-25 02:54:12,429 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:12,429 INFO  L93              Difference]: Finished difference Result 8230 states and 9590 transitions.
[2020-11-25 02:54:12,429 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:54:12,429 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8230 states and 9590 transitions.
[2020-11-25 02:54:12,448 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:12,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8230 states to 8230 states and 9590 transitions.
[2020-11-25 02:54:12,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1592
[2020-11-25 02:54:12,475 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1592
[2020-11-25 02:54:12,475 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8230 states and 9590 transitions.
[2020-11-25 02:54:12,483 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:12,483 INFO  L728         BuchiCegarLoop]: Abstraction has 8230 states and 9590 transitions.
[2020-11-25 02:54:12,491 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8230 states and 9590 transitions.
[2020-11-25 02:54:12,558 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8230 to 8221.
[2020-11-25 02:54:12,558 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8221 states.
[2020-11-25 02:54:12,568 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8221 states to 8221 states and 9574 transitions.
[2020-11-25 02:54:12,568 INFO  L751         BuchiCegarLoop]: Abstraction has 8221 states and 9574 transitions.
[2020-11-25 02:54:12,568 INFO  L631         BuchiCegarLoop]: Abstraction has 8221 states and 9574 transitions.
[2020-11-25 02:54:12,568 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:54:12,568 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8221 states and 9574 transitions.
[2020-11-25 02:54:12,578 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:12,578 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:12,578 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:12,581 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:12,581 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND TRUE   !(account_s218 != null)
[L5910]               revert := true;
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND TRUE   revert
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:12,585 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:12,585 INFO  L82        PathProgramCache]: Analyzing trace with hash -1590650457, now seen corresponding path program 1 times
[2020-11-25 02:54:12,586 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:12,595 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:12,646 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 02:54:12,647 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:54:12,647 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 02:54:12,647 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:12,647 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 02:54:12,647 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 02:54:12,647 INFO  L87              Difference]: Start difference. First operand 8221 states and 9574 transitions. cyclomatic complexity: 1363 Second operand 10 states.
[2020-11-25 02:54:12,758 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:12,758 INFO  L93              Difference]: Finished difference Result 8281 states and 9665 transitions.
[2020-11-25 02:54:12,759 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:54:12,759 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8281 states and 9665 transitions.
[2020-11-25 02:54:12,774 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:12,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8281 states to 8281 states and 9665 transitions.
[2020-11-25 02:54:12,792 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1599
[2020-11-25 02:54:12,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1599
[2020-11-25 02:54:12,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8281 states and 9665 transitions.
[2020-11-25 02:54:12,799 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:12,799 INFO  L728         BuchiCegarLoop]: Abstraction has 8281 states and 9665 transitions.
[2020-11-25 02:54:12,806 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8281 states and 9665 transitions.
[2020-11-25 02:54:12,859 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8281 to 8228.
[2020-11-25 02:54:12,860 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8228 states.
[2020-11-25 02:54:12,869 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8228 states to 8228 states and 9582 transitions.
[2020-11-25 02:54:12,869 INFO  L751         BuchiCegarLoop]: Abstraction has 8228 states and 9582 transitions.
[2020-11-25 02:54:12,869 INFO  L631         BuchiCegarLoop]: Abstraction has 8228 states and 9582 transitions.
[2020-11-25 02:54:12,869 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:54:12,869 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8228 states and 9582 transitions.
[2020-11-25 02:54:12,878 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:12,878 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:12,878 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:12,879 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:12,880 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND TRUE   !!__var_2
[L5847]               revert := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND TRUE   revert
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND TRUE   revert
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND TRUE   revert
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND TRUE   revert
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND FALSE  !(__exception)
[L3309]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7729]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10932]  COND TRUE   !!frozenAccount_ONIT[this][_holder_s1185]
[L10933]              revert := true;
[L7729]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7730]   COND TRUE   revert
[L3309]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3310]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !((((((((((((((__ret_0_ == true && _allowed_ERC20[this][from_s1322][msgsender_MSG] == old(_allowed_ERC20[this][from_s1322][msgsender_MSG]) - value_s1322) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && implementation_ONIT[this] == old(implementation_ONIT[this])) && M_Ref_Ref[timelockList_ONIT[this]] == old(M_Ref_Ref[timelockList_ONIT[this]])) && frozenAccount_ONIT[this] == old(frozenAccount_ONIT[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && newOwner_Ownable[this] == old(newOwner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:12,883 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:12,884 INFO  L82        PathProgramCache]: Analyzing trace with hash -1642535324, now seen corresponding path program 1 times
[2020-11-25 02:54:12,884 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:12,894 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:12,929 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 02:54:12,929 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:12,929 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 02:54:12,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:12,930 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 02:54:12,930 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 02:54:12,930 INFO  L87              Difference]: Start difference. First operand 8228 states and 9582 transitions. cyclomatic complexity: 1364 Second operand 3 states.
[2020-11-25 02:54:13,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:13,041 INFO  L93              Difference]: Finished difference Result 9400 states and 10635 transitions.
[2020-11-25 02:54:13,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 02:54:13,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9400 states and 10635 transitions.
[2020-11-25 02:54:13,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 02:54:13,078 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9400 states to 8706 states and 9813 transitions.
[2020-11-25 02:54:13,078 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1698
[2020-11-25 02:54:13,079 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1784
[2020-11-25 02:54:13,079 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8706 states and 9813 transitions.
[2020-11-25 02:54:13,084 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:13,085 INFO  L728         BuchiCegarLoop]: Abstraction has 8706 states and 9813 transitions.
[2020-11-25 02:54:13,090 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8706 states and 9813 transitions.
[2020-11-25 02:54:13,129 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8706 to 7686.
[2020-11-25 02:54:13,129 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7686 states.
[2020-11-25 02:54:13,138 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7686 states to 7686 states and 8543 transitions.
[2020-11-25 02:54:13,138 INFO  L751         BuchiCegarLoop]: Abstraction has 7686 states and 8543 transitions.
[2020-11-25 02:54:13,138 INFO  L631         BuchiCegarLoop]: Abstraction has 7686 states and 8543 transitions.
[2020-11-25 02:54:13,138 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:54:13,138 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7686 states and 8543 transitions.
[2020-11-25 02:54:13,147 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:13,147 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:13,148 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:13,151 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:13,151 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:13,157 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:13,157 INFO  L82        PathProgramCache]: Analyzing trace with hash 1205084048, now seen corresponding path program 1 times
[2020-11-25 02:54:13,158 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:13,175 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:13,369 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 33 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 02:54:13,369 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:54:13,369 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 02:54:13,370 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:13,370 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 02:54:13,370 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 02:54:13,370 INFO  L87              Difference]: Start difference. First operand 7686 states and 8543 transitions. cyclomatic complexity: 867 Second operand 7 states.
[2020-11-25 02:54:13,497 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:13,497 INFO  L93              Difference]: Finished difference Result 7709 states and 8570 transitions.
[2020-11-25 02:54:13,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:54:13,498 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7709 states and 8570 transitions.
[2020-11-25 02:54:13,511 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:13,526 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7709 states to 7692 states and 8550 transitions.
[2020-11-25 02:54:13,526 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1542
[2020-11-25 02:54:13,527 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1542
[2020-11-25 02:54:13,527 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7692 states and 8550 transitions.
[2020-11-25 02:54:13,531 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:13,531 INFO  L728         BuchiCegarLoop]: Abstraction has 7692 states and 8550 transitions.
[2020-11-25 02:54:13,537 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7692 states and 8550 transitions.
[2020-11-25 02:54:13,574 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7692 to 7692.
[2020-11-25 02:54:13,575 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7692 states.
[2020-11-25 02:54:13,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7692 states to 7692 states and 8550 transitions.
[2020-11-25 02:54:13,582 INFO  L751         BuchiCegarLoop]: Abstraction has 7692 states and 8550 transitions.
[2020-11-25 02:54:13,582 INFO  L631         BuchiCegarLoop]: Abstraction has 7692 states and 8550 transitions.
[2020-11-25 02:54:13,582 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 02:54:13,582 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7692 states and 8550 transitions.
[2020-11-25 02:54:13,589 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:13,590 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:13,590 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:13,592 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:13,592 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:13,597 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:13,597 INFO  L82        PathProgramCache]: Analyzing trace with hash -1795805199, now seen corresponding path program 1 times
[2020-11-25 02:54:13,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:13,613 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:13,790 INFO  L134       CoverageAnalysis]: Checked inductivity of 924 backedges. 6 proven. 29 refuted. 0 times theorem prover too weak. 889 trivial. 0 not checked.
[2020-11-25 02:54:13,790 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:54:13,790 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:54:13,791 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:13,791 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:54:13,791 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:54:13,791 INFO  L87              Difference]: Start difference. First operand 7692 states and 8550 transitions. cyclomatic complexity: 868 Second operand 8 states.
[2020-11-25 02:54:13,926 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:13,926 INFO  L93              Difference]: Finished difference Result 7713 states and 8574 transitions.
[2020-11-25 02:54:13,926 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:54:13,926 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7713 states and 8574 transitions.
[2020-11-25 02:54:13,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:13,954 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7713 states to 7699 states and 8558 transitions.
[2020-11-25 02:54:13,954 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1542
[2020-11-25 02:54:13,954 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1542
[2020-11-25 02:54:13,955 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7699 states and 8558 transitions.
[2020-11-25 02:54:13,958 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:13,958 INFO  L728         BuchiCegarLoop]: Abstraction has 7699 states and 8558 transitions.
[2020-11-25 02:54:13,964 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7699 states and 8558 transitions.
[2020-11-25 02:54:14,000 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7699 to 7699.
[2020-11-25 02:54:14,001 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7699 states.
[2020-11-25 02:54:14,008 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7699 states to 7699 states and 8558 transitions.
[2020-11-25 02:54:14,008 INFO  L751         BuchiCegarLoop]: Abstraction has 7699 states and 8558 transitions.
[2020-11-25 02:54:14,008 INFO  L631         BuchiCegarLoop]: Abstraction has 7699 states and 8558 transitions.
[2020-11-25 02:54:14,008 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 02:54:14,008 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7699 states and 8558 transitions.
[2020-11-25 02:54:14,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:14,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:14,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:14,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:14,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:14,024 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:14,024 INFO  L82        PathProgramCache]: Analyzing trace with hash -1816269760, now seen corresponding path program 1 times
[2020-11-25 02:54:14,025 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:14,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:14,246 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 02:54:14,246 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:54:14,247 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:54:14,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:14,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:54:14,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:54:14,250 INFO  L87              Difference]: Start difference. First operand 7699 states and 8558 transitions. cyclomatic complexity: 869 Second operand 8 states.
[2020-11-25 02:54:14,433 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:14,433 INFO  L93              Difference]: Finished difference Result 7726 states and 8589 transitions.
[2020-11-25 02:54:14,433 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:54:14,433 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7726 states and 8589 transitions.
[2020-11-25 02:54:14,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:14,460 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7726 states to 7705 states and 8564 transitions.
[2020-11-25 02:54:14,460 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1542
[2020-11-25 02:54:14,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1542
[2020-11-25 02:54:14,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7705 states and 8564 transitions.
[2020-11-25 02:54:14,464 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:14,465 INFO  L728         BuchiCegarLoop]: Abstraction has 7705 states and 8564 transitions.
[2020-11-25 02:54:14,471 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7705 states and 8564 transitions.
[2020-11-25 02:54:14,509 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7705 to 7705.
[2020-11-25 02:54:14,509 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7705 states.
[2020-11-25 02:54:14,517 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7705 states to 7705 states and 8564 transitions.
[2020-11-25 02:54:14,517 INFO  L751         BuchiCegarLoop]: Abstraction has 7705 states and 8564 transitions.
[2020-11-25 02:54:14,517 INFO  L631         BuchiCegarLoop]: Abstraction has 7705 states and 8564 transitions.
[2020-11-25 02:54:14,517 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 02:54:14,517 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7705 states and 8564 transitions.
[2020-11-25 02:54:14,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:54:14,525 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:14,525 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:14,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:14,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6087]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6092]   COND TRUE   __tmp__DType[this] == PauserRole
[L6093]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6093]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6094]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND FALSE  !(revert)
[L7416]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6087]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6092]   COND TRUE   __tmp__DType[this] == PauserRole
[L6093]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6093]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6094]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7416]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7417]   COND FALSE  !(revert)
[L7420]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7092]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7096]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7100]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7104]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6087]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6092]   COND TRUE   __tmp__DType[this] == PauserRole
[L6093]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6093]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6094]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7104]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7105]   COND FALSE  !(revert)
[L7108]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L6082]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6087]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L6092]   COND TRUE   __tmp__DType[this] == PauserRole
[L6093]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6093]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6094]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7108]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7077]               assume msgsender_MSG != null;
[L7078]               __tmp__Balance[this] := 0;
[L7112]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7420]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7421]   COND FALSE  !(revert)
[L7424]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]               assume msgsender_MSG != null;
[L7340]               __tmp__Balance[this] := 0;
[L7341]               __tmp__implementation_ONIT[this] := null;
[L7343]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7343]   RET         call __var_36 := FreshRefGenerator__fail();
[L7344]   COND FALSE  !(revert)
[L7347]               __tmp__timelockList_ONIT[this] := __var_36;
[L7349]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7350]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7352]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7353]   COND TRUE   __tmp__DType[this] == ONIT
[L7354]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6920]               __var_23 := null;
[L6921]   COND FALSE  !(!(account_s946 != null))
[L6925]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6925]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6926]   COND FALSE  !(revert)
[L6929]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6930]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6930]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6931]   COND FALSE  !(revert)
[L6934]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6935]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6936]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7354]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7355]   COND FALSE  !(revert)
[L7424]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7425]   COND FALSE  !(revert)
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:14,533 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:14,533 INFO  L82        PathProgramCache]: Analyzing trace with hash 1494714713, now seen corresponding path program 1 times
[2020-11-25 02:54:14,534 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:14,547 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:14,736 INFO  L134       CoverageAnalysis]: Checked inductivity of 912 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 876 trivial. 0 not checked.
[2020-11-25 02:54:14,736 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:54:14,736 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:54:14,737 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:14,737 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:54:14,737 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:54:14,737 INFO  L87              Difference]: Start difference. First operand 7705 states and 8564 transitions. cyclomatic complexity: 869 Second operand 8 states.
[2020-11-25 02:54:16,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:16,213 INFO  L93              Difference]: Finished difference Result 10722 states and 12091 transitions.
[2020-11-25 02:54:16,213 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:54:16,213 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10722 states and 12091 transitions.
[2020-11-25 02:54:16,235 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:54:16,256 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10722 states to 10705 states and 12071 transitions.
[2020-11-25 02:54:16,256 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2153
[2020-11-25 02:54:16,257 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2153
[2020-11-25 02:54:16,257 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10705 states and 12071 transitions.
[2020-11-25 02:54:16,262 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:16,262 INFO  L728         BuchiCegarLoop]: Abstraction has 10705 states and 12071 transitions.
[2020-11-25 02:54:16,269 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10705 states and 12071 transitions.
[2020-11-25 02:54:16,326 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10705 to 10573.
[2020-11-25 02:54:16,327 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10573 states.
[2020-11-25 02:54:16,338 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10573 states to 10573 states and 11939 transitions.
[2020-11-25 02:54:16,338 INFO  L751         BuchiCegarLoop]: Abstraction has 10573 states and 11939 transitions.
[2020-11-25 02:54:16,338 INFO  L631         BuchiCegarLoop]: Abstraction has 10573 states and 11939 transitions.
[2020-11-25 02:54:16,338 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 02:54:16,338 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10573 states and 11939 transitions.
[2020-11-25 02:54:16,349 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:54:16,349 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:16,349 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:16,351 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:16,351 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:16,356 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:16,357 INFO  L82        PathProgramCache]: Analyzing trace with hash 1755902096, now seen corresponding path program 1 times
[2020-11-25 02:54:16,357 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:16,378 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:16,646 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:54:16,646 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:16,646 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 02:54:16,646 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:16,647 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 02:54:16,647 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 02:54:16,647 INFO  L87              Difference]: Start difference. First operand 10573 states and 11939 transitions. cyclomatic complexity: 1382 Second operand 12 states.
[2020-11-25 02:54:22,568 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:22,568 INFO  L93              Difference]: Finished difference Result 15624 states and 17580 transitions.
[2020-11-25 02:54:22,568 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 02:54:22,568 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15624 states and 17580 transitions.
[2020-11-25 02:54:22,600 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 16
[2020-11-25 02:54:22,633 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15624 states to 15614 states and 17568 transitions.
[2020-11-25 02:54:22,634 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3125
[2020-11-25 02:54:22,635 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3125
[2020-11-25 02:54:22,635 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15614 states and 17568 transitions.
[2020-11-25 02:54:22,643 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:22,643 INFO  L728         BuchiCegarLoop]: Abstraction has 15614 states and 17568 transitions.
[2020-11-25 02:54:22,650 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15614 states and 17568 transitions.
[2020-11-25 02:54:22,728 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15614 to 13478.
[2020-11-25 02:54:22,729 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13478 states.
[2020-11-25 02:54:22,746 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13478 states to 13478 states and 15411 transitions.
[2020-11-25 02:54:22,746 INFO  L751         BuchiCegarLoop]: Abstraction has 13478 states and 15411 transitions.
[2020-11-25 02:54:22,746 INFO  L631         BuchiCegarLoop]: Abstraction has 13478 states and 15411 transitions.
[2020-11-25 02:54:22,746 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 02:54:22,746 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13478 states and 15411 transitions.
[2020-11-25 02:54:22,760 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:54:22,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:22,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:22,762 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:22,762 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND FALSE  !(DType[this] == Pausable)
[L6130]   COND TRUE   DType[this] == PauserRole
[L6131]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6131]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6132]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:22,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:22,768 INFO  L82        PathProgramCache]: Analyzing trace with hash 336559088, now seen corresponding path program 1 times
[2020-11-25 02:54:22,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:22,783 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:22,958 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 02:54:22,958 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 02:54:22,958 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 02:54:22,959 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:22,959 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 02:54:22,959 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 02:54:22,959 INFO  L87              Difference]: Start difference. First operand 13478 states and 15411 transitions. cyclomatic complexity: 1957 Second operand 8 states.
[2020-11-25 02:54:23,203 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:23,203 INFO  L93              Difference]: Finished difference Result 13499 states and 15435 transitions.
[2020-11-25 02:54:23,203 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 02:54:23,203 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13499 states and 15435 transitions.
[2020-11-25 02:54:23,240 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:54:23,268 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13499 states to 13478 states and 15410 transitions.
[2020-11-25 02:54:23,268 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2729
[2020-11-25 02:54:23,270 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2729
[2020-11-25 02:54:23,270 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13478 states and 15410 transitions.
[2020-11-25 02:54:23,277 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:23,277 INFO  L728         BuchiCegarLoop]: Abstraction has 13478 states and 15410 transitions.
[2020-11-25 02:54:23,284 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13478 states and 15410 transitions.
[2020-11-25 02:54:23,357 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13478 to 13472.
[2020-11-25 02:54:23,357 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 13472 states.
[2020-11-25 02:54:23,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 13472 states to 13472 states and 15404 transitions.
[2020-11-25 02:54:23,374 INFO  L751         BuchiCegarLoop]: Abstraction has 13472 states and 15404 transitions.
[2020-11-25 02:54:23,374 INFO  L631         BuchiCegarLoop]: Abstraction has 13472 states and 15404 transitions.
[2020-11-25 02:54:23,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 02:54:23,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13472 states and 15404 transitions.
[2020-11-25 02:54:23,388 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-11-25 02:54:23,388 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:23,388 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:23,390 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:23,390 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:23,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:23,395 INFO  L82        PathProgramCache]: Analyzing trace with hash -474775376, now seen corresponding path program 1 times
[2020-11-25 02:54:23,396 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:23,424 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:23,632 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 924 trivial. 0 not checked.
[2020-11-25 02:54:23,632 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:23,632 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 02:54:23,633 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:23,633 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 02:54:23,633 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=183, Unknown=0, NotChecked=0, Total=210
[2020-11-25 02:54:23,633 INFO  L87              Difference]: Start difference. First operand 13472 states and 15404 transitions. cyclomatic complexity: 1956 Second operand 15 states.
[2020-11-25 02:54:31,728 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:31,728 INFO  L93              Difference]: Finished difference Result 20767 states and 24079 transitions.
[2020-11-25 02:54:31,728 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 02:54:31,729 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20767 states and 24079 transitions.
[2020-11-25 02:54:31,773 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 46
[2020-11-25 02:54:31,827 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20767 states to 20747 states and 24056 transitions.
[2020-11-25 02:54:31,827 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4168
[2020-11-25 02:54:31,829 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4168
[2020-11-25 02:54:31,829 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20747 states and 24056 transitions.
[2020-11-25 02:54:31,842 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:31,842 INFO  L728         BuchiCegarLoop]: Abstraction has 20747 states and 24056 transitions.
[2020-11-25 02:54:31,850 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20747 states and 24056 transitions.
[2020-11-25 02:54:31,958 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20747 to 19273.
[2020-11-25 02:54:31,958 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 19273 states.
[2020-11-25 02:54:31,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 19273 states to 19273 states and 22506 transitions.
[2020-11-25 02:54:31,986 INFO  L751         BuchiCegarLoop]: Abstraction has 19273 states and 22506 transitions.
[2020-11-25 02:54:31,986 INFO  L631         BuchiCegarLoop]: Abstraction has 19273 states and 22506 transitions.
[2020-11-25 02:54:31,986 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 02:54:31,986 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 19273 states and 22506 transitions.
[2020-11-25 02:54:32,007 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 38
[2020-11-25 02:54:32,007 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:32,007 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:32,008 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:32,008 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND TRUE   __exception
[L3018]               __tmp__Balance := Balance;
[L3019]               __tmp__DType := DType;
[L3020]               __tmp__Alloc := Alloc;
[L3021]               __tmp__balance_ADDR := balance_ADDR;
[L3022]               __tmp__M_Ref_bool := M_Ref_bool;
[L3023]               __tmp__sum := sum;
[L3024]               __tmp__M_Ref_int := M_Ref_int;
[L3025]               __tmp__sum__balances0 := sum__balances0;
[L3026]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3027]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3028]               __tmp__sum__allowed1 := sum__allowed1;
[L3029]               __tmp__M_int_Ref := M_int_Ref;
[L3030]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3031]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3032]               __tmp__Length := Length;
[L3033]               __tmp__now := now;
[L3034]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3035]               __tmp__owner_Ownable := owner_Ownable;
[L3036]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3037]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3038]               __tmp___paused_Pausable := _paused_Pausable;
[L3039]               __tmp___balances_ERC20 := _balances_ERC20;
[L3040]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3041]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3042]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3043]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3044]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3045]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3046]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3047]               __tmp__implementation_ONIT := implementation_ONIT;
[L3048]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3049]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3050]   CALL        call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L7396]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7396]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7397]   COND FALSE  !(revert)
[L7400]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7276]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7276]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7277]   COND FALSE  !(revert)
[L7280]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7249]               assume msgsender_MSG != null;
[L7250]               __tmp__Balance[this] := 0;
[L7251]               __tmp___name_ERC20Detailed[this] := -1540954157;
[L7252]               __tmp___symbol_ERC20Detailed[this] := -1540954157;
[L7253]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7255]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7256]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7257]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7280]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7281]   COND FALSE  !(revert)
[L7400]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7401]   COND FALSE  !(revert)
[L7404]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7404]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7405]   COND FALSE  !(revert)
[L7408]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7408]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7409]   COND FALSE  !(revert)
[L7412]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7412]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7413]   COND FALSE  !(revert)
[L7416]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7416]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7417]   COND FALSE  !(revert)
[L7420]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7092]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L7092]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7096]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6578]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6536]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6521]               assume msgsender_MSG != null;
[L6522]               __tmp__Balance[this] := 0;
[L6536]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6537]   COND FALSE  !(revert)
[L6578]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6579]   COND FALSE  !(revert)
[L6582]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6553]               assume msgsender_MSG != null;
[L6554]               __tmp__Balance[this] := 0;
[L6555]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L6556]               __tmp__sum__balances0[this] := 0;
[L6557]               __tmp___allowed_ERC20[this] := zeroRefRefintArr();
[L6558]               __tmp__sum__allowed1[this] := 0;
[L6559]               __tmp___totalSupply_ERC20[this] := 0;
[L6582]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6583]   COND FALSE  !(revert)
[L7096]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7097]   COND FALSE  !(revert)
[L7100]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L7100]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7101]   COND FALSE  !(revert)
[L7104]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L7104]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7105]   COND FALSE  !(revert)
[L7108]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6422]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6422]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6423]   COND FALSE  !(revert)
[L6426]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6143]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5948]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5921]               assume msgsender_MSG != null;
[L5922]               __tmp__Balance[this] := 0;
[L5923]               __tmp__owner_Ownable[this] := null;
[L5924]               __tmp__newOwner_Ownable[this] := null;
[L5926]               __tmp__owner_Ownable[this] := msgsender_MSG;
[L5927]               __var_6 := null;
[L5928]               __tmp__newOwner_Ownable[this] := __var_6;
[L5948]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5949]   COND FALSE  !(revert)
[L6143]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6144]   COND FALSE  !(revert)
[L6147]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6068]               assume msgsender_MSG != null;
[L6069]               __tmp__Balance[this] := 0;
[L6071]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L6071]   RET         call __var_10 := FreshRefGenerator__fail();
[L6072]   COND FALSE  !(revert)
[L6075]               __tmp___pausers_PauserRole[this] := __var_10;
[L6077]   COND TRUE   __tmp__DType[this] == ONIT
[L6078]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6368]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5817]               __var_1 := null;
[L5818]   COND FALSE  !(!(account_s164 != null))
[L5822]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5896]               __var_5 := null;
[L5897]   COND FALSE  !(!(account_s218 != null))
[L5901]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5822]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5823]   COND FALSE  !(revert)
[L5826]   COND FALSE  !(!!__var_2)
[L5830]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6368]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6369]   COND FALSE  !(revert)
[L6078]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6079]   COND FALSE  !(revert)
[L6147]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6148]   COND FALSE  !(revert)
[L6426]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6427]   COND FALSE  !(revert)
[L6430]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6403]               assume msgsender_MSG != null;
[L6404]               __tmp__Balance[this] := 0;
[L6405]               __tmp___paused_Pausable[this] := false;
[L6407]               __tmp___paused_Pausable[this] := false;
[L6430]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6431]   COND FALSE  !(revert)
[L7108]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7109]   COND FALSE  !(revert)
[L7112]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7077]               assume msgsender_MSG != null;
[L7078]               __tmp__Balance[this] := 0;
[L7112]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7113]   COND FALSE  !(revert)
[L7420]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7421]   COND FALSE  !(revert)
[L7424]   CALL        call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7339]               assume msgsender_MSG != null;
[L7340]               __tmp__Balance[this] := 0;
[L7341]               __tmp__implementation_ONIT[this] := null;
[L7343]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7343]   RET         call __var_36 := FreshRefGenerator__fail();
[L7344]   COND FALSE  !(revert)
[L7347]               __tmp__timelockList_ONIT[this] := __var_36;
[L7349]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]] := zeroRefboolArr();
[L7350]               __tmp__frozenAccount_ONIT[this] := zeroRefboolArr();
[L7352]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7353]   COND TRUE   __tmp__DType[this] == ONIT
[L7354]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6920]               __var_23 := null;
[L6921]   COND FALSE  !(!(account_s946 != null))
[L6925]   CALL        call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6925]   RET         call __var_24 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], value_s946);
[L6926]   COND FALSE  !(revert)
[L6929]               __tmp___totalSupply_ERC20[this] := __var_24;
[L6930]   CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L5740]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5741]   COND FALSE  !(!(c_s106 >= a_s106))
[L5745]               __ret_0_ := c_s106;
[L6930]   RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s946], value_s946);
[L6931]   COND FALSE  !(revert)
[L6934]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s946];
[L6935]               __tmp___balances_ERC20[this][account_s946] := __var_25;
[L6936]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s946];
[L7354]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7355]   COND FALSE  !(revert)
[L7424]   RET         call ONIT_ONIT_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7425]   COND FALSE  !(revert)
[L3050]   RET         call ONIT_ONIT__fail(this, msgsender_MSG, msgvalue_MSG);
[L3051]               assume revert || gas < 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND TRUE   !!__tmp__frozenAccount_ONIT[this][_holder_s1185]
[L10925]              revert := true;
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10893]              revert := true;
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:32,013 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:32,014 INFO  L82        PathProgramCache]: Analyzing trace with hash -1877250411, now seen corresponding path program 1 times
[2020-11-25 02:54:32,014 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:32,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:32,176 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 02:54:32,176 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:32,176 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:54:32,177 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:32,177 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:54:32,177 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:54:32,177 INFO  L87              Difference]: Start difference. First operand 19273 states and 22506 transitions. cyclomatic complexity: 3273 Second operand 4 states.
[2020-11-25 02:54:32,768 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:32,769 INFO  L93              Difference]: Finished difference Result 26791 states and 33740 transitions.
[2020-11-25 02:54:32,769 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 02:54:32,769 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26791 states and 33740 transitions.
[2020-11-25 02:54:32,859 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 152
[2020-11-25 02:54:32,971 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26791 states to 25003 states and 31776 transitions.
[2020-11-25 02:54:32,971 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4823
[2020-11-25 02:54:32,974 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4842
[2020-11-25 02:54:32,974 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25003 states and 31776 transitions.
[2020-11-25 02:54:32,998 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:32,998 INFO  L728         BuchiCegarLoop]: Abstraction has 25003 states and 31776 transitions.
[2020-11-25 02:54:33,007 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25003 states and 31776 transitions.
[2020-11-25 02:54:33,214 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25003 to 21209.
[2020-11-25 02:54:33,215 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21209 states.
[2020-11-25 02:54:33,254 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21209 states to 21209 states and 25550 transitions.
[2020-11-25 02:54:33,254 INFO  L751         BuchiCegarLoop]: Abstraction has 21209 states and 25550 transitions.
[2020-11-25 02:54:33,254 INFO  L631         BuchiCegarLoop]: Abstraction has 21209 states and 25550 transitions.
[2020-11-25 02:54:33,254 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 02:54:33,254 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21209 states and 25550 transitions.
[2020-11-25 02:54:33,282 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:54:33,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:33,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:33,285 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:33,285 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND TRUE   DType[this] == ERC20Pausable
[L6121]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6121]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6122]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:33,290 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:33,290 INFO  L82        PathProgramCache]: Analyzing trace with hash 1236261992, now seen corresponding path program 1 times
[2020-11-25 02:54:33,292 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:33,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:33,474 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 02:54:33,475 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:33,475 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:54:33,475 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:33,475 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:54:33,475 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:54:33,475 INFO  L87              Difference]: Start difference. First operand 21209 states and 25550 transitions. cyclomatic complexity: 4381 Second operand 9 states.
[2020-11-25 02:54:33,659 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:33,659 INFO  L93              Difference]: Finished difference Result 21240 states and 25583 transitions.
[2020-11-25 02:54:33,659 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:54:33,659 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21240 states and 25583 transitions.
[2020-11-25 02:54:33,710 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:54:33,769 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21240 states to 21205 states and 25544 transitions.
[2020-11-25 02:54:33,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4382
[2020-11-25 02:54:33,771 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4382
[2020-11-25 02:54:33,771 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21205 states and 25544 transitions.
[2020-11-25 02:54:33,786 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:33,786 INFO  L728         BuchiCegarLoop]: Abstraction has 21205 states and 25544 transitions.
[2020-11-25 02:54:33,794 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21205 states and 25544 transitions.
[2020-11-25 02:54:33,912 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21205 to 21205.
[2020-11-25 02:54:33,912 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21205 states.
[2020-11-25 02:54:33,947 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21205 states to 21205 states and 25544 transitions.
[2020-11-25 02:54:33,947 INFO  L751         BuchiCegarLoop]: Abstraction has 21205 states and 25544 transitions.
[2020-11-25 02:54:33,947 INFO  L631         BuchiCegarLoop]: Abstraction has 21205 states and 25544 transitions.
[2020-11-25 02:54:33,947 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 02:54:33,947 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21205 states and 25544 transitions.
[2020-11-25 02:54:33,970 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:54:33,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:33,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:33,972 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:33,972 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L7209]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7210]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7210]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7211]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND FALSE  !(__tmp__DType[this] == ONIT)
[L7209]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7210]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7210]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7211]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:33,976 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:33,976 INFO  L82        PathProgramCache]: Analyzing trace with hash 1274114402, now seen corresponding path program 1 times
[2020-11-25 02:54:33,978 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:33,996 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:34,171 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:54:34,172 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:34,172 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:54:34,172 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:34,172 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:54:34,172 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:54:34,172 INFO  L87              Difference]: Start difference. First operand 21205 states and 25544 transitions. cyclomatic complexity: 4379 Second operand 4 states.
[2020-11-25 02:54:34,274 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:34,274 INFO  L93              Difference]: Finished difference Result 21229 states and 25560 transitions.
[2020-11-25 02:54:34,274 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:54:34,274 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21229 states and 25560 transitions.
[2020-11-25 02:54:34,324 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:54:34,384 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21229 states to 21181 states and 25508 transitions.
[2020-11-25 02:54:34,384 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4376
[2020-11-25 02:54:34,386 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4376
[2020-11-25 02:54:34,386 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21181 states and 25508 transitions.
[2020-11-25 02:54:34,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:34,401 INFO  L728         BuchiCegarLoop]: Abstraction has 21181 states and 25508 transitions.
[2020-11-25 02:54:34,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21181 states and 25508 transitions.
[2020-11-25 02:54:34,526 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21181 to 21177.
[2020-11-25 02:54:34,526 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21177 states.
[2020-11-25 02:54:34,561 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21177 states to 21177 states and 25504 transitions.
[2020-11-25 02:54:34,561 INFO  L751         BuchiCegarLoop]: Abstraction has 21177 states and 25504 transitions.
[2020-11-25 02:54:34,561 INFO  L631         BuchiCegarLoop]: Abstraction has 21177 states and 25504 transitions.
[2020-11-25 02:54:34,561 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 02:54:34,561 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21177 states and 25504 transitions.
[2020-11-25 02:54:34,583 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:54:34,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:34,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:34,585 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:34,585 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND FALSE  !(DType[this] == ONIT)
[L6120]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6125]   COND TRUE   DType[this] == Pausable
[L6126]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6126]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6127]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:34,590 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:34,590 INFO  L82        PathProgramCache]: Analyzing trace with hash -48075833, now seen corresponding path program 1 times
[2020-11-25 02:54:34,591 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:34,608 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:34,767 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 02:54:34,767 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:34,768 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:54:34,768 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:34,768 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:54:34,768 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:54:34,768 INFO  L87              Difference]: Start difference. First operand 21177 states and 25504 transitions. cyclomatic complexity: 4367 Second operand 9 states.
[2020-11-25 02:54:34,951 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:34,951 INFO  L93              Difference]: Finished difference Result 21202 states and 25531 transitions.
[2020-11-25 02:54:34,951 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 02:54:34,951 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21202 states and 25531 transitions.
[2020-11-25 02:54:35,000 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:54:35,058 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21202 states to 21160 states and 25483 transitions.
[2020-11-25 02:54:35,059 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4374
[2020-11-25 02:54:35,061 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4374
[2020-11-25 02:54:35,061 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21160 states and 25483 transitions.
[2020-11-25 02:54:35,075 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:35,075 INFO  L728         BuchiCegarLoop]: Abstraction has 21160 states and 25483 transitions.
[2020-11-25 02:54:35,083 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21160 states and 25483 transitions.
[2020-11-25 02:54:35,203 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21160 to 21160.
[2020-11-25 02:54:35,203 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21160 states.
[2020-11-25 02:54:35,237 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21160 states to 21160 states and 25483 transitions.
[2020-11-25 02:54:35,238 INFO  L751         BuchiCegarLoop]: Abstraction has 21160 states and 25483 transitions.
[2020-11-25 02:54:35,238 INFO  L631         BuchiCegarLoop]: Abstraction has 21160 states and 25483 transitions.
[2020-11-25 02:54:35,238 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 02:54:35,238 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21160 states and 25483 transitions.
[2020-11-25 02:54:35,260 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 02:54:35,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:35,260 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:35,262 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:35,262 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND FALSE  !(__tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false)
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:35,267 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:35,267 INFO  L82        PathProgramCache]: Analyzing trace with hash -2083192762, now seen corresponding path program 1 times
[2020-11-25 02:54:35,267 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:35,285 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:35,563 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:54:35,563 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:35,563 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 02:54:35,564 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:35,564 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 02:54:35,564 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=38, Invalid=268, Unknown=0, NotChecked=0, Total=306
[2020-11-25 02:54:35,564 INFO  L87              Difference]: Start difference. First operand 21160 states and 25483 transitions. cyclomatic complexity: 4363 Second operand 18 states.
[2020-11-25 02:54:43,190 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:43,190 INFO  L93              Difference]: Finished difference Result 24618 states and 31098 transitions.
[2020-11-25 02:54:43,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:54:43,190 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24618 states and 31098 transitions.
[2020-11-25 02:54:43,260 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:54:43,347 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24618 states to 24618 states and 31098 transitions.
[2020-11-25 02:54:43,347 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5240
[2020-11-25 02:54:43,351 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5247
[2020-11-25 02:54:43,351 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24618 states and 31098 transitions.
[2020-11-25 02:54:43,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:43,374 INFO  L728         BuchiCegarLoop]: Abstraction has 24618 states and 31098 transitions.
[2020-11-25 02:54:43,383 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24618 states and 31098 transitions.
[2020-11-25 02:54:43,561 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24618 to 23160.
[2020-11-25 02:54:43,561 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23160 states.
[2020-11-25 02:54:43,602 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23160 states to 23160 states and 28424 transitions.
[2020-11-25 02:54:43,602 INFO  L751         BuchiCegarLoop]: Abstraction has 23160 states and 28424 transitions.
[2020-11-25 02:54:43,602 INFO  L631         BuchiCegarLoop]: Abstraction has 23160 states and 28424 transitions.
[2020-11-25 02:54:43,602 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 02:54:43,602 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23160 states and 28424 transitions.
[2020-11-25 02:54:43,628 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:54:43,628 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:43,628 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:43,630 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:43,630 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false
[L7695]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7695]   RET         call __var_45 := FreshRefGenerator__fail();
[L7696]   COND FALSE  !(revert)
[L7699]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7700]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] := true;
[L7701]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7702]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322] == __var_45;
[L7703]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false
[L7695]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7695]   RET         call __var_45 := FreshRefGenerator__fail();
[L7696]   COND FALSE  !(revert)
[L7699]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7700]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] := true;
[L7701]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7702]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322] == __var_45;
[L7703]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND TRUE   !(b_s82 <= a_s82)
[L5717]               revert := true;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:43,634 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:43,635 INFO  L82        PathProgramCache]: Analyzing trace with hash 1042232088, now seen corresponding path program 1 times
[2020-11-25 02:54:43,635 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:43,653 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:54:43,864 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 02:54:43,864 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:54:43,864 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 02:54:43,865 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:54:43,865 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 02:54:43,865 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 02:54:43,865 INFO  L87              Difference]: Start difference. First operand 23160 states and 28424 transitions. cyclomatic complexity: 5338 Second operand 9 states.
[2020-11-25 02:54:46,933 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:54:46,934 INFO  L93              Difference]: Finished difference Result 23418 states and 28806 transitions.
[2020-11-25 02:54:46,934 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 02:54:46,934 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23418 states and 28806 transitions.
[2020-11-25 02:54:46,996 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:54:47,071 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23418 states to 23418 states and 28806 transitions.
[2020-11-25 02:54:47,071 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5288
[2020-11-25 02:54:47,074 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5288
[2020-11-25 02:54:47,074 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23418 states and 28806 transitions.
[2020-11-25 02:54:47,091 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:54:47,092 INFO  L728         BuchiCegarLoop]: Abstraction has 23418 states and 28806 transitions.
[2020-11-25 02:54:47,100 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23418 states and 28806 transitions.
[2020-11-25 02:54:47,261 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23418 to 23358.
[2020-11-25 02:54:47,261 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 23358 states.
[2020-11-25 02:54:47,304 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 23358 states to 23358 states and 28676 transitions.
[2020-11-25 02:54:47,304 INFO  L751         BuchiCegarLoop]: Abstraction has 23358 states and 28676 transitions.
[2020-11-25 02:54:47,304 INFO  L631         BuchiCegarLoop]: Abstraction has 23358 states and 28676 transitions.
[2020-11-25 02:54:47,304 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 02:54:47,304 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 23358 states and 28676 transitions.
[2020-11-25 02:54:47,332 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 02:54:47,332 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:54:47,332 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:54:47,333 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:54:47,333 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ONIT0 := false;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]      CALL        call main();
[L3]                  havoc p2;
[L3]                  havoc p1;
[L12349]              assume null == 0;
[L12350]  CALL        call this := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L12350]  RET         call this := FreshRefGenerator__success();
[L12351]              assume now >= 0;
[L12352]              assume DType[this] == ONIT;
[L12353]              assume msgvalue_MSG == 0;
[L12354]              gas := gas - 53000;
[L12355]  CALL        call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
[L12356]              assume !revert && gas >= 0;
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false
[L7695]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7695]   RET         call __var_45 := FreshRefGenerator__fail();
[L7696]   COND FALSE  !(revert)
[L7699]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7700]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] := true;
[L7701]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7702]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322] == __var_45;
[L7703]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND FALSE  !(!(b_s82 <= a_s82))
[L5720]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5721]               __ret_0_ := c_s82;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND FALSE  !(revert)
[L6722]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6723]               __tmp___allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6724]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6725]   COND TRUE   __tmp__DType[this] == ONIT
[L6726]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6726]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6727]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

Loop:
[L12359]  CALL        call CorralChoice_ONIT(this);
[L12047]              havoc msgsender_MSG;
[L12048]              havoc msgvalue_MSG;
[L12049]              havoc choice;
[L12050]              havoc __ret_0_owner;
[L12051]              havoc __ret_0_newOwner;
[L12052]              havoc account_s293;
[L12053]              havoc __ret_0_isOwner;
[L12054]              havoc _newOwner_s313;
[L12055]              havoc __ret_0_acceptOwnership;
[L12056]              havoc account_s390;
[L12057]              havoc __ret_0_isPauser;
[L12058]              havoc account_s402;
[L12059]              havoc account_s414;
[L12060]              havoc __ret_0_paused;
[L12061]              havoc to_s1288;
[L12062]              havoc value_s1288;
[L12063]              havoc __ret_0_transfer;
[L12064]              havoc spender_s711;
[L12065]              havoc value_s711;
[L12066]              havoc __ret_0_approve;
[L12067]              havoc from_s1322;
[L12068]              havoc to_s1322;
[L12069]              havoc value_s1322;
[L12070]              havoc __ret_0_transferFrom;
[L12071]              havoc __ret_0_totalSupply;
[L12072]              havoc owner_s1254;
[L12073]              havoc __ret_0_balanceOf;
[L12074]              havoc owner_s656;
[L12075]              havoc spender_s656;
[L12076]              havoc __ret_0_allowance;
[L12077]              havoc spender_s809;
[L12078]              havoc addedValue_s809;
[L12079]              havoc __ret_0_increaseAllowance;
[L12080]              havoc spender_s858;
[L12081]              havoc subtractedValue_s858;
[L12082]              havoc __ret_0_decreaseAllowance;
[L12083]              havoc name_s1105;
[L12084]              havoc symbol_s1105;
[L12085]              havoc decimals_s1105;
[L12086]              havoc __ret_0_name;
[L12087]              havoc __ret_0_symbol;
[L12088]              havoc __ret_0_decimals;
[L12089]              havoc __ret_0_implementation;
[L12090]              havoc arg1693_s0;
[L12091]              havoc arg1694_s0;
[L12092]              havoc __ret_0_timelockList;
[L12093]              havoc arg1695_s0;
[L12094]              havoc __ret_0_frozenAccount;
[L12095]              havoc holder_s1351;
[L12096]              havoc __ret_0_freezeAccount;
[L12097]              havoc holder_s1379;
[L12098]              havoc __ret_0_unfreezeAccount;
[L12099]              havoc holder_s1410;
[L12100]              havoc value_s1410;
[L12101]              havoc releaseTime_s1410;
[L12102]              havoc __ret_0_lock;
[L12103]              havoc holder_s1439;
[L12104]              havoc value_s1439;
[L12105]              havoc releaseTime_s1439;
[L12106]              havoc __ret_0_transferWithLock;
[L12107]              havoc holder_s1468;
[L12108]              havoc idx_s1468;
[L12109]              havoc __ret_0_unlock;
[L12110]              havoc _newImplementation_s1486;
[L12111]              havoc value_s1663;
[L12112]              havoc __ret_0_mint;
[L12113]              havoc tmpNow;
[L12114]              havoc gas;
[L12115]              assume gas > 4000000 && gas <= 8000000;
[L12116]              tmpNow := now;
[L12117]              havoc now;
[L12118]              assume now > tmpNow;
[L12119]              assume msgsender_MSG != null;
[L12120]              assume DType[msgsender_MSG] != SafeMath;
[L12121]              assume DType[msgsender_MSG] != Roles;
[L12122]              assume DType[msgsender_MSG] != Ownable;
[L12123]              assume DType[msgsender_MSG] != PauserRole;
[L12124]              assume DType[msgsender_MSG] != Pausable;
[L12125]              assume DType[msgsender_MSG] != IERC20;
[L12126]              assume DType[msgsender_MSG] != ERC20;
[L12127]              assume DType[msgsender_MSG] != ERC20Pausable;
[L12128]              assume DType[msgsender_MSG] != ERC20Detailed;
[L12129]              assume DType[msgsender_MSG] != ONIT;
[L12130]              Alloc[msgsender_MSG] := true;
[L12131]  COND FALSE  !(choice == 33)
[L12137]  COND FALSE  !(choice == 32)
[L12143]  COND FALSE  !(choice == 31)
[L12149]  COND FALSE  !(choice == 30)
[L12155]  COND FALSE  !(choice == 29)
[L12161]  COND FALSE  !(choice == 28)
[L12167]  COND FALSE  !(choice == 27)
[L12173]  COND FALSE  !(choice == 26)
[L12179]  COND FALSE  !(choice == 25)
[L12185]  COND FALSE  !(choice == 24)
[L12191]  COND FALSE  !(choice == 23)
[L12197]  COND FALSE  !(choice == 22)
[L12203]  COND FALSE  !(choice == 21)
[L12210]  COND FALSE  !(choice == 20)
[L12217]  COND TRUE   choice == 19
[L12218]              gas := gas - 21000;
[L12219]  COND TRUE   gas >= 0
[L12220]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12221]              assume msgvalue_MSG == 0;
[L12222]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false
[L7695]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7695]   RET         call __var_45 := FreshRefGenerator__fail();
[L7696]   COND FALSE  !(revert)
[L7699]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7700]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] := true;
[L7701]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7702]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322] == __var_45;
[L7703]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND FALSE  !(!(b_s82 <= a_s82))
[L5720]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5721]               __ret_0_ := c_s82;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND FALSE  !(revert)
[L6722]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6723]               __tmp___allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6724]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6725]   COND TRUE   __tmp__DType[this] == ONIT
[L6726]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6726]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6727]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12359]  RET         call CorralChoice_ONIT(this);

[2020-11-25 02:54:47,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:47,338 INFO  L82        PathProgramCache]: Analyzing trace with hash -1336070131, now seen corresponding path program 1 times
[2020-11-25 02:54:47,339 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:47,372 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:54:47,408 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:54:47,615 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:47,615 INFO  L82        PathProgramCache]: Analyzing trace with hash 1898300514, now seen corresponding path program 1 times
[2020-11-25 02:54:47,616 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:47,625 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:54:47,633 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:54:47,662 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:54:47,663 INFO  L82        PathProgramCache]: Analyzing trace with hash 798513366, now seen corresponding path program 1 times
[2020-11-25 02:54:47,664 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:54:47,700 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:54:47,789 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:54:48,269 WARN  L188               SmtUtils]: Spent 187.00 ms on a formula simplification. DAG size of input: 97 DAG size of output: 94
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 02:54:48,599 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification. DAG size of input: 142 DAG size of output: 137
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 02:54:49,269 WARN  L188               SmtUtils]: Spent 500.00 ms on a formula simplification. DAG size of input: 261 DAG size of output: 250
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 8053 to 16103
[2020-11-25 02:54:49,855 WARN  L188               SmtUtils]: Spent 473.00 ms on a formula simplification. DAG size of input: 187 DAG size of output: 181
[2020-11-25 02:54:50,240 WARN  L188               SmtUtils]: Spent 382.00 ms on a formula simplification that was a NOOP. DAG size: 412
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 9883 to 19763
Garbage collection #8: 19763 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 19763 to 39521
[2020-11-25 02:54:52,180 WARN  L188               SmtUtils]: Spent 1.92 s on a formula simplification. DAG size of input: 342 DAG size of output: 342
[2020-11-25 02:54:54,482 WARN  L188               SmtUtils]: Spent 2.30 s on a formula simplification. DAG size of input: 441 DAG size of output: 395
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #8: 17419 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17419 to 34819
Garbage collection #9: 34819 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 34819 to 69623
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-11-25 02:54:55,213 WARN  L188               SmtUtils]: Spent 693.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 245
[2020-11-25 02:54:55,854 WARN  L188               SmtUtils]: Spent 639.00 ms on a formula simplification that was a NOOP. DAG size: 503
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12323 to 24631
[2020-11-25 02:54:57,301 WARN  L188               SmtUtils]: Spent 1.43 s on a formula simplification. DAG size of input: 410 DAG size of output: 410
[2020-11-25 02:54:58,023 WARN  L188               SmtUtils]: Spent 719.00 ms on a formula simplification that was a NOOP. DAG size: 410
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 18353 to 36697
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 02:55:01,043 WARN  L188               SmtUtils]: Spent 2.99 s on a formula simplification. DAG size of input: 328 DAG size of output: 291
[2020-11-25 02:55:01,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 02:55:01,825 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 02:55:03,066 WARN  L188               SmtUtils]: Spent 992.00 ms on a formula simplification. DAG size of input: 447 DAG size of output: 421
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 02:55:03,378 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 02:55:03,490 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 167
[2020-11-25 02:55:03,692 WARN  L188               SmtUtils]: Spent 201.00 ms on a formula simplification that was a NOOP. DAG size: 415
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:55:03,855 WARN  L188               SmtUtils]: Spent 158.00 ms on a formula simplification that was a NOOP. DAG size: 375
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 02:55:04,680 WARN  L188               SmtUtils]: Spent 358.00 ms on a formula simplification. DAG size of input: 261 DAG size of output: 251
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 02:55:05,068 WARN  L188               SmtUtils]: Spent 373.00 ms on a formula simplification. DAG size of input: 188 DAG size of output: 182
[2020-11-25 02:55:05,457 WARN  L188               SmtUtils]: Spent 387.00 ms on a formula simplification that was a NOOP. DAG size: 413
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
[2020-11-25 02:55:07,106 WARN  L188               SmtUtils]: Spent 1.63 s on a formula simplification. DAG size of input: 343 DAG size of output: 343
[2020-11-25 02:55:09,284 WARN  L188               SmtUtils]: Spent 2.17 s on a formula simplification. DAG size of input: 441 DAG size of output: 396
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8713 to 17419
Garbage collection #8: 17419 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 17419 to 34819
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #8: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-11-25 02:55:09,965 WARN  L188               SmtUtils]: Spent 627.00 ms on a formula simplification. DAG size of input: 251 DAG size of output: 245
[2020-11-25 02:55:10,627 WARN  L188               SmtUtils]: Spent 660.00 ms on a formula simplification that was a NOOP. DAG size: 503
Garbage collection #1: 197 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 197 to 389
Garbage collection #2: 389 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 389 to 773
Garbage collection #3: 773 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 773 to 1543
Garbage collection #4: 1543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1543 to 3083
Garbage collection #5: 3083 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3083 to 6163
Garbage collection #6: 6163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6163 to 12323
Garbage collection #7: 12323 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12323 to 24631
Garbage collection #8: 24631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 24631 to 49261
[2020-11-25 02:55:12,179 WARN  L188               SmtUtils]: Spent 1.54 s on a formula simplification. DAG size of input: 410 DAG size of output: 410
[2020-11-25 02:55:15,424 WARN  L188               SmtUtils]: Spent 3.24 s on a formula simplification. DAG size of input: 742 DAG size of output: 723
Garbage collection #1: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #2: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #3: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #4: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #5: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #6: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #7: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:55:17,381 WARN  L188               SmtUtils]: Spent 1.91 s on a formula simplification. DAG size of input: 406 DAG size of output: 376
[2020-11-25 02:55:18,415 WARN  L188               SmtUtils]: Spent 998.00 ms on a formula simplification that was a NOOP. DAG size: 540
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 31699 to 63397
[2020-11-25 02:55:19,968 WARN  L188               SmtUtils]: Spent 1.45 s on a formula simplification. DAG size of input: 399 DAG size of output: 375
[2020-11-25 02:55:21,855 WARN  L188               SmtUtils]: Spent 1.88 s on a formula simplification. DAG size of input: 541 DAG size of output: 540
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #8: 22349 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 22349 to 44687
Garbage collection #9: 44687 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 44687 to 89371
Garbage collection #10: 89371 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 89371 to 139369
Garbage collection #11: 139369 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 139369 to 189361
[2020-11-25 02:55:24,316 WARN  L188               SmtUtils]: Spent 2.42 s on a formula simplification. DAG size of input: 551 DAG size of output: 535
[2020-11-25 02:55:24,396 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:55:24,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:55:24,458 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:55:24 BasicIcfg
[2020-11-25 02:55:24,458 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:55:24,458 INFO  L168              Benchmark]: Toolchain (without parser) took 80313.69 ms. Allocated memory was 1.0 GB in the beginning and 4.8 GB in the end (delta: 3.7 GB). Free memory was 919.1 MB in the beginning and 1.6 GB in the end (delta: -649.0 MB). Peak memory consumption was 3.9 GB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,458 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,459 INFO  L168              Benchmark]: Boogie Preprocessor took 178.21 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,459 INFO  L168              Benchmark]: UtopiaSpecLang took 99.67 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 875.9 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,459 INFO  L168              Benchmark]: Boogie Printer took 30.87 ms. Allocated memory is still 1.0 GB. Free memory was 875.9 MB in the beginning and 870.2 MB in the end (delta: 5.7 MB). Peak memory consumption was 5.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,459 INFO  L168              Benchmark]: RCFGBuilder took 1234.54 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 70.3 MB). Free memory was 870.2 MB in the beginning and 767.9 MB in the end (delta: 102.3 MB). Peak memory consumption was 172.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,460 INFO  L168              Benchmark]: UtopiaLTL2Aut took 32.82 ms. Allocated memory is still 1.1 GB. Free memory was 767.9 MB in the beginning and 764.4 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,460 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3436.85 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 471.9 MB). Free memory was 764.4 MB in the beginning and 926.5 MB in the end (delta: -162.0 MB). Peak memory consumption was 357.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,460 INFO  L168              Benchmark]: BlockEncodingV2 took 277.21 ms. Allocated memory is still 1.6 GB. Free memory was 926.5 MB in the beginning and 777.5 MB in the end (delta: 148.9 MB). Peak memory consumption was 148.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,460 INFO  L168              Benchmark]: BuchiAutomizer took 75020.35 ms. Allocated memory was 1.6 GB in the beginning and 4.8 GB in the end (delta: 3.2 GB). Free memory was 777.5 MB in the beginning and 1.6 GB in the end (delta: -790.6 MB). Peak memory consumption was 3.2 GB. Max. memory is 15.3 GB.
[2020-11-25 02:55:24,463 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11596 locations, 21005 edges
  - StatisticsResult: Encoded RCFG
    11450 locations, 20602 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 178.21 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.0 MB in the end (delta: 27.1 MB). Peak memory consumption was 27.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 99.67 ms. Allocated memory is still 1.0 GB. Free memory was 892.0 MB in the beginning and 875.9 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 30.87 ms. Allocated memory is still 1.0 GB. Free memory was 875.9 MB in the beginning and 870.2 MB in the end (delta: 5.7 MB). Peak memory consumption was 5.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1234.54 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 70.3 MB). Free memory was 870.2 MB in the beginning and 767.9 MB in the end (delta: 102.3 MB). Peak memory consumption was 172.5 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 32.82 ms. Allocated memory is still 1.1 GB. Free memory was 767.9 MB in the beginning and 764.4 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3436.85 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 471.9 MB). Free memory was 764.4 MB in the beginning and 926.5 MB in the end (delta: -162.0 MB). Peak memory consumption was 357.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 277.21 ms. Allocated memory is still 1.6 GB. Free memory was 926.5 MB in the beginning and 777.5 MB in the end (delta: 148.9 MB). Peak memory consumption was 148.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 75020.35 ms. Allocated memory was 1.6 GB in the beginning and 4.8 GB in the end (delta: 3.2 GB). Free memory was 777.5 MB in the beginning and 1.6 GB in the end (delta: -790.6 MB). Peak memory consumption was 3.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4670 locations, 6457 edges
  - StatisticsResult: BuchiProgram size
    11596 locations, 21005 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 18 terminating modules (18 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.18 modules have a trivial ranking function, the largest among these consists of 18 locations. The remainder module has 23358 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 74.9s and 19 iterations.  TraceHistogramMax:8. Analysis of lassos took 40.7s. Construction of modules took 21.3s. BÃ¼chi inclusion checks took 8.3s. Highest rank in rank-based complementation 0. Minimization of det autom 18. Minimization of nondet autom 0. Automata minimization 2.1s AutomataMinimizationTime, 18 MinimizatonAttempts, 11342 StatesRemovedByMinimization, 12 NontrivialMinimizations. Non-live state removal took 1.4s Buchi closure took 0.0s. Biggest automaton had 23358 states and ocurred in iteration 18.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 153248 SDtfs, 88548 SDslu, 562416 SDs, 0 SdLazy, 338104 SolverSat, 16050 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 21.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU18 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(789885600000000000000000027) = (new ONIT)({from : 789885600000000000000000021});
[L3015]               havoc __exception;
[L3016]               revert := false;
[L3017]   COND FALSE  !(__exception)
[L3053]   CALL        call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L7434]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7434]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7435]   COND FALSE  !(revert)
[L7438]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7288]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7288]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   COND FALSE  !(revert)
[L7292]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7263]               assume msgsender_MSG != null;
[L7264]               Balance[this] := 0;
[L7265]               _name_ERC20Detailed[this] := -1540954157;
[L7266]               _symbol_ERC20Detailed[this] := -1540954157;
[L7267]               _decimals_ERC20Detailed[this] := 0;
[L7269]               _name_ERC20Detailed[this] := name_s1105;
[L7270]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7271]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7292]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7293]   COND FALSE  !(revert)
[L7438]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1901915118, -1174776732, 18);
[L7439]   COND FALSE  !(revert)
[L7442]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7442]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7443]   COND FALSE  !(revert)
[L7446]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7446]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7447]   COND FALSE  !(revert)
[L7450]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7450]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7451]   COND FALSE  !(revert)
[L7454]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7454]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7455]   COND FALSE  !(revert)
[L7458]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7120]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L7120]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7121]   COND FALSE  !(revert)
[L7124]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6590]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6544]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6529]               assume msgsender_MSG != null;
[L6530]               Balance[this] := 0;
[L6544]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6545]   COND FALSE  !(revert)
[L6590]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6591]   COND FALSE  !(revert)
[L6594]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6566]               assume msgsender_MSG != null;
[L6567]               Balance[this] := 0;
[L6568]               _balances_ERC20[this] := zeroRefintArr();
[L6569]               sum__balances0[this] := 0;
[L6570]               _allowed_ERC20[this] := zeroRefRefintArr();
[L6571]               sum__allowed1[this] := 0;
[L6572]               _totalSupply_ERC20[this] := 0;
[L6594]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6595]   COND FALSE  !(revert)
[L7124]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7125]   COND FALSE  !(revert)
[L7128]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L7128]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7129]   COND FALSE  !(revert)
[L7132]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L7132]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7133]   COND FALSE  !(revert)
[L7136]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6438]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6438]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6439]   COND FALSE  !(revert)
[L6442]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6156]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5957]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5935]               assume msgsender_MSG != null;
[L5936]               Balance[this] := 0;
[L5937]               owner_Ownable[this] := null;
[L5938]               newOwner_Ownable[this] := null;
[L5940]               owner_Ownable[this] := msgsender_MSG;
[L5941]               __var_6 := null;
[L5942]               newOwner_Ownable[this] := __var_6;
[L5957]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5958]   COND FALSE  !(revert)
[L6156]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L6157]   COND FALSE  !(revert)
[L6160]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6106]               assume msgsender_MSG != null;
[L6107]               Balance[this] := 0;
[L6109]   CALL        call __var_10 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L6109]   RET         call __var_10 := FreshRefGenerator__success();
[L6110]   COND FALSE  !(revert)
[L6113]               _pausers_PauserRole[this] := __var_10;
[L6115]   COND TRUE   DType[this] == ONIT
[L6116]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6376]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5837]               __var_1 := null;
[L5838]   COND FALSE  !(!(account_s164 != null))
[L5842]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5908]               __var_5 := null;
[L5909]   COND FALSE  !(!(account_s218 != null))
[L5913]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5842]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5843]   COND FALSE  !(revert)
[L5846]   COND FALSE  !(!!__var_2)
[L5850]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6376]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6377]   COND FALSE  !(revert)
[L6380]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6116]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6117]   COND FALSE  !(revert)
[L6160]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6161]   COND FALSE  !(revert)
[L6442]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6443]   COND FALSE  !(revert)
[L6446]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6413]               assume msgsender_MSG != null;
[L6414]               Balance[this] := 0;
[L6415]               _paused_Pausable[this] := false;
[L6417]               _paused_Pausable[this] := false;
[L6446]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6447]   COND FALSE  !(revert)
[L7136]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7137]   COND FALSE  !(revert)
[L7140]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7085]               assume msgsender_MSG != null;
[L7086]               Balance[this] := 0;
[L7140]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7141]   COND FALSE  !(revert)
[L7458]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7459]   COND FALSE  !(revert)
[L7462]   CALL        call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7368]               assume msgsender_MSG != null;
[L7369]               Balance[this] := 0;
[L7370]               implementation_ONIT[this] := null;
[L7372]   CALL        call __var_36 := FreshRefGenerator__success();
[L5597]               havoc newRef;
[L5598]               assume Alloc[newRef] == false;
[L5599]               Alloc[newRef] := true;
[L5600]               assume newRef != null;
[L7372]   RET         call __var_36 := FreshRefGenerator__success();
[L7373]   COND FALSE  !(revert)
[L7376]               timelockList_ONIT[this] := __var_36;
[L7378]               alloc_timelockList_ONIT_lvl0[timelockList_ONIT[this]] := zeroRefboolArr();
[L7379]               frozenAccount_ONIT[this] := zeroRefboolArr();
[L7381]               __var_35 := 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7382]   COND TRUE   DType[this] == ONIT
[L7383]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6944]               __var_23 := null;
[L6945]   COND FALSE  !(!(account_s946 != null))
[L6949]   CALL        call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6949]   RET         call __var_24 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s946);
[L6950]   COND FALSE  !(revert)
[L6953]               _totalSupply_ERC20[this] := __var_24;
[L6954]   CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L5752]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5753]   COND FALSE  !(!(c_s106 >= a_s106))
[L5757]               __ret_0_ := c_s106;
[L6954]   RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s946], value_s946);
[L6955]   COND FALSE  !(revert)
[L6958]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s946];
[L6959]               _balances_ERC20[this][account_s946] := __var_25;
[L6960]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s946];
[L6961]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7383]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 789885600000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7384]   COND FALSE  !(revert)
[L7462]   RET         call ONIT_ONIT_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7463]   COND FALSE  !(revert)
[L3053]   RET         call ONIT_ONIT__success(this, msgsender_MSG, msgvalue_MSG);
[L3054]               assume !revert && gas >= 0;
[L12355]  RET         call ONIT_ONIT(this, msgsender_MSG, msgvalue_MSG);
ONIT(789885600000000000000000027).transferFrom~address~address~uint256.gas(3979002)({from : 789885600000000000000000016, from : 0, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false
[L7695]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7695]   RET         call __var_45 := FreshRefGenerator__fail();
[L7696]   COND FALSE  !(revert)
[L7699]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7700]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] := true;
[L7701]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7702]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322] == __var_45;
[L7703]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND FALSE  !(!(b_s82 <= a_s82))
[L5720]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5721]               __ret_0_ := c_s82;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND FALSE  !(revert)
[L6722]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6723]               __tmp___allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6724]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6725]   COND TRUE   __tmp__DType[this] == ONIT
[L6726]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6726]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6727]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);

Loop:
ONIT(789885600000000000000000027).transferFrom~address~address~uint256.gas(3979001)({from : 789885600000000000000000028, from : 0, to : 0, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((p1 != from_s1322 || p2 != msgsender_MSG) && from_s1322 == to_s1322) && value_s1322 <= _balances_ERC20[this][from_s1322]) && value_s1322 <= _allowed_ERC20[this][from_s1322][msgsender_MSG]) && value_s1322 >= 0) && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1322] >= 0) && _balances_ERC20[this][to_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1322] >= 0) && _balances_ERC20[this][from_s1322] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][from_s1322][msgsender_MSG] >= 0) && _allowed_ERC20[this][from_s1322][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ONIT0 := true;
[L3]                  call_transferFrom_ONIT0 := false;
[L3]                  revert := revert_hold;
[L3271]               havoc __exception;
[L3272]               revert := false;
[L3273]   COND TRUE   __exception
[L3274]               __tmp__Balance := Balance;
[L3275]               __tmp__DType := DType;
[L3276]               __tmp__Alloc := Alloc;
[L3277]               __tmp__balance_ADDR := balance_ADDR;
[L3278]               __tmp__M_Ref_bool := M_Ref_bool;
[L3279]               __tmp__sum := sum;
[L3280]               __tmp__M_Ref_int := M_Ref_int;
[L3281]               __tmp__sum__balances0 := sum__balances0;
[L3282]               __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L3283]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3284]               __tmp__sum__allowed1 := sum__allowed1;
[L3285]               __tmp__M_int_Ref := M_int_Ref;
[L3286]               __tmp__alloc_timelockList_ONIT_lvl0 := alloc_timelockList_ONIT_lvl0;
[L3287]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3288]               __tmp__Length := Length;
[L3289]               __tmp__now := now;
[L3290]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3291]               __tmp__owner_Ownable := owner_Ownable;
[L3292]               __tmp__newOwner_Ownable := newOwner_Ownable;
[L3293]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3294]               __tmp___paused_Pausable := _paused_Pausable;
[L3295]               __tmp___balances_ERC20 := _balances_ERC20;
[L3296]               __tmp___allowed_ERC20 := _allowed_ERC20;
[L3297]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3298]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3299]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3300]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3301]               __tmp___releaseTime_ONIT.LockInfo := _releaseTime_ONIT.LockInfo;
[L3302]               __tmp___amount_ONIT.LockInfo := _amount_ONIT.LockInfo;
[L3303]               __tmp__implementation_ONIT := implementation_ONIT;
[L3304]               __tmp__timelockList_ONIT := timelockList_ONIT;
[L3305]               __tmp__frozenAccount_ONIT := frozenAccount_ONIT;
[L3306]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7690]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10924]  COND FALSE  !(!!__tmp__frozenAccount_ONIT[this][_holder_s1185])
[L7690]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7691]   COND FALSE  !(revert)
[L7694]   COND TRUE   __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] == false
[L7695]   CALL        call __var_45 := FreshRefGenerator__fail();
[L5589]               havoc newRef;
[L5590]               assume __tmp__Alloc[newRef] == false;
[L5591]               __tmp__Alloc[newRef] := true;
[L5592]               assume newRef != null;
[L7695]   RET         call __var_45 := FreshRefGenerator__fail();
[L7696]   COND FALSE  !(revert)
[L7699]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7700]               __tmp__alloc_timelockList_ONIT_lvl0[__tmp__timelockList_ONIT[this]][from_s1322] := true;
[L7701]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == zerointRefArr();
[L7702]               assume __tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322] == __var_45;
[L7703]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] == 0;
[L7705]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_ONIT[this]][from_s1322]] > 0)
[L7711]   COND TRUE   __tmp__DType[this] == ONIT
[L7712]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7200]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10892]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7200]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   COND TRUE   __tmp__DType[this] == ONIT
[L7205]   CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6718]   CALL        call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L5716]   COND FALSE  !(!(b_s82 <= a_s82))
[L5720]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5721]               __ret_0_ := c_s82;
[L6718]   RET         call __var_15 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___allowed_ERC20[this][from_s760][msgsender_MSG], value_s760);
[L6719]   COND FALSE  !(revert)
[L6722]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] - __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6723]               __tmp___allowed_ERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6724]               __tmp__sum__allowed1[from_s760] := __tmp__sum__allowed1[from_s760] + __tmp___allowed_ERC20[this][from_s760][msgsender_MSG];
[L6725]   COND TRUE   __tmp__DType[this] == ONIT
[L6726]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6867]               __var_20 := null;
[L6868]   COND TRUE   !(to_s904 != null)
[L6869]               revert := true;
[L6726]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6727]   COND TRUE   revert
[L7205]   RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7206]   COND TRUE   revert
[L7712]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7713]   COND TRUE   revert
[L3306]   RET         call __ret_0_ := transferFrom~address~address~uint256_ONIT__fail(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3307]               assume revert || gas < 0;
[L12222]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ONIT(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
