This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 12:50:57,788 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 12:50:57,789 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 12:50:57,797 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 12:50:57,797 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 12:50:57,797 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 12:50:57,798 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 12:50:57,799 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 12:50:57,800 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 12:50:57,800 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 12:50:57,801 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 12:50:57,801 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 12:50:57,802 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 12:50:57,802 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 12:50:57,803 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 12:50:57,804 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 12:50:57,804 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 12:50:57,805 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 12:50:57,807 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 12:50:57,808 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 12:50:57,809 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 12:50:57,809 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 12:50:57,811 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 12:50:57,811 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 12:50:57,811 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 12:50:57,812 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 12:50:57,812 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 12:50:57,812 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 12:50:57,813 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 12:50:57,813 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 12:50:57,813 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 12:50:57,813 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 12:50:57,814 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 12:50:57,814 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 12:50:57,815 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 12:50:57,815 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 12:50:57,815 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 12:50:57,815 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 12:50:57,815 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 12:50:57,816 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 12:50:57,816 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 12:50:57,816 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 12:50:57,822 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 12:50:57,822 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 12:50:57,823 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 12:50:57,823 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 12:50:57,823 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 12:50:57,823 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 12:50:57,824 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 12:50:57,824 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 12:50:57,824 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 12:50:57,848 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 12:50:57,860 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 12:50:57,863 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 12:50:57,864 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 12:50:57,864 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 12:50:57,865 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl
[2020-11-25 12:50:57,865 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl'
[2020-11-25 12:50:57,929 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 12:50:57,930 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 12:50:57,930 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 12:50:57,931 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 12:50:57,931 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 12:50:57,947 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:57,948 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:57,970 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:57,971 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:57,986 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:57,992 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:57,997 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:58,003 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 12:50:58,004 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 12:50:58,004 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 12:50:58,006 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 12:50:58,010 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/1) ...
[2020-11-25 12:50:58,023 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(CSB.transfer(to, value), msg.sender == to && value <= balances_CSB[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:58,028 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(CSB.transfer(to, value), msg.sender == to && value <= balances_CSB[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:58,036 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(CSB.transfer(to, value), msg.sender == to && value <= balances_CSB[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:58,041 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s172 && _value_s172<=balances_CSB[this][msg.sender] ) && _value_s172>=0 ) && _value_s172<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][_to_s172]>=0 ) && balances_CSB[this][_to_s172]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_CSB[this][msg.sender]>=0 ) && balances_CSB[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[_to_s172,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 12:50:58,044 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( success_s172==true && totalSupply_CSBInterface[this]==( old(totalSupply_CSBInterface[this]) ) ) && balances_CSB[this]==( old(balances_CSB[this]) ) ) && allowed_CSB[this]==( old(allowed_CSB[this]) ) ) && name_CSB[this]==( old(name_CSB[this]) ) ) && decimals_CSB[this]==( old(decimals_CSB[this]) ) ) && symbol_CSB[this]==( old(symbol_CSB[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s172,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_CSB>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_CSBInterface,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_CSB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_CSB>]]]]]]
[2020-11-25 12:50:58,047 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(CSB.transfer(to, value), msg.sender == to && value <= balances_CSB[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][to] >= 0 && balances_CSB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_CSB[this][msg.sender] >= 0 &&  balances_CSB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(CSB.transfer(to, value), return == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this]) && balances_CSB[this] == old(balances_CSB[this]) && allowed_CSB[this] == old(allowed_CSB[this]) && name_CSB[this] == old(name_CSB[this]) && decimals_CSB[this] == old(decimals_CSB[this]) && symbol_CSB[this] == old(symbol_CSB[this]))))
[2020-11-25 12:50:58,048 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_CSB0) ==> ( <>AP(success_transfer_CSB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 12:50:58,053 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:58 PropertyContainer
[2020-11-25 12:50:58,053 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 12:50:58,054 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 12:50:58,054 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 12:50:58,054 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 12:50:58,055 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/2) ...
[2020-11-25 12:50:58,055 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 12:50:58,055 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 12:50:58,067 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:58" (2/2) ...
[2020-11-25 12:50:58,067 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 12:50:58,068 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 12:50:58,068 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 12:50:58,068 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 12:50:58,070 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/2) ...
[2020-11-25 12:50:58,123 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 12:50:58,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:50:58,123 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface
[2020-11-25 12:50:58,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface
[2020-11-25 12:50:58,123 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSBInterface
[2020-11-25 12:50:58,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSBInterface
[2020-11-25 12:50:58,123 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSBInterface
[2020-11-25 12:50:58,124 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSBInterface
[2020-11-25 12:50:58,124 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSBInterface
[2020-11-25 12:50:58,124 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface
[2020-11-25 12:50:58,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface
[2020-11-25 12:50:58,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:50:58,124 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB
[2020-11-25 12:50:58,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB
[2020-11-25 12:50:58,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB
[2020-11-25 12:50:58,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB
[2020-11-25 12:50:58,124 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:50:58,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB
[2020-11-25 12:50:58,125 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB
[2020-11-25 12:50:58,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB
[2020-11-25 12:50:58,125 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB
[2020-11-25 12:50:58,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB
[2020-11-25 12:50:58,125 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB
[2020-11-25 12:50:58,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB
[2020-11-25 12:50:58,125 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB
[2020-11-25 12:50:58,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB
[2020-11-25 12:50:58,125 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB
[2020-11-25 12:50:58,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB
[2020-11-25 12:50:58,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB
[2020-11-25 12:50:58,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB
[2020-11-25 12:50:58,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSBInterface
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_CSBInterface
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_CSB
[2020-11-25 12:50:58,126 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__success
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__success
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure CSB_CSB__fail
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:50:58,127 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__success
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_CSB__fail
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__success
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__success
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_CSB__fail
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__success
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure balances~address_CSB__fail
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__success
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure allowed~address~address_CSB__fail
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__success
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure name_CSB__fail
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__success
[2020-11-25 12:50:58,128 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_CSB__fail
[2020-11-25 12:50:58,129 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__success
[2020-11-25 12:50:58,129 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_CSB__fail
[2020-11-25 12:50:58,129 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 12:50:58,129 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 12:50:58,129 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__fail
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface_NoBaseCtor__success
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__fail
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSBInterface_CSBInterface__success
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__fail
[2020-11-25 12:50:58,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_CSBInterface__success
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__fail
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB_NoBaseCtor__success
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__fail
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure CSB_CSB__success
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__fail
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_CSB__success
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__fail
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_CSB__success
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__fail
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_CSB__success
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__fail
[2020-11-25 12:50:58,130 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_CSB__success
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__fail
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_CSB__success
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__fail
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure balances~address_CSB__success
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__fail
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowed~address~address_CSB__success
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__fail
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_CSB__success
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__fail
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_CSB__success
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__fail
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_CSB__success
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 12:50:58,131 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSBInterface
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_CSBInterface
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_CSB
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 12:50:58,132 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 12:50:58,132 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 12:50:58,435 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:50:58,436 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:50:58,436 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 12:50:58,582 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 12:50:58,582 INFO  L286             CfgBuilder]: Removed 2 assue(true) statements.
[2020-11-25 12:50:58,584 INFO  L202        PluginConnector]: Adding new model CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:58 BoogieIcfgContainer
[2020-11-25 12:50:58,584 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:58" (2/2) ...
[2020-11-25 12:50:58,584 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 12:50:58,585 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@10e9029a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:58, skipping insertion in model container
[2020-11-25 12:50:58,585 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 12:50:58,585 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 12:50:58,585 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 12:50:58,587 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 12:50:58,587 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/3) ...
[2020-11-25 12:50:58,587 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6e874203 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:58, skipping insertion in model container
[2020-11-25 12:50:58,588 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:58" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 12:50:58,621 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:58 NWAContainer
[2020-11-25 12:50:58,622 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 12:50:58,622 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 12:50:58,622 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 12:50:58,623 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 12:50:58,623 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:58" (3/4) ...
[2020-11-25 12:50:58,624 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@ea7d9bb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:58, skipping insertion in model container
[2020-11-25 12:50:58,624 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:58" (4/4) ...
[2020-11-25 12:50:58,627 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 12:50:58,630 INFO  L110   BuchiProductObserver]: Initial RCFG 790 locations, 952 edges
[2020-11-25 12:50:58,630 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 12:50:58,639 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 12:50:59,641 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 12:50:59,644 INFO  L110   BuchiProductObserver]: BuchiProgram size 1828 locations, 3058 edges
[2020-11-25 12:50:59,645 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:59 BoogieIcfgContainer
[2020-11-25 12:50:59,645 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 12:50:59,645 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 12:50:59,645 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 12:50:59,647 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 12:50:59,647 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:59" (1/1) ...
[2020-11-25 12:50:59,703 INFO  L313           BlockEncoder]: Initial Icfg 1828 locations, 3058 edges
[2020-11-25 12:50:59,703 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 12:50:59,704 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 12:50:59,704 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 12:50:59,705 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 12:50:59,714 INFO  L70    emoveInfeasibleEdges]: Removed 27 edges and 7 locations because of local infeasibility
[2020-11-25 12:50:59,719 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 12:50:59,726 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 12:50:59,728 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 12:50:59,730 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 12:50:59,731 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 12:50:59,734 INFO  L313           BlockEncoder]: Encoded RCFG 1810 locations, 3015 edges
[2020-11-25 12:50:59,734 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:50:59 BasicIcfg
[2020-11-25 12:50:59,734 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 12:50:59,735 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 12:50:59,735 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 12:50:59,737 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 12:50:59,738 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:59,738 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:50:57" (1/6) ...
[2020-11-25 12:50:59,740 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@74b965a3 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:50:59, skipping insertion in model container
[2020-11-25 12:50:59,740 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:59,740 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:50:58" (2/6) ...
[2020-11-25 12:50:59,740 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@74b965a3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:50:59, skipping insertion in model container
[2020-11-25 12:50:59,740 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:59,740 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:50:58" (3/6) ...
[2020-11-25 12:50:59,740 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@74b965a3 and model type CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:50:59, skipping insertion in model container
[2020-11-25 12:50:59,740 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:59,741 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:50:58" (4/6) ...
[2020-11-25 12:50:59,741 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@74b965a3 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:50:59, skipping insertion in model container
[2020-11-25 12:50:59,741 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:59,741 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:50:59" (5/6) ...
[2020-11-25 12:50:59,741 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@74b965a3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:50:59, skipping insertion in model container
[2020-11-25 12:50:59,741 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 12:50:59,741 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:50:59" (6/6) ...
[2020-11-25 12:50:59,742 INFO  L404   chiAutomizerObserver]: Analyzing ICFG CSB_0xc873f3b4e37390207395b540f345b1d5a25f32cf_transfer-self.bpl_BEv2
[2020-11-25 12:50:59,782 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 12:50:59,782 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 12:50:59,782 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 12:50:59,782 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 12:50:59,782 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 12:50:59,782 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 12:50:59,783 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 12:50:59,783 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 12:50:59,783 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 12:50:59,805 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1810 states.
[2020-11-25 12:50:59,849 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:59,849 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:59,849 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:59,858 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:59,859 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:59,859 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 12:50:59,859 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1810 states.
[2020-11-25 12:50:59,871 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:50:59,871 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:50:59,871 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:50:59,873 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:50:59,873 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_CSB0 := false;
[L2]                 call_transfer_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND TRUE   revert
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:50:59,893 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:50:59,894 INFO  L82        PathProgramCache]: Analyzing trace with hash 1405653005, now seen corresponding path program 1 times
[2020-11-25 12:50:59,898 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:50:59,915 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:50:59,952 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:50:59,953 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:50:59,954 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:50:59,956 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:51:00,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:51:00,062 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:51:00,063 INFO  L87              Difference]: Start difference. First operand 1810 states. Second operand 4 states.
[2020-11-25 12:51:00,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:51:00,242 INFO  L93              Difference]: Finished difference Result 1322 states and 1413 transitions.
[2020-11-25 12:51:00,242 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:51:00,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1322 states and 1413 transitions.
[2020-11-25 12:51:00,249 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:51:00,259 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1322 states to 1322 states and 1413 transitions.
[2020-11-25 12:51:00,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 12:51:00,262 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 594
[2020-11-25 12:51:00,262 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1322 states and 1413 transitions.
[2020-11-25 12:51:00,266 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:51:00,266 INFO  L728         BuchiCegarLoop]: Abstraction has 1322 states and 1413 transitions.
[2020-11-25 12:51:00,279 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1322 states and 1413 transitions.
[2020-11-25 12:51:00,310 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1322 to 1322.
[2020-11-25 12:51:00,311 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1322 states.
[2020-11-25 12:51:00,314 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1322 states to 1322 states and 1413 transitions.
[2020-11-25 12:51:00,314 INFO  L751         BuchiCegarLoop]: Abstraction has 1322 states and 1413 transitions.
[2020-11-25 12:51:00,314 INFO  L631         BuchiCegarLoop]: Abstraction has 1322 states and 1413 transitions.
[2020-11-25 12:51:00,315 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 12:51:00,315 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1322 states and 1413 transitions.
[2020-11-25 12:51:00,319 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:51:00,319 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:51:00,319 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:51:00,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:51:00,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_CSB0 := false;
[L2]                 call_transfer_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND TRUE   revert
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND TRUE   !(balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1202]              revert := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s172 == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L2]                 revert := revert_hold;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND TRUE   !(balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1202]              revert := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s172 == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L2]                 revert := revert_hold;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:51:00,324 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:51:00,325 INFO  L82        PathProgramCache]: Analyzing trace with hash -1173818621, now seen corresponding path program 1 times
[2020-11-25 12:51:00,325 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:51:00,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:51:00,353 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:51:00,353 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:51:00,353 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 12:51:00,354 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:51:00,355 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 12:51:00,355 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 12:51:00,355 INFO  L87              Difference]: Start difference. First operand 1322 states and 1413 transitions. cyclomatic complexity: 93 Second operand 4 states.
[2020-11-25 12:51:00,515 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:51:00,515 INFO  L93              Difference]: Finished difference Result 1920 states and 2173 transitions.
[2020-11-25 12:51:00,515 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 12:51:00,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1920 states and 2173 transitions.
[2020-11-25 12:51:00,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 12:51:00,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1920 states to 1900 states and 2153 transitions.
[2020-11-25 12:51:00,534 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 883
[2020-11-25 12:51:00,534 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 883
[2020-11-25 12:51:00,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1900 states and 2153 transitions.
[2020-11-25 12:51:00,537 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:51:00,538 INFO  L728         BuchiCegarLoop]: Abstraction has 1900 states and 2153 transitions.
[2020-11-25 12:51:00,539 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1900 states and 2153 transitions.
[2020-11-25 12:51:00,554 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1900 to 1318.
[2020-11-25 12:51:00,554 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1318 states.
[2020-11-25 12:51:00,556 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1318 states to 1318 states and 1399 transitions.
[2020-11-25 12:51:00,556 INFO  L751         BuchiCegarLoop]: Abstraction has 1318 states and 1399 transitions.
[2020-11-25 12:51:00,557 INFO  L631         BuchiCegarLoop]: Abstraction has 1318 states and 1399 transitions.
[2020-11-25 12:51:00,557 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 12:51:00,557 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1318 states and 1399 transitions.
[2020-11-25 12:51:00,560 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:51:00,560 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:51:00,560 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:51:00,562 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:51:00,562 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_CSB0 := false;
[L2]                 call_transfer_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s172 == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L2]                 revert := revert_hold;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s172 == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L2]                 revert := revert_hold;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:51:00,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:51:00,565 INFO  L82        PathProgramCache]: Analyzing trace with hash -157360342, now seen corresponding path program 1 times
[2020-11-25 12:51:00,566 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:51:00,611 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:51:01,004 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:51:01,005 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:51:01,005 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 12:51:01,005 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:51:01,005 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 12:51:01,006 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=264, Unknown=0, NotChecked=0, Total=306
[2020-11-25 12:51:01,006 INFO  L87              Difference]: Start difference. First operand 1318 states and 1399 transitions. cyclomatic complexity: 83 Second operand 18 states.
[2020-11-25 12:51:02,941 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:51:02,941 INFO  L93              Difference]: Finished difference Result 1431 states and 1542 transitions.
[2020-11-25 12:51:02,942 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 12:51:02,943 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1431 states and 1542 transitions.
[2020-11-25 12:51:02,950 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 12:51:02,964 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1431 states to 1431 states and 1542 transitions.
[2020-11-25 12:51:02,964 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 645
[2020-11-25 12:51:02,967 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 645
[2020-11-25 12:51:02,967 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1431 states and 1542 transitions.
[2020-11-25 12:51:02,972 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:51:02,972 INFO  L728         BuchiCegarLoop]: Abstraction has 1431 states and 1542 transitions.
[2020-11-25 12:51:02,976 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1431 states and 1542 transitions.
[2020-11-25 12:51:02,996 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1431 to 1397.
[2020-11-25 12:51:02,996 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1397 states.
[2020-11-25 12:51:03,000 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1397 states to 1397 states and 1491 transitions.
[2020-11-25 12:51:03,000 INFO  L751         BuchiCegarLoop]: Abstraction has 1397 states and 1491 transitions.
[2020-11-25 12:51:03,000 INFO  L631         BuchiCegarLoop]: Abstraction has 1397 states and 1491 transitions.
[2020-11-25 12:51:03,000 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 12:51:03,000 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1397 states and 1491 transitions.
[2020-11-25 12:51:03,004 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:51:03,005 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:51:03,005 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:51:03,006 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:51:03,006 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_CSB0 := false;
[L2]                 call_transfer_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND TRUE   __exception
[L260]               __tmp__Balance := Balance;
[L261]               __tmp__DType := DType;
[L262]               __tmp__Alloc := Alloc;
[L263]               __tmp__balance_ADDR := balance_ADDR;
[L264]               __tmp__M_Ref_int := M_Ref_int;
[L265]               __tmp__sum_balances0 := sum_balances0;
[L266]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L267]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L268]               __tmp__sum_allowed1 := sum_allowed1;
[L269]               __tmp__Length := Length;
[L270]               __tmp__now := now;
[L271]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L272]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L273]               __tmp__balances_CSB := balances_CSB;
[L274]               __tmp__allowed_CSB := allowed_CSB;
[L275]               __tmp__name_CSB := name_CSB;
[L276]               __tmp__decimals_CSB := decimals_CSB;
[L277]               __tmp__symbol_CSB := symbol_CSB;
[L278]   CALL        call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1185]  COND TRUE   !(__tmp__balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1186]              revert := true;
[L278]   RET         call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L279]               assume revert || gas < 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND TRUE   __exception
[L260]               __tmp__Balance := Balance;
[L261]               __tmp__DType := DType;
[L262]               __tmp__Alloc := Alloc;
[L263]               __tmp__balance_ADDR := balance_ADDR;
[L264]               __tmp__M_Ref_int := M_Ref_int;
[L265]               __tmp__sum_balances0 := sum_balances0;
[L266]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L267]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L268]               __tmp__sum_allowed1 := sum_allowed1;
[L269]               __tmp__Length := Length;
[L270]               __tmp__now := now;
[L271]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L272]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L273]               __tmp__balances_CSB := balances_CSB;
[L274]               __tmp__allowed_CSB := allowed_CSB;
[L275]               __tmp__name_CSB := name_CSB;
[L276]               __tmp__decimals_CSB := decimals_CSB;
[L277]               __tmp__symbol_CSB := symbol_CSB;
[L278]   CALL        call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1185]  COND TRUE   !(__tmp__balances_CSB[this][msgsender_MSG] >= _value_s172)
[L1186]              revert := true;
[L278]   RET         call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L279]               assume revert || gas < 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:51:03,010 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:51:03,010 INFO  L82        PathProgramCache]: Analyzing trace with hash -1228172141, now seen corresponding path program 1 times
[2020-11-25 12:51:03,011 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:51:03,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:51:03,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:51:03,061 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:51:03,061 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:51:03,061 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:51:03,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:51:03,062 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:51:03,062 INFO  L87              Difference]: Start difference. First operand 1397 states and 1491 transitions. cyclomatic complexity: 98 Second operand 6 states.
[2020-11-25 12:51:03,324 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:51:03,324 INFO  L93              Difference]: Finished difference Result 1492 states and 1603 transitions.
[2020-11-25 12:51:03,324 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 12:51:03,324 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1492 states and 1603 transitions.
[2020-11-25 12:51:03,329 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 12:51:03,334 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1492 states to 1492 states and 1603 transitions.
[2020-11-25 12:51:03,334 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 12:51:03,334 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 12:51:03,334 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1492 states and 1603 transitions.
[2020-11-25 12:51:03,336 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:51:03,336 INFO  L728         BuchiCegarLoop]: Abstraction has 1492 states and 1603 transitions.
[2020-11-25 12:51:03,337 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1492 states and 1603 transitions.
[2020-11-25 12:51:03,348 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1492 to 1449.
[2020-11-25 12:51:03,348 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1449 states.
[2020-11-25 12:51:03,350 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1449 states to 1449 states and 1545 transitions.
[2020-11-25 12:51:03,350 INFO  L751         BuchiCegarLoop]: Abstraction has 1449 states and 1545 transitions.
[2020-11-25 12:51:03,350 INFO  L631         BuchiCegarLoop]: Abstraction has 1449 states and 1545 transitions.
[2020-11-25 12:51:03,350 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 12:51:03,350 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1449 states and 1545 transitions.
[2020-11-25 12:51:03,353 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:51:03,353 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:51:03,353 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:51:03,354 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:51:03,354 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_CSB0 := false;
[L2]                 call_transfer_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND TRUE   __exception
[L260]               __tmp__Balance := Balance;
[L261]               __tmp__DType := DType;
[L262]               __tmp__Alloc := Alloc;
[L263]               __tmp__balance_ADDR := balance_ADDR;
[L264]               __tmp__M_Ref_int := M_Ref_int;
[L265]               __tmp__sum_balances0 := sum_balances0;
[L266]               __tmp__alloc_allowed_CSB_lvl0 := alloc_allowed_CSB_lvl0;
[L267]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L268]               __tmp__sum_allowed1 := sum_allowed1;
[L269]               __tmp__Length := Length;
[L270]               __tmp__now := now;
[L271]               __tmp__totalSupply_CSBInterface := totalSupply_CSBInterface;
[L272]               __tmp__MAX_UINT256_CSB := MAX_UINT256_CSB;
[L273]               __tmp__balances_CSB := balances_CSB;
[L274]               __tmp__allowed_CSB := allowed_CSB;
[L275]               __tmp__name_CSB := name_CSB;
[L276]               __tmp__decimals_CSB := decimals_CSB;
[L277]               __tmp__symbol_CSB := symbol_CSB;
[L278]   CALL        call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1185]  COND FALSE  !(!(__tmp__balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1189]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][msgsender_MSG];
[L1190]              __tmp__balances_CSB[this][msgsender_MSG] := (__tmp__balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1191]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][msgsender_MSG];
[L1192]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_CSB[this][_to_s172];
[L1193]              __tmp__balances_CSB[this][_to_s172] := (__tmp__balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1194]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_CSB[this][_to_s172];
[L1195]              success_s172 := true;
[L278]   RET         call success_s172 := transfer~address~uint256_CSB__fail(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L279]               assume revert || gas < 0;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:51:03,356 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:51:03,356 INFO  L82        PathProgramCache]: Analyzing trace with hash -1043807180, now seen corresponding path program 1 times
[2020-11-25 12:51:03,357 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:51:03,377 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:51:03,403 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:51:03,403 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:51:03,403 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 12:51:03,404 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:51:03,404 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 12:51:03,404 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 12:51:03,404 INFO  L87              Difference]: Start difference. First operand 1449 states and 1545 transitions. cyclomatic complexity: 100 Second operand 6 states.
[2020-11-25 12:51:03,523 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:51:03,523 INFO  L93              Difference]: Finished difference Result 1868 states and 2066 transitions.
[2020-11-25 12:51:03,523 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 12:51:03,523 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1868 states and 2066 transitions.
[2020-11-25 12:51:03,529 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 12:51:03,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1868 states to 1254 states and 1447 transitions.
[2020-11-25 12:51:03,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 587
[2020-11-25 12:51:03,533 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 587
[2020-11-25 12:51:03,533 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1254 states and 1447 transitions.
[2020-11-25 12:51:03,535 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:51:03,535 INFO  L728         BuchiCegarLoop]: Abstraction has 1254 states and 1447 transitions.
[2020-11-25 12:51:03,535 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1254 states and 1447 transitions.
[2020-11-25 12:51:03,543 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1254 to 806.
[2020-11-25 12:51:03,543 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 806 states.
[2020-11-25 12:51:03,545 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 806 states to 806 states and 867 transitions.
[2020-11-25 12:51:03,545 INFO  L751         BuchiCegarLoop]: Abstraction has 806 states and 867 transitions.
[2020-11-25 12:51:03,545 INFO  L631         BuchiCegarLoop]: Abstraction has 806 states and 867 transitions.
[2020-11-25 12:51:03,545 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 12:51:03,545 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 806 states and 867 transitions.
[2020-11-25 12:51:03,547 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 12:51:03,547 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:51:03,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:51:03,548 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:51:03,549 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_CSB0 := false;
[L2]                 call_transfer_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s172 == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L2]                 revert := revert_hold;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND TRUE   choice == 11
[L2122]              gas := gas - 21000;
[L2123]  COND FALSE  !(gas >= 0)
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:51:03,552 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:51:03,552 INFO  L82        PathProgramCache]: Analyzing trace with hash -936195274, now seen corresponding path program 1 times
[2020-11-25 12:51:03,552 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:51:03,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:51:03,623 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 1 proven. 45 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 12:51:03,623 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 12:51:03,623 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 12:51:03,623 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:51:03,623 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 12:51:03,624 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 12:51:03,624 INFO  L87              Difference]: Start difference. First operand 806 states and 867 transitions. cyclomatic complexity: 64 Second operand 12 states.
[2020-11-25 12:51:03,904 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:51:03,905 INFO  L93              Difference]: Finished difference Result 843 states and 920 transitions.
[2020-11-25 12:51:03,905 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 12:51:03,905 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 843 states and 920 transitions.
[2020-11-25 12:51:03,907 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:51:03,909 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 843 states to 843 states and 920 transitions.
[2020-11-25 12:51:03,909 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 380
[2020-11-25 12:51:03,909 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 380
[2020-11-25 12:51:03,909 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 843 states and 920 transitions.
[2020-11-25 12:51:03,910 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:51:03,910 INFO  L728         BuchiCegarLoop]: Abstraction has 843 states and 920 transitions.
[2020-11-25 12:51:03,911 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 843 states and 920 transitions.
[2020-11-25 12:51:03,916 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 843 to 843.
[2020-11-25 12:51:03,916 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 843 states.
[2020-11-25 12:51:03,917 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 843 states to 843 states and 920 transitions.
[2020-11-25 12:51:03,917 INFO  L751         BuchiCegarLoop]: Abstraction has 843 states and 920 transitions.
[2020-11-25 12:51:03,917 INFO  L631         BuchiCegarLoop]: Abstraction has 843 states and 920 transitions.
[2020-11-25 12:51:03,917 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 12:51:03,917 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 843 states and 920 transitions.
[2020-11-25 12:51:03,919 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 12:51:03,919 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 12:51:03,919 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 12:51:03,919 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 12:51:03,920 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_CSB0 := false;
[L2]                 call_transfer_CSB0 := false;
[L2]     CALL        call main();
[L2202]              assume null == 0;
[L2203]  CALL        call this := FreshRefGenerator__success();
[L1061]              havoc newRef;
[L1062]              assume Alloc[newRef] == false;
[L1063]              Alloc[newRef] := true;
[L1064]              assume newRef != null;
[L2203]  RET         call this := FreshRefGenerator__success();
[L2204]              assume now >= 0;
[L2205]              assume DType[this] == CSB;
[L2206]              assume msgvalue_MSG == 0;
[L2207]              gas := gas - 53000;
[L2208]  CALL        call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L203]               havoc __exception;
[L204]               revert := false;
[L205]   COND FALSE  !(__exception)
[L227]   CALL        call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1173]  CALL        call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1095]  CALL        call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1079]              assume msgsender_MSG != null;
[L1080]              Balance[this] := 0;
[L1081]              totalSupply_CSBInterface[this] := 0;
[L1095]  RET         call CSBInterface_CSBInterface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1096]  COND FALSE  !(revert)
[L1173]  RET         call CSBInterface_CSBInterface__success(this, msgsender_MSG, msgvalue_MSG);
[L1174]  COND FALSE  !(revert)
[L1177]  CALL        call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1139]              assume msgsender_MSG != null;
[L1140]              Balance[this] := 0;
[L1141]              MAX_UINT256_CSB[this] := 115792089237316195423570985008687907853269984665640564039457584007913129639936 - 1;
[L1142]              balances_CSB[this] := zeroRefintArr();
[L1143]              sum_balances0[this] := 0;
[L1144]              allowed_CSB[this] := zeroRefRefintArr();
[L1145]              sum_allowed1[this] := 0;
[L1146]              name_CSB[this] := 265230608;
[L1147]              decimals_CSB[this] := 0;
[L1148]              symbol_CSB[this] := 265230608;
[L1150]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1151]              balances_CSB[this][msgsender_MSG] := _initialAmount_s131;
[L1152]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1153]              totalSupply_CSBInterface[this] := _initialAmount_s131;
[L1154]              name_CSB[this] := _tokenName_s131;
[L1155]              decimals_CSB[this] := _decimalUnits_s131;
[L1156]              symbol_CSB[this] := _tokenSymbol_s131;
[L1177]  RET         call CSB_CSB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L1178]  COND FALSE  !(revert)
[L227]   RET         call CSB_CSB__success(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L228]               assume !revert && gas >= 0;
[L2208]  RET         call CSB_CSB(this, msgsender_MSG, msgvalue_MSG, _initialAmount_s131, _tokenName_s131, _decimalUnits_s131, _tokenSymbol_s131);
[L2209]              assume !revert && gas >= 0;
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND TRUE   allowance_s239 < MAX_UINT256_CSB[this]
[L1254]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] - allowed_CSB[this][_from_s239][msgsender_MSG];
[L1255]              allowed_CSB[this][_from_s239][msgsender_MSG] := (allowed_CSB[this][_from_s239][msgsender_MSG] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1256]              sum_allowed1[_from_s239] := sum_allowed1[_from_s239] + allowed_CSB[this][_from_s239][msgsender_MSG];
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND TRUE   choice == 9
[L2134]              gas := gas - 21000;
[L2135]  COND TRUE   gas >= 0
[L2136]              assume _value_s172 >= 0 && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2137]              assume msgvalue_MSG == 0;
[L2138]  CALL        call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s172 && _value_s172 <= balances_CSB[this][msgsender_MSG]) && _value_s172 >= 0) && _value_s172 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][_to_s172] >= 0) && balances_CSB[this][_to_s172] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_CSB[this][msgsender_MSG] >= 0) && balances_CSB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_CSB0 := true;
[L2]                 call_transfer_CSB0 := false;
[L2]                 revert := revert_hold;
[L257]               havoc __exception;
[L258]               revert := false;
[L259]   COND FALSE  !(__exception)
[L281]   CALL        call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L1201]  COND FALSE  !(!(balances_CSB[this][msgsender_MSG] >= _value_s172))
[L1205]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][msgsender_MSG];
[L1206]              balances_CSB[this][msgsender_MSG] := (balances_CSB[this][msgsender_MSG] - _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1207]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][msgsender_MSG];
[L1208]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s172];
[L1209]              balances_CSB[this][_to_s172] := (balances_CSB[this][_to_s172] + _value_s172) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1210]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s172];
[L1211]              assert { :EventEmitted "Transfer_CSB" } true;
[L1212]              success_s172 := true;
[L281]   RET         call success_s172 := transfer~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L282]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((success_s172 == true && totalSupply_CSBInterface[this] == old(totalSupply_CSBInterface[this])) && balances_CSB[this] == old(balances_CSB[this])) && allowed_CSB[this] == old(allowed_CSB[this])) && name_CSB[this] == old(name_CSB[this])) && decimals_CSB[this] == old(decimals_CSB[this])) && symbol_CSB[this] == old(symbol_CSB[this]));
[L2]                 revert := revert_hold;
[L2138]  RET         call success_s172 := transfer~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _to_s172, _value_s172);
[L2212]  RET         call CorralChoice_CSB(this);

Loop:
[L2212]  CALL        call CorralChoice_CSB(this);
[L2080]              havoc msgsender_MSG;
[L2081]              havoc msgvalue_MSG;
[L2082]              havoc choice;
[L2083]              havoc __ret_0_totalSupply;
[L2084]              havoc _owner_s251;
[L2085]              havoc balance_s251;
[L2086]              havoc _to_s172;
[L2087]              havoc _value_s172;
[L2088]              havoc success_s172;
[L2089]              havoc _from_s239;
[L2090]              havoc _to_s239;
[L2091]              havoc _value_s239;
[L2092]              havoc success_s239;
[L2093]              havoc _spender_s279;
[L2094]              havoc _value_s279;
[L2095]              havoc success_s279;
[L2096]              havoc _owner_s295;
[L2097]              havoc _spender_s295;
[L2098]              havoc remaining_s295;
[L2099]              havoc arg298_s0;
[L2100]              havoc __ret_0_balances;
[L2101]              havoc arg299_s0;
[L2102]              havoc arg300_s0;
[L2103]              havoc __ret_0_allowed;
[L2104]              havoc __ret_0_name;
[L2105]              havoc __ret_0_decimals;
[L2106]              havoc __ret_0_symbol;
[L2107]              havoc _initialAmount_s131;
[L2108]              havoc _tokenName_s131;
[L2109]              havoc _decimalUnits_s131;
[L2110]              havoc _tokenSymbol_s131;
[L2111]              havoc tmpNow;
[L2112]              havoc gas;
[L2113]              assume gas > 4000000 && gas <= 8000000;
[L2114]              tmpNow := now;
[L2115]              havoc now;
[L2116]              assume now > tmpNow;
[L2117]              assume msgsender_MSG != null;
[L2118]              assume DType[msgsender_MSG] != CSBInterface;
[L2119]              assume DType[msgsender_MSG] != CSB;
[L2120]              Alloc[msgsender_MSG] := true;
[L2121]  COND FALSE  !(choice == 11)
[L2127]  COND FALSE  !(choice == 10)
[L2133]  COND FALSE  !(choice == 9)
[L2140]  COND TRUE   choice == 8
[L2141]              gas := gas - 21000;
[L2142]  COND TRUE   gas >= 0
[L2143]              assume _value_s239 >= 0 && _value_s239 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2144]              assume msgvalue_MSG == 0;
[L2145]  CALL        call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L313]               havoc __exception;
[L314]               revert := false;
[L315]   COND FALSE  !(__exception)
[L337]   CALL        call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L1242]              allowance_s239 := allowed_CSB[this][_from_s239][msgsender_MSG];
[L1243]  COND FALSE  !(!(balances_CSB[this][_from_s239] >= _value_s239 && allowance_s239 >= _value_s239))
[L1247]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_to_s239];
[L1248]              balances_CSB[this][_to_s239] := (balances_CSB[this][_to_s239] + _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1249]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_to_s239];
[L1250]              sum_balances0[this] := sum_balances0[this] - balances_CSB[this][_from_s239];
[L1251]              balances_CSB[this][_from_s239] := (balances_CSB[this][_from_s239] - _value_s239) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1252]              sum_balances0[this] := sum_balances0[this] + balances_CSB[this][_from_s239];
[L1253]  COND FALSE  !(allowance_s239 < MAX_UINT256_CSB[this])
[L1258]              assert { :EventEmitted "Transfer_CSB" } true;
[L1259]              success_s239 := true;
[L337]   RET         call success_s239 := transferFrom~address~address~uint256_CSB__success(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L338]               assume !revert && gas >= 0;
[L2145]  RET         call success_s239 := transferFrom~address~address~uint256_CSB(this, msgsender_MSG, msgvalue_MSG, _from_s239, _to_s239, _value_s239);
[L2212]  RET         call CorralChoice_CSB(this);

[2020-11-25 12:51:03,922 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 12:51:03,923 INFO  L82        PathProgramCache]: Analyzing trace with hash -815564284, now seen corresponding path program 1 times
[2020-11-25 12:51:03,923 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 12:51:03,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 12:51:04,075 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 45 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 12:51:04,075 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 12:51:04,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 12:51:04,076 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 12:51:04,076 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 12:51:04,076 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=66, Unknown=0, NotChecked=0, Total=90
[2020-11-25 12:51:04,076 INFO  L87              Difference]: Start difference. First operand 843 states and 920 transitions. cyclomatic complexity: 83 Second operand 10 states.
[2020-11-25 12:51:04,313 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 12:51:04,313 INFO  L93              Difference]: Finished difference Result 483 states and 524 transitions.
[2020-11-25 12:51:04,313 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 12:51:04,313 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 483 states and 524 transitions.
[2020-11-25 12:51:04,314 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:51:04,314 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 483 states to 0 states and 0 transitions.
[2020-11-25 12:51:04,314 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 12:51:04,314 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 12:51:04,314 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 12:51:04,314 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 12:51:04,314 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:51:04,314 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:51:04,314 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 12:51:04,314 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 12:51:04,314 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 12:51:04,315 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 12:51:04,315 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 12:51:04,318 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:51:04 BasicIcfg
[2020-11-25 12:51:04,318 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 12:51:04,318 INFO  L168              Benchmark]: Toolchain (without parser) took 6388.58 ms. Allocated memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: 485.5 MB). Free memory was 940.6 MB in the beginning and 1.4 GB in the end (delta: -442.8 MB). Peak memory consumption was 42.7 MB. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,319 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,320 INFO  L168              Benchmark]: Boogie Preprocessor took 73.25 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,320 INFO  L168              Benchmark]: UtopiaSpecLang took 49.46 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,320 INFO  L168              Benchmark]: Boogie Printer took 13.93 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,320 INFO  L168              Benchmark]: RCFGBuilder took 517.06 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,321 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.40 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,321 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1023.02 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 867.2 MB in the beginning and 882.2 MB in the end (delta: -15.0 MB). Peak memory consumption was 151.8 MB. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,321 INFO  L168              Benchmark]: BlockEncodingV2 took 89.42 ms. Allocated memory is still 1.1 GB. Free memory was 882.2 MB in the beginning and 847.7 MB in the end (delta: 34.5 MB). Peak memory consumption was 34.5 MB. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,322 INFO  L168              Benchmark]: BuchiAutomizer took 4582.78 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 428.9 MB). Free memory was 847.7 MB in the beginning and 1.4 GB in the end (delta: -535.6 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 12:51:04,324 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    1828 locations, 3058 edges
  - StatisticsResult: Encoded RCFG
    1810 locations, 3015 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 73.25 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 935.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 49.46 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.93 ms. Allocated memory is still 1.0 GB. Free memory is still 929.8 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 517.06 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 870.8 MB in the end (delta: 59.1 MB). Peak memory consumption was 59.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.40 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 867.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1023.02 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 56.6 MB). Free memory was 867.2 MB in the beginning and 882.2 MB in the end (delta: -15.0 MB). Peak memory consumption was 151.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 89.42 ms. Allocated memory is still 1.1 GB. Free memory was 882.2 MB in the beginning and 847.7 MB in the end (delta: 34.5 MB). Peak memory consumption was 34.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 4582.78 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 428.9 MB). Free memory was 847.7 MB in the beginning and 1.4 GB in the end (delta: -535.6 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    790 locations, 952 edges
  - StatisticsResult: BuchiProgram size
    1828 locations, 3058 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 4.5s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 0.8s. Construction of modules took 2.4s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 1107 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.0s Buchi closure took 0.0s. Biggest automaton had 1449 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 8816 SDtfs, 9657 SDslu, 19625 SDs, 0 SdLazy, 21162 SolverSat, 1654 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 2.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_CS(success_transfer_CSB0)0) ==> ( <>(success_transfer_CSB0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
