This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:20:03,977 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:20:03,978 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:20:03,991 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:20:03,991 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:20:03,992 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:20:03,993 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:20:03,995 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:20:03,996 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:20:03,997 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:20:03,998 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:20:03,998 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:20:03,999 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:20:04,000 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:20:04,001 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:20:04,001 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:20:04,002 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:20:04,003 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:20:04,004 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:20:04,006 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:20:04,006 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:20:04,007 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:20:04,009 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:20:04,009 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:20:04,009 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:20:04,010 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:20:04,010 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:20:04,011 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:20:04,011 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:20:04,011 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:20:04,012 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:20:04,012 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:20:04,013 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:20:04,013 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:20:04,014 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:20:04,014 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:20:04,014 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:20:04,015 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:20:04,015 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:20:04,015 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:20:04,016 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:20:04,016 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:20:04,026 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:20:04,027 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:20:04,028 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:20:04,028 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:20:04,029 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:20:04,029 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:20:04,029 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:20:04,029 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:20:04,029 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:20:04,030 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:20:04,030 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:20:04,030 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:20:04,030 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:20:04,031 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:20:04,031 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:20:04,031 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:20:04,031 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:20:04,031 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:20:04,032 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:20:04,032 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:20:04,032 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:20:04,032 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:20:04,032 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:20:04,032 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:20:04,032 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:20:04,032 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:20:04,061 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:20:04,075 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:20:04,078 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:20:04,079 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:20:04,080 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:20:04,080 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl
[2020-11-25 17:20:04,081 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl'
[2020-11-25 17:20:04,170 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:20:04,171 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:20:04,171 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:20:04,172 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:20:04,172 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:20:04,189 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,191 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,228 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,229 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,251 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,263 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,272 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,282 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:20:04,283 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:20:04,283 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:20:04,285 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:20:04,289 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/1) ...
[2020-11-25 17:20:04,316 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:20:04,322 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:20:04,330 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:20:04,339 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s202 && _value_s202<=balances_BasicToken[this][msg.sender] ) && _value_s202>=0 ) && _value_s202<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s202]>=0 ) && balances_BasicToken[this][_to_s202]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IdentifierExpression[_to_s202,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s202,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s202,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s202,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s202,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[_to_s202,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:20:04,343 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( __ret_0_==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_BasicToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BasicToken>]]]]]]
[2020-11-25 17:20:04,350 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:20:04,350 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BasicToken0) ==> ( <>AP(success_transfer_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:20:04,361 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:20:04 PropertyContainer
[2020-11-25 17:20:04,361 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:20:04,362 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:20:04,362 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:20:04,362 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:20:04,363 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/2) ...
[2020-11-25 17:20:04,363 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:20:04,363 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:20:04,380 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:20:04" (2/2) ...
[2020-11-25 17:20:04,380 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:20:04,380 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:20:04,380 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:20:04,380 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:20:04,381 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/2) ...
[2020-11-25 17:20:04,434 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:20:04,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:20:04,435 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:20:04,435 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,436 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,436 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,436 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,436 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:20:04,436 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 17:20:04,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 17:20:04,436 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 17:20:04,436 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:20:04,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 17:20:04,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-25 17:20:04,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-25 17:20:04,437 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:20:04,437 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 17:20:04,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 17:20:04,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:20:04,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 17:20:04,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 17:20:04,438 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 17:20:04,438 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:20:04,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:20:04,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 17:20:04,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 17:20:04,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 17:20:04,439 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success
[2020-11-25 17:20:04,439 INFO  L130     BoogieDeclarations]: Found specification of procedure GokuMarketCredit_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure GokuMarketCredit_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_GokuMarketCredit
[2020-11-25 17:20:04,440 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:20:04,440 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-25 17:20:04,441 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_GokuMarketCredit
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:20:04,442 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:20:04,443 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-25 17:20:04,444 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 17:20:04,445 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:20:04,446 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure GokuMarketCredit_GokuMarketCredit_NoBaseCtor__fail
[2020-11-25 17:20:04,447 INFO  L130     BoogieDeclarations]: Found specification of procedure GokuMarketCredit_GokuMarketCredit__success
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure GokuMarketCredit_GokuMarketCredit__fail
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GokuMarketCredit__success
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_GokuMarketCredit__fail
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GokuMarketCredit__success
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure name_GokuMarketCredit__fail
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GokuMarketCredit__success
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_GokuMarketCredit__fail
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GokuMarketCredit__success
[2020-11-25 17:20:04,448 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_GokuMarketCredit__fail
[2020-11-25 17:20:04,449 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_GokuMarketCredit__success
[2020-11-25 17:20:04,449 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_GokuMarketCredit__fail
[2020-11-25 17:20:04,449 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:20:04,449 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:20:04,449 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:20:04,449 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 17:20:04,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:20:04,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:20:04,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:20:04,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:20:04,449 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,450 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:20:04,451 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:20:04,452 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:20:04,453 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:20:04,454 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure GokuMarketCredit_GokuMarketCredit_NoBaseCtor__fail
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure GokuMarketCredit_GokuMarketCredit__fail
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure GokuMarketCredit_GokuMarketCredit__success
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GokuMarketCredit__fail
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_GokuMarketCredit__success
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GokuMarketCredit__fail
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_GokuMarketCredit__success
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GokuMarketCredit__fail
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_GokuMarketCredit__success
[2020-11-25 17:20:04,455 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GokuMarketCredit__fail
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_GokuMarketCredit__success
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_GokuMarketCredit__fail
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_GokuMarketCredit__success
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 17:20:04,456 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 17:20:04,457 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 17:20:04,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 17:20:04,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_GokuMarketCredit
[2020-11-25 17:20:04,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:20:04,458 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:20:04,458 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:20:04,931 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:20:04,931 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:20:04,932 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:20:05,231 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:20:05,231 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 17:20:05,234 INFO  L202        PluginConnector]: Adding new model GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:20:05 BoogieIcfgContainer
[2020-11-25 17:20:05,234 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:20:04" (2/2) ...
[2020-11-25 17:20:05,234 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:20:05,234 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@514c4b54 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:20:05, skipping insertion in model container
[2020-11-25 17:20:05,234 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:20:05,234 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:20:05,235 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:20:05,236 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:20:05,236 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/3) ...
[2020-11-25 17:20:05,237 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@e722c9a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:20:05, skipping insertion in model container
[2020-11-25 17:20:05,237 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:20:04" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:20:05,275 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:20:05 NWAContainer
[2020-11-25 17:20:05,275 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:20:05,275 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:20:05,275 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:20:05,276 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:20:05,277 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:20:05" (3/4) ...
[2020-11-25 17:20:05,278 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4f965f6a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:20:05, skipping insertion in model container
[2020-11-25 17:20:05,278 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:20:05" (4/4) ...
[2020-11-25 17:20:05,281 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:20:05,285 INFO  L110   BuchiProductObserver]: Initial RCFG 1779 locations, 2378 edges
[2020-11-25 17:20:05,285 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:20:05,296 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:20:06,877 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:20:06,883 INFO  L110   BuchiProductObserver]: BuchiProgram size 4392 locations, 7797 edges
[2020-11-25 17:20:06,883 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:20:06 BoogieIcfgContainer
[2020-11-25 17:20:06,883 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:20:06,883 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:20:06,883 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:20:06,885 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:20:06,885 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:20:06" (1/1) ...
[2020-11-25 17:20:06,991 INFO  L313           BlockEncoder]: Initial Icfg 4392 locations, 7797 edges
[2020-11-25 17:20:06,991 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:20:06,991 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:20:06,992 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:20:06,992 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:20:07,003 INFO  L70    emoveInfeasibleEdges]: Removed 96 edges and 19 locations because of local infeasibility
[2020-11-25 17:20:07,015 INFO  L70        RemoveSinkStates]: Removed 20 edges and 13 locations by removing sink states
[2020-11-25 17:20:07,024 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:20:07,028 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:20:07,030 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:20:07,031 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:20:07,035 INFO  L313           BlockEncoder]: Encoded RCFG 4328 locations, 7634 edges
[2020-11-25 17:20:07,036 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:20:07 BasicIcfg
[2020-11-25 17:20:07,036 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:20:07,036 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:20:07,036 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:20:07,038 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:20:07,039 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:20:07,039 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:20:04" (1/6) ...
[2020-11-25 17:20:07,040 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@767853bc and model type GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:20:07, skipping insertion in model container
[2020-11-25 17:20:07,041 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:20:07,041 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:20:04" (2/6) ...
[2020-11-25 17:20:07,041 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@767853bc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:20:07, skipping insertion in model container
[2020-11-25 17:20:07,041 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:20:07,041 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:20:05" (3/6) ...
[2020-11-25 17:20:07,041 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@767853bc and model type GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:20:07, skipping insertion in model container
[2020-11-25 17:20:07,042 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:20:07,042 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:20:05" (4/6) ...
[2020-11-25 17:20:07,042 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@767853bc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:20:07, skipping insertion in model container
[2020-11-25 17:20:07,042 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:20:07,042 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:20:06" (5/6) ...
[2020-11-25 17:20:07,042 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@767853bc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:20:07, skipping insertion in model container
[2020-11-25 17:20:07,043 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:20:07,043 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:20:07" (6/6) ...
[2020-11-25 17:20:07,044 INFO  L404   chiAutomizerObserver]: Analyzing ICFG GokuMarketCredit_0xa6272359bc37f61AF398071B65C8934ACA744d53_transfer-self.bpl_BEv2
[2020-11-25 17:20:07,077 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:20:07,077 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:20:07,077 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:20:07,077 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:20:07,078 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:20:07,078 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:20:07,078 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:20:07,078 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:20:07,078 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:20:07,129 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4328 states.
[2020-11-25 17:20:07,188 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:07,188 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:07,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:07,198 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:07,198 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:07,198 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:20:07,198 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4328 states.
[2020-11-25 17:20:07,225 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:07,225 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:07,226 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:07,228 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:07,228 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND TRUE   revert
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND TRUE   choice == 16
[L4893]              gas := gas - 21000;
[L4894]  COND FALSE  !(gas >= 0)
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:07,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:07,246 INFO  L82        PathProgramCache]: Analyzing trace with hash 2077248535, now seen corresponding path program 1 times
[2020-11-25 17:20:07,251 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:07,273 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:20:07,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:20:07,348 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:20:07,348 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:20:07,586 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:20:07,599 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:20:07,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:20:07,601 INFO  L87              Difference]: Start difference. First operand 4328 states. Second operand 3 states.
[2020-11-25 17:20:07,785 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:20:07,785 INFO  L93              Difference]: Finished difference Result 2557 states and 2914 transitions.
[2020-11-25 17:20:07,785 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:20:07,786 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2557 states and 2914 transitions.
[2020-11-25 17:20:07,801 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:07,820 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2557 states to 2553 states and 2906 transitions.
[2020-11-25 17:20:07,821 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 17:20:07,823 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 652
[2020-11-25 17:20:07,823 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2553 states and 2906 transitions.
[2020-11-25 17:20:07,831 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:20:07,831 INFO  L728         BuchiCegarLoop]: Abstraction has 2553 states and 2906 transitions.
[2020-11-25 17:20:07,850 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2553 states and 2906 transitions.
[2020-11-25 17:20:07,898 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2553 to 2553.
[2020-11-25 17:20:07,898 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2553 states.
[2020-11-25 17:20:07,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2553 states to 2553 states and 2906 transitions.
[2020-11-25 17:20:07,904 INFO  L751         BuchiCegarLoop]: Abstraction has 2553 states and 2906 transitions.
[2020-11-25 17:20:07,905 INFO  L631         BuchiCegarLoop]: Abstraction has 2553 states and 2906 transitions.
[2020-11-25 17:20:07,905 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:20:07,905 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2553 states and 2906 transitions.
[2020-11-25 17:20:07,912 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:07,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:07,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:07,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:07,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND TRUE   revert
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND TRUE   !(_value_s202 <= balances_BasicToken[this][msgsender_MSG])
[L2303]              revert := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND TRUE   !(_value_s202 <= balances_BasicToken[this][msgsender_MSG])
[L2303]              revert := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:07,920 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:07,920 INFO  L82        PathProgramCache]: Analyzing trace with hash -486985175, now seen corresponding path program 1 times
[2020-11-25 17:20:07,921 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:07,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:20:07,956 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:20:07,956 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:20:07,956 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:20:07,958 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:20:07,958 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:20:07,958 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:20:07,958 INFO  L87              Difference]: Start difference. First operand 2553 states and 2906 transitions. cyclomatic complexity: 355 Second operand 4 states.
[2020-11-25 17:20:08,407 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:20:08,407 INFO  L93              Difference]: Finished difference Result 3537 states and 4036 transitions.
[2020-11-25 17:20:08,407 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:20:08,408 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3537 states and 4036 transitions.
[2020-11-25 17:20:08,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:20:08,436 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3537 states to 3429 states and 3908 transitions.
[2020-11-25 17:20:08,436 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 857
[2020-11-25 17:20:08,437 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 862
[2020-11-25 17:20:08,437 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3429 states and 3908 transitions.
[2020-11-25 17:20:08,444 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:20:08,444 INFO  L728         BuchiCegarLoop]: Abstraction has 3429 states and 3908 transitions.
[2020-11-25 17:20:08,446 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3429 states and 3908 transitions.
[2020-11-25 17:20:08,475 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3429 to 2593.
[2020-11-25 17:20:08,475 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2593 states.
[2020-11-25 17:20:08,478 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2593 states to 2593 states and 2828 transitions.
[2020-11-25 17:20:08,478 INFO  L751         BuchiCegarLoop]: Abstraction has 2593 states and 2828 transitions.
[2020-11-25 17:20:08,478 INFO  L631         BuchiCegarLoop]: Abstraction has 2593 states and 2828 transitions.
[2020-11-25 17:20:08,479 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:20:08,479 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2593 states and 2828 transitions.
[2020-11-25 17:20:08,483 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:08,483 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:08,483 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:08,485 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:08,486 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2953]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L2957]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2957]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2958]  COND FALSE  !(revert)
[L2961]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2552]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2556]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2556]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2557]  COND FALSE  !(revert)
[L2560]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2560]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2564]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]              assume msgsender_MSG != null;
[L2524]              Balance[this] := 0;
[L2525]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2526]              sum_allowed1[this] := 0;
[L2564]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2565]  COND FALSE  !(revert)
[L2961]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2376]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2376]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2377]  COND FALSE  !(revert)
[L2380]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2380]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2381]  COND FALSE  !(revert)
[L2384]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2353]              assume msgsender_MSG != null;
[L2354]              Balance[this] := 0;
[L2384]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2385]  COND FALSE  !(revert)
[L2965]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2779]              owner_Ownable[this] := null;
[L2781]              owner_Ownable[this] := msgsender_MSG;
[L2794]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2969]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L2973]  CALL        call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              Balance[this] := 0;
[L2901]              name_GokuMarketCredit[this] := -1649829923;
[L2902]              symbol_GokuMarketCredit[this] := 1836184011;
[L2903]              decimals_GokuMarketCredit[this] := 18;
[L2904]              __var_13 := decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2905]              INITIAL_SUPPLY_GokuMarketCredit[this] := 50000000 * (nonlinearPow(10, decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2907]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2908]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2909]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2910]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2973]  RET         call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2974]  COND FALSE  !(revert)
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND TRUE   __exception
[L313]               __tmp__Balance := Balance;
[L314]               __tmp__DType := DType;
[L315]               __tmp__Alloc := Alloc;
[L316]               __tmp__balance_ADDR := balance_ADDR;
[L317]               __tmp__M_Ref_int := M_Ref_int;
[L318]               __tmp__sum_balances0 := sum_balances0;
[L319]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L320]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L321]               __tmp__sum_allowed1 := sum_allowed1;
[L322]               __tmp__Length := Length;
[L323]               __tmp__now := now;
[L324]               __tmp__balances_BasicToken := balances_BasicToken;
[L325]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L326]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L327]               __tmp__owner_Ownable := owner_Ownable;
[L328]               __tmp__name_GokuMarketCredit := name_GokuMarketCredit;
[L329]               __tmp__symbol_GokuMarketCredit := symbol_GokuMarketCredit;
[L330]               __tmp__decimals_GokuMarketCredit := decimals_GokuMarketCredit;
[L331]               __tmp__INITIAL_SUPPLY_GokuMarketCredit := INITIAL_SUPPLY_GokuMarketCredit;
[L332]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2270]  COND TRUE   !(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L2271]              revert := true;
[L332]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L333]               assume revert || gas < 0;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND TRUE   __exception
[L313]               __tmp__Balance := Balance;
[L314]               __tmp__DType := DType;
[L315]               __tmp__Alloc := Alloc;
[L316]               __tmp__balance_ADDR := balance_ADDR;
[L317]               __tmp__M_Ref_int := M_Ref_int;
[L318]               __tmp__sum_balances0 := sum_balances0;
[L319]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L320]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L321]               __tmp__sum_allowed1 := sum_allowed1;
[L322]               __tmp__Length := Length;
[L323]               __tmp__now := now;
[L324]               __tmp__balances_BasicToken := balances_BasicToken;
[L325]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L326]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L327]               __tmp__owner_Ownable := owner_Ownable;
[L328]               __tmp__name_GokuMarketCredit := name_GokuMarketCredit;
[L329]               __tmp__symbol_GokuMarketCredit := symbol_GokuMarketCredit;
[L330]               __tmp__decimals_GokuMarketCredit := decimals_GokuMarketCredit;
[L331]               __tmp__INITIAL_SUPPLY_GokuMarketCredit := INITIAL_SUPPLY_GokuMarketCredit;
[L332]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2270]  COND TRUE   !(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L2271]              revert := true;
[L332]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L333]               assume revert || gas < 0;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:08,490 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:08,490 INFO  L82        PathProgramCache]: Analyzing trace with hash 2023247779, now seen corresponding path program 1 times
[2020-11-25 17:20:08,491 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:08,509 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:20:08,644 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-25 17:20:08,644 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:20:08,644 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:20:08,645 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:20:08,645 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 17:20:08,645 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 17:20:08,646 INFO  L87              Difference]: Start difference. First operand 2593 states and 2828 transitions. cyclomatic complexity: 237 Second operand 6 states.
[2020-11-25 17:20:09,367 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:20:09,367 INFO  L93              Difference]: Finished difference Result 2785 states and 3045 transitions.
[2020-11-25 17:20:09,368 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:20:09,368 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2785 states and 3045 transitions.
[2020-11-25 17:20:09,380 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:20:09,391 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2785 states to 2785 states and 3045 transitions.
[2020-11-25 17:20:09,391 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 744
[2020-11-25 17:20:09,392 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 744
[2020-11-25 17:20:09,392 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2785 states and 3045 transitions.
[2020-11-25 17:20:09,395 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:20:09,395 INFO  L728         BuchiCegarLoop]: Abstraction has 2785 states and 3045 transitions.
[2020-11-25 17:20:09,397 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2785 states and 3045 transitions.
[2020-11-25 17:20:09,419 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2785 to 2649.
[2020-11-25 17:20:09,419 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2649 states.
[2020-11-25 17:20:09,422 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2649 states to 2649 states and 2898 transitions.
[2020-11-25 17:20:09,422 INFO  L751         BuchiCegarLoop]: Abstraction has 2649 states and 2898 transitions.
[2020-11-25 17:20:09,422 INFO  L631         BuchiCegarLoop]: Abstraction has 2649 states and 2898 transitions.
[2020-11-25 17:20:09,422 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:20:09,422 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2649 states and 2898 transitions.
[2020-11-25 17:20:09,426 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:09,426 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:09,427 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:09,429 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:09,429 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2953]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L2957]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2957]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2958]  COND FALSE  !(revert)
[L2961]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2552]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2556]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2556]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2557]  COND FALSE  !(revert)
[L2560]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2560]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2564]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]              assume msgsender_MSG != null;
[L2524]              Balance[this] := 0;
[L2525]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2526]              sum_allowed1[this] := 0;
[L2564]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2565]  COND FALSE  !(revert)
[L2961]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2376]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2376]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2377]  COND FALSE  !(revert)
[L2380]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2380]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2381]  COND FALSE  !(revert)
[L2384]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2353]              assume msgsender_MSG != null;
[L2354]              Balance[this] := 0;
[L2384]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2385]  COND FALSE  !(revert)
[L2965]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2779]              owner_Ownable[this] := null;
[L2781]              owner_Ownable[this] := msgsender_MSG;
[L2794]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2969]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L2973]  CALL        call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              Balance[this] := 0;
[L2901]              name_GokuMarketCredit[this] := -1649829923;
[L2902]              symbol_GokuMarketCredit[this] := 1836184011;
[L2903]              decimals_GokuMarketCredit[this] := 18;
[L2904]              __var_13 := decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2905]              INITIAL_SUPPLY_GokuMarketCredit[this] := 50000000 * (nonlinearPow(10, decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2907]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2908]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2909]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2910]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2973]  RET         call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2974]  COND FALSE  !(revert)
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND TRUE   __exception
[L313]               __tmp__Balance := Balance;
[L314]               __tmp__DType := DType;
[L315]               __tmp__Alloc := Alloc;
[L316]               __tmp__balance_ADDR := balance_ADDR;
[L317]               __tmp__M_Ref_int := M_Ref_int;
[L318]               __tmp__sum_balances0 := sum_balances0;
[L319]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L320]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L321]               __tmp__sum_allowed1 := sum_allowed1;
[L322]               __tmp__Length := Length;
[L323]               __tmp__now := now;
[L324]               __tmp__balances_BasicToken := balances_BasicToken;
[L325]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L326]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L327]               __tmp__owner_Ownable := owner_Ownable;
[L328]               __tmp__name_GokuMarketCredit := name_GokuMarketCredit;
[L329]               __tmp__symbol_GokuMarketCredit := symbol_GokuMarketCredit;
[L330]               __tmp__decimals_GokuMarketCredit := decimals_GokuMarketCredit;
[L331]               __tmp__INITIAL_SUPPLY_GokuMarketCredit := INITIAL_SUPPLY_GokuMarketCredit;
[L332]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2270]  COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2274]              __var_1 := null;
[L2275]  COND TRUE   !(_to_s202 != null)
[L2276]              revert := true;
[L332]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L333]               assume revert || gas < 0;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND TRUE   __exception
[L313]               __tmp__Balance := Balance;
[L314]               __tmp__DType := DType;
[L315]               __tmp__Alloc := Alloc;
[L316]               __tmp__balance_ADDR := balance_ADDR;
[L317]               __tmp__M_Ref_int := M_Ref_int;
[L318]               __tmp__sum_balances0 := sum_balances0;
[L319]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L320]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L321]               __tmp__sum_allowed1 := sum_allowed1;
[L322]               __tmp__Length := Length;
[L323]               __tmp__now := now;
[L324]               __tmp__balances_BasicToken := balances_BasicToken;
[L325]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L326]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L327]               __tmp__owner_Ownable := owner_Ownable;
[L328]               __tmp__name_GokuMarketCredit := name_GokuMarketCredit;
[L329]               __tmp__symbol_GokuMarketCredit := symbol_GokuMarketCredit;
[L330]               __tmp__decimals_GokuMarketCredit := decimals_GokuMarketCredit;
[L331]               __tmp__INITIAL_SUPPLY_GokuMarketCredit := INITIAL_SUPPLY_GokuMarketCredit;
[L332]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2270]  COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2274]              __var_1 := null;
[L2275]  COND TRUE   !(_to_s202 != null)
[L2276]              revert := true;
[L332]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L333]               assume revert || gas < 0;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:09,433 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:09,433 INFO  L82        PathProgramCache]: Analyzing trace with hash 1888188191, now seen corresponding path program 1 times
[2020-11-25 17:20:09,434 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:09,444 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:20:09,498 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-25 17:20:09,498 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:20:09,498 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:20:09,499 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:20:09,499 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 17:20:09,499 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 17:20:09,499 INFO  L87              Difference]: Start difference. First operand 2649 states and 2898 transitions. cyclomatic complexity: 251 Second operand 6 states.
[2020-11-25 17:20:09,550 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:20:09,550 INFO  L93              Difference]: Finished difference Result 2679 states and 2929 transitions.
[2020-11-25 17:20:09,550 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 17:20:09,551 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2679 states and 2929 transitions.
[2020-11-25 17:20:09,556 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:09,563 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2679 states to 2671 states and 2921 transitions.
[2020-11-25 17:20:09,563 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 689
[2020-11-25 17:20:09,563 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 689
[2020-11-25 17:20:09,563 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2671 states and 2921 transitions.
[2020-11-25 17:20:09,565 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:20:09,565 INFO  L728         BuchiCegarLoop]: Abstraction has 2671 states and 2921 transitions.
[2020-11-25 17:20:09,567 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2671 states and 2921 transitions.
[2020-11-25 17:20:09,584 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2671 to 2652.
[2020-11-25 17:20:09,584 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2652 states.
[2020-11-25 17:20:09,588 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2652 states to 2652 states and 2892 transitions.
[2020-11-25 17:20:09,588 INFO  L751         BuchiCegarLoop]: Abstraction has 2652 states and 2892 transitions.
[2020-11-25 17:20:09,588 INFO  L631         BuchiCegarLoop]: Abstraction has 2652 states and 2892 transitions.
[2020-11-25 17:20:09,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:20:09,588 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2652 states and 2892 transitions.
[2020-11-25 17:20:09,592 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:09,592 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:09,592 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:09,594 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:09,594 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2953]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L2957]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2957]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2958]  COND FALSE  !(revert)
[L2961]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2552]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2556]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2556]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2557]  COND FALSE  !(revert)
[L2560]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2560]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2564]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]              assume msgsender_MSG != null;
[L2524]              Balance[this] := 0;
[L2525]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2526]              sum_allowed1[this] := 0;
[L2564]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2565]  COND FALSE  !(revert)
[L2961]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2376]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2376]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2377]  COND FALSE  !(revert)
[L2380]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2380]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2381]  COND FALSE  !(revert)
[L2384]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2353]              assume msgsender_MSG != null;
[L2354]              Balance[this] := 0;
[L2384]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2385]  COND FALSE  !(revert)
[L2965]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2779]              owner_Ownable[this] := null;
[L2781]              owner_Ownable[this] := msgsender_MSG;
[L2794]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2969]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L2973]  CALL        call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              Balance[this] := 0;
[L2901]              name_GokuMarketCredit[this] := -1649829923;
[L2902]              symbol_GokuMarketCredit[this] := 1836184011;
[L2903]              decimals_GokuMarketCredit[this] := 18;
[L2904]              __var_13 := decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2905]              INITIAL_SUPPLY_GokuMarketCredit[this] := 50000000 * (nonlinearPow(10, decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2907]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2908]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2909]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2910]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2973]  RET         call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2974]  COND FALSE  !(revert)
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L2306]              __var_1 := null;
[L2307]  COND FALSE  !(!(_to_s202 != null))
[L2311]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2311]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2312]  COND FALSE  !(revert)
[L2315]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2316]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2317]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2318]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2201]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2202]              assert c_s122 >= _a_s122;
[L2203]              c_s122 := c_s122;
[L2318]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2319]  COND FALSE  !(revert)
[L2322]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L2323]              balances_BasicToken[this][_to_s202] := __var_3;
[L2324]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L2325]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2326]              __ret_0_ := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L2306]              __var_1 := null;
[L2307]  COND FALSE  !(!(_to_s202 != null))
[L2311]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2311]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2312]  COND FALSE  !(revert)
[L2315]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2316]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2317]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2318]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2201]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2202]              assert c_s122 >= _a_s122;
[L2203]              c_s122 := c_s122;
[L2318]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2319]  COND FALSE  !(revert)
[L2322]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L2323]              balances_BasicToken[this][_to_s202] := __var_3;
[L2324]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L2325]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2326]              __ret_0_ := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:09,598 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:09,598 INFO  L82        PathProgramCache]: Analyzing trace with hash -1953692742, now seen corresponding path program 1 times
[2020-11-25 17:20:09,599 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:09,659 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:20:10,594 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification. DAG size of input: 84 DAG size of output: 62
[2020-11-25 17:20:11,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 16 proven. 0 refuted. 0 times theorem prover too weak. 329 trivial. 0 not checked.
[2020-11-25 17:20:11,013 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:20:11,013 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [29] imperfect sequences [] total 29
[2020-11-25 17:20:11,014 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:20:11,014 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 17:20:11,014 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=84, Invalid=786, Unknown=0, NotChecked=0, Total=870
[2020-11-25 17:20:11,014 INFO  L87              Difference]: Start difference. First operand 2652 states and 2892 transitions. cyclomatic complexity: 242 Second operand 30 states.
[2020-11-25 17:20:13,555 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification. DAG size of input: 85 DAG size of output: 82
[2020-11-25 17:20:17,541 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:20:17,541 INFO  L93              Difference]: Finished difference Result 2730 states and 2995 transitions.
[2020-11-25 17:20:17,542 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 17:20:17,542 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2730 states and 2995 transitions.
[2020-11-25 17:20:17,546 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:20:17,554 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2730 states to 2730 states and 2995 transitions.
[2020-11-25 17:20:17,554 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 715
[2020-11-25 17:20:17,554 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 715
[2020-11-25 17:20:17,555 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2730 states and 2995 transitions.
[2020-11-25 17:20:17,556 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:20:17,557 INFO  L728         BuchiCegarLoop]: Abstraction has 2730 states and 2995 transitions.
[2020-11-25 17:20:17,559 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2730 states and 2995 transitions.
[2020-11-25 17:20:17,577 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2730 to 2715.
[2020-11-25 17:20:17,577 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2715 states.
[2020-11-25 17:20:17,580 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2715 states to 2715 states and 2964 transitions.
[2020-11-25 17:20:17,580 INFO  L751         BuchiCegarLoop]: Abstraction has 2715 states and 2964 transitions.
[2020-11-25 17:20:17,580 INFO  L631         BuchiCegarLoop]: Abstraction has 2715 states and 2964 transitions.
[2020-11-25 17:20:17,580 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:20:17,580 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2715 states and 2964 transitions.
[2020-11-25 17:20:17,583 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:20:17,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:17,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:17,584 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:17,584 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2953]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L2957]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2957]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2958]  COND FALSE  !(revert)
[L2961]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2552]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2556]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2556]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2557]  COND FALSE  !(revert)
[L2560]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2560]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2564]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]              assume msgsender_MSG != null;
[L2524]              Balance[this] := 0;
[L2525]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2526]              sum_allowed1[this] := 0;
[L2564]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2565]  COND FALSE  !(revert)
[L2961]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2376]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2376]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2377]  COND FALSE  !(revert)
[L2380]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2380]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2381]  COND FALSE  !(revert)
[L2384]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2353]              assume msgsender_MSG != null;
[L2354]              Balance[this] := 0;
[L2384]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2385]  COND FALSE  !(revert)
[L2965]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2779]              owner_Ownable[this] := null;
[L2781]              owner_Ownable[this] := msgsender_MSG;
[L2794]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2969]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L2973]  CALL        call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              Balance[this] := 0;
[L2901]              name_GokuMarketCredit[this] := -1649829923;
[L2902]              symbol_GokuMarketCredit[this] := 1836184011;
[L2903]              decimals_GokuMarketCredit[this] := 18;
[L2904]              __var_13 := decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2905]              INITIAL_SUPPLY_GokuMarketCredit[this] := 50000000 * (nonlinearPow(10, decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2907]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2908]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2909]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2910]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2973]  RET         call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2974]  COND FALSE  !(revert)
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND TRUE   __exception
[L313]               __tmp__Balance := Balance;
[L314]               __tmp__DType := DType;
[L315]               __tmp__Alloc := Alloc;
[L316]               __tmp__balance_ADDR := balance_ADDR;
[L317]               __tmp__M_Ref_int := M_Ref_int;
[L318]               __tmp__sum_balances0 := sum_balances0;
[L319]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L320]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L321]               __tmp__sum_allowed1 := sum_allowed1;
[L322]               __tmp__Length := Length;
[L323]               __tmp__now := now;
[L324]               __tmp__balances_BasicToken := balances_BasicToken;
[L325]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L326]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L327]               __tmp__owner_Ownable := owner_Ownable;
[L328]               __tmp__name_GokuMarketCredit := name_GokuMarketCredit;
[L329]               __tmp__symbol_GokuMarketCredit := symbol_GokuMarketCredit;
[L330]               __tmp__decimals_GokuMarketCredit := decimals_GokuMarketCredit;
[L331]               __tmp__INITIAL_SUPPLY_GokuMarketCredit := INITIAL_SUPPLY_GokuMarketCredit;
[L332]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2270]  COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2274]              __var_1 := null;
[L2275]  COND FALSE  !(!(_to_s202 != null))
[L2279]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2181]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2279]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2280]  COND FALSE  !(revert)
[L2283]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L2284]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2285]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L2286]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L2194]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2195]              c_s122 := c_s122;
[L2286]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L2287]  COND FALSE  !(revert)
[L2290]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s202];
[L2291]              __tmp__balances_BasicToken[this][_to_s202] := __var_3;
[L2292]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s202];
[L2293]              __ret_0_ := true;
[L332]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L333]               assume revert || gas < 0;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND TRUE   __exception
[L313]               __tmp__Balance := Balance;
[L314]               __tmp__DType := DType;
[L315]               __tmp__Alloc := Alloc;
[L316]               __tmp__balance_ADDR := balance_ADDR;
[L317]               __tmp__M_Ref_int := M_Ref_int;
[L318]               __tmp__sum_balances0 := sum_balances0;
[L319]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L320]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L321]               __tmp__sum_allowed1 := sum_allowed1;
[L322]               __tmp__Length := Length;
[L323]               __tmp__now := now;
[L324]               __tmp__balances_BasicToken := balances_BasicToken;
[L325]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L326]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L327]               __tmp__owner_Ownable := owner_Ownable;
[L328]               __tmp__name_GokuMarketCredit := name_GokuMarketCredit;
[L329]               __tmp__symbol_GokuMarketCredit := symbol_GokuMarketCredit;
[L330]               __tmp__decimals_GokuMarketCredit := decimals_GokuMarketCredit;
[L331]               __tmp__INITIAL_SUPPLY_GokuMarketCredit := INITIAL_SUPPLY_GokuMarketCredit;
[L332]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2270]  COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L2274]              __var_1 := null;
[L2275]  COND FALSE  !(!(_to_s202 != null))
[L2279]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2181]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2279]  RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2280]  COND FALSE  !(revert)
[L2283]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L2284]              __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2285]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L2286]  CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L2194]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2195]              c_s122 := c_s122;
[L2286]  RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L2287]  COND FALSE  !(revert)
[L2290]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s202];
[L2291]              __tmp__balances_BasicToken[this][_to_s202] := __var_3;
[L2292]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s202];
[L2293]              __ret_0_ := true;
[L332]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L333]               assume revert || gas < 0;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:17,589 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:17,589 INFO  L82        PathProgramCache]: Analyzing trace with hash 81112365, now seen corresponding path program 1 times
[2020-11-25 17:20:17,590 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:17,599 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:20:17,646 INFO  L134       CoverageAnalysis]: Checked inductivity of 345 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 345 trivial. 0 not checked.
[2020-11-25 17:20:17,646 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:20:17,646 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 17:20:17,646 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:20:17,646 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 17:20:17,646 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 17:20:17,646 INFO  L87              Difference]: Start difference. First operand 2715 states and 2964 transitions. cyclomatic complexity: 253 Second operand 5 states.
[2020-11-25 17:20:17,931 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:20:17,931 INFO  L93              Difference]: Finished difference Result 3319 states and 3695 transitions.
[2020-11-25 17:20:17,931 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:20:17,931 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3319 states and 3695 transitions.
[2020-11-25 17:20:17,938 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 17:20:17,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3319 states to 2294 states and 2630 transitions.
[2020-11-25 17:20:17,944 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 495
[2020-11-25 17:20:17,945 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 638
[2020-11-25 17:20:17,945 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2294 states and 2630 transitions.
[2020-11-25 17:20:17,946 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:20:17,946 INFO  L728         BuchiCegarLoop]: Abstraction has 2294 states and 2630 transitions.
[2020-11-25 17:20:17,948 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2294 states and 2630 transitions.
[2020-11-25 17:20:17,957 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2294 to 1703.
[2020-11-25 17:20:17,957 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1703 states.
[2020-11-25 17:20:17,959 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1703 states to 1703 states and 1873 transitions.
[2020-11-25 17:20:17,959 INFO  L751         BuchiCegarLoop]: Abstraction has 1703 states and 1873 transitions.
[2020-11-25 17:20:17,959 INFO  L631         BuchiCegarLoop]: Abstraction has 1703 states and 1873 transitions.
[2020-11-25 17:20:17,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:20:17,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1703 states and 1873 transitions.
[2020-11-25 17:20:17,961 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:17,961 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:17,961 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:17,962 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:17,962 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2953]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L2957]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2957]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2958]  COND FALSE  !(revert)
[L2961]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2552]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2556]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2556]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2557]  COND FALSE  !(revert)
[L2560]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2560]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2564]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]              assume msgsender_MSG != null;
[L2524]              Balance[this] := 0;
[L2525]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2526]              sum_allowed1[this] := 0;
[L2564]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2565]  COND FALSE  !(revert)
[L2961]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2376]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2376]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2377]  COND FALSE  !(revert)
[L2380]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2380]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2381]  COND FALSE  !(revert)
[L2384]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2353]              assume msgsender_MSG != null;
[L2354]              Balance[this] := 0;
[L2384]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2385]  COND FALSE  !(revert)
[L2965]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2779]              owner_Ownable[this] := null;
[L2781]              owner_Ownable[this] := msgsender_MSG;
[L2794]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2969]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L2973]  CALL        call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              Balance[this] := 0;
[L2901]              name_GokuMarketCredit[this] := -1649829923;
[L2902]              symbol_GokuMarketCredit[this] := 1836184011;
[L2903]              decimals_GokuMarketCredit[this] := 18;
[L2904]              __var_13 := decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2905]              INITIAL_SUPPLY_GokuMarketCredit[this] := 50000000 * (nonlinearPow(10, decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2907]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2908]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2909]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2910]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2973]  RET         call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2974]  COND FALSE  !(revert)
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND FALSE  !(choice == 14)
[L4911]  COND TRUE   choice == 13
[L4912]              gas := gas - 21000;
[L4913]  COND TRUE   gas >= 0
[L4914]              assume _value_s235 >= 0 && _value_s235 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4915]              assume msgvalue_MSG == 0;
[L4916]  CALL        call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s235);
[L481]               havoc __exception;
[L482]               revert := false;
[L483]   COND FALSE  !(__exception)
[L506]   CALL        call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s235);
[L2409]  COND TRUE   DType[this] == GokuMarketCredit
[L2410]  CALL        call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s235);
[L2450]  COND FALSE  !(!(_value_s282 <= balances_BasicToken[this][_who_s282]))
[L2454]  CALL        call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s282], _value_s282);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2454]  RET         call __var_4 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_who_s282], _value_s282);
[L2455]  COND FALSE  !(revert)
[L2458]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_who_s282];
[L2459]              balances_BasicToken[this][_who_s282] := __var_4;
[L2460]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_who_s282];
[L2461]  CALL        call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s282);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_5 := sub~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _value_s282);
[L2462]  COND FALSE  !(revert)
[L2465]              totalSupply__BasicToken[this] := __var_5;
[L2466]              assert { :EventEmitted "Burn_BurnableToken" } true;
[L2467]              assert { :EventEmitted "Transfer_BurnableToken" } true;
[L2410]  RET         call _burn~address~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, _value_s235);
[L2411]  COND FALSE  !(revert)
[L506]   RET         call burn~uint256_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG, _value_s235);
[L507]               assume !revert && gas >= 0;
[L4916]  RET         call burn~uint256_BurnableToken(this, msgsender_MSG, msgvalue_MSG, _value_s235);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L2306]              __var_1 := null;
[L2307]  COND FALSE  !(!(_to_s202 != null))
[L2311]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2311]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2312]  COND FALSE  !(revert)
[L2315]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2316]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2317]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2318]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2201]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2202]              assert c_s122 >= _a_s122;
[L2203]              c_s122 := c_s122;
[L2318]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2319]  COND FALSE  !(revert)
[L2322]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L2323]              balances_BasicToken[this][_to_s202] := __var_3;
[L2324]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L2325]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2326]              __ret_0_ := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L2306]              __var_1 := null;
[L2307]  COND FALSE  !(!(_to_s202 != null))
[L2311]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2311]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2312]  COND FALSE  !(revert)
[L2315]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2316]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2317]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2318]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2201]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2202]              assert c_s122 >= _a_s122;
[L2203]              c_s122 := c_s122;
[L2318]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2319]  COND FALSE  !(revert)
[L2322]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L2323]              balances_BasicToken[this][_to_s202] := __var_3;
[L2324]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L2325]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2326]              __ret_0_ := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:17,966 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:17,966 INFO  L82        PathProgramCache]: Analyzing trace with hash 26943878, now seen corresponding path program 1 times
[2020-11-25 17:20:17,967 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:18,071 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:20:18,682 INFO  L134       CoverageAnalysis]: Checked inductivity of 405 backedges. 16 proven. 3 refuted. 0 times theorem prover too weak. 386 trivial. 0 not checked.
[2020-11-25 17:20:18,683 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:20:18,683 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 17:20:18,683 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:20:18,683 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 17:20:18,683 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=784, Unknown=0, NotChecked=0, Total=870
[2020-11-25 17:20:18,684 INFO  L87              Difference]: Start difference. First operand 1703 states and 1873 transitions. cyclomatic complexity: 173 Second operand 30 states.
[2020-11-25 17:20:21,430 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:20:21,430 INFO  L93              Difference]: Finished difference Result 1731 states and 1905 transitions.
[2020-11-25 17:20:21,430 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 17:20:21,430 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1731 states and 1905 transitions.
[2020-11-25 17:20:21,433 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:21,438 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1731 states to 1731 states and 1905 transitions.
[2020-11-25 17:20:21,438 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 548
[2020-11-25 17:20:21,438 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 548
[2020-11-25 17:20:21,439 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1731 states and 1905 transitions.
[2020-11-25 17:20:21,440 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:20:21,440 INFO  L728         BuchiCegarLoop]: Abstraction has 1731 states and 1905 transitions.
[2020-11-25 17:20:21,441 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1731 states and 1905 transitions.
[2020-11-25 17:20:21,451 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1731 to 1707.
[2020-11-25 17:20:21,451 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1707 states.
[2020-11-25 17:20:21,453 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1707 states to 1707 states and 1881 transitions.
[2020-11-25 17:20:21,453 INFO  L751         BuchiCegarLoop]: Abstraction has 1707 states and 1881 transitions.
[2020-11-25 17:20:21,453 INFO  L631         BuchiCegarLoop]: Abstraction has 1707 states and 1881 transitions.
[2020-11-25 17:20:21,453 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:20:21,453 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1707 states and 1881 transitions.
[2020-11-25 17:20:21,456 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:20:21,456 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:20:21,456 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:20:21,457 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:20:21,457 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_BasicToken0 := false;
[L2]                 call_transfer_BasicToken0 := false;
[L2]     CALL        call main();
[L5003]              assume null == 0;
[L5004]  CALL        call this := FreshRefGenerator__success();
[L2074]              havoc newRef;
[L2075]              assume Alloc[newRef] == false;
[L2076]              Alloc[newRef] := true;
[L2077]              assume newRef != null;
[L5004]  RET         call this := FreshRefGenerator__success();
[L5005]              assume now >= 0;
[L5006]              assume DType[this] == GokuMarketCredit;
[L5007]              assume msgvalue_MSG == 0;
[L5008]              gas := gas - 53000;
[L5009]  CALL        call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L1141]              havoc __exception;
[L1142]              revert := false;
[L1143]  COND FALSE  !(__exception)
[L1166]  CALL        call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L2949]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2949]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L2953]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2953]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2954]  COND FALSE  !(revert)
[L2957]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2957]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2958]  COND FALSE  !(revert)
[L2961]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2552]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2552]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2553]  COND FALSE  !(revert)
[L2556]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2500]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2500]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  COND FALSE  !(revert)
[L2504]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2481]              assume msgsender_MSG != null;
[L2482]              Balance[this] := 0;
[L2504]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2505]  COND FALSE  !(revert)
[L2556]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2557]  COND FALSE  !(revert)
[L2560]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2560]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2561]  COND FALSE  !(revert)
[L2564]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2523]              assume msgsender_MSG != null;
[L2524]              Balance[this] := 0;
[L2525]              allowed_StandardToken[this] := zeroRefRefintArr();
[L2526]              sum_allowed1[this] := 0;
[L2564]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2565]  COND FALSE  !(revert)
[L2961]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2962]  COND FALSE  !(revert)
[L2965]  CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2376]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2376]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2377]  COND FALSE  !(revert)
[L2380]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2243]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2106]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2091]              assume msgsender_MSG != null;
[L2092]              Balance[this] := 0;
[L2106]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2107]  COND FALSE  !(revert)
[L2243]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L2244]  COND FALSE  !(revert)
[L2247]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2221]              assume msgsender_MSG != null;
[L2222]              Balance[this] := 0;
[L2223]              balances_BasicToken[this] := zeroRefintArr();
[L2224]              sum_balances0[this] := 0;
[L2225]              totalSupply__BasicToken[this] := 0;
[L2247]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2248]  COND FALSE  !(revert)
[L2380]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2381]  COND FALSE  !(revert)
[L2384]  CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2353]              assume msgsender_MSG != null;
[L2354]              Balance[this] := 0;
[L2384]  RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2385]  COND FALSE  !(revert)
[L2965]  RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2966]  COND FALSE  !(revert)
[L2969]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2794]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2777]              assume msgsender_MSG != null;
[L2778]              Balance[this] := 0;
[L2779]              owner_Ownable[this] := null;
[L2781]              owner_Ownable[this] := msgsender_MSG;
[L2794]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2795]  COND FALSE  !(revert)
[L2969]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L2970]  COND FALSE  !(revert)
[L2973]  CALL        call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]              assume msgsender_MSG != null;
[L2900]              Balance[this] := 0;
[L2901]              name_GokuMarketCredit[this] := -1649829923;
[L2902]              symbol_GokuMarketCredit[this] := 1836184011;
[L2903]              decimals_GokuMarketCredit[this] := 18;
[L2904]              __var_13 := decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2905]              INITIAL_SUPPLY_GokuMarketCredit[this] := 50000000 * (nonlinearPow(10, decimals_GokuMarketCredit[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2907]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2908]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2909]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_GokuMarketCredit[this];
[L2910]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2973]  RET         call GokuMarketCredit_GokuMarketCredit_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2974]  COND FALSE  !(revert)
[L1166]  RET         call GokuMarketCredit_GokuMarketCredit__success(this, msgsender_MSG, msgvalue_MSG);
[L1167]              assume !revert && gas >= 0;
[L5009]  RET         call GokuMarketCredit_GokuMarketCredit(this, msgsender_MSG, msgvalue_MSG);
[L5010]              assume !revert && gas >= 0;
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L2306]              __var_1 := null;
[L2307]  COND FALSE  !(!(_to_s202 != null))
[L2311]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2311]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2312]  COND FALSE  !(revert)
[L2315]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2316]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2317]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2318]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2201]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2202]              assert c_s122 >= _a_s122;
[L2203]              c_s122 := c_s122;
[L2318]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2319]  COND FALSE  !(revert)
[L2322]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L2323]              balances_BasicToken[this][_to_s202] := __var_3;
[L2324]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L2325]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2326]              __ret_0_ := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND FALSE  !(choice == 16)
[L4898]  COND FALSE  !(choice == 15)
[L4904]  COND TRUE   choice == 14
[L4905]              gas := gas - 21000;
[L4906]  COND TRUE   gas >= 0
[L4907]              assume _value_s202 >= 0 && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4908]              assume msgvalue_MSG == 0;
[L4909]  CALL        call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s202 && _value_s202 <= balances_BasicToken[this][msgsender_MSG]) && _value_s202 >= 0) && _value_s202 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s202] >= 0) && balances_BasicToken[this][_to_s202] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BasicToken0 := true;
[L2]                 call_transfer_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L310]               havoc __exception;
[L311]               revert := false;
[L312]   COND FALSE  !(__exception)
[L335]   CALL        call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L2302]  COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L2306]              __var_1 := null;
[L2307]  COND FALSE  !(!(_to_s202 != null))
[L2311]  CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2187]              assert _b_s98 <= _a_s98;
[L2188]              __ret_0_ := (_a_s98 - _b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2311]  RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L2312]  COND FALSE  !(revert)
[L2315]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L2316]              balances_BasicToken[this][msgsender_MSG] := __var_2;
[L2317]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L2318]  CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2201]              c_s122 := (_a_s122 + _b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2202]              assert c_s122 >= _a_s122;
[L2203]              c_s122 := c_s122;
[L2318]  RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L2319]  COND FALSE  !(revert)
[L2322]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L2323]              balances_BasicToken[this][_to_s202] := __var_3;
[L2324]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L2325]              assert { :EventEmitted "Transfer_BasicToken" } true;
[L2326]              __ret_0_ := true;
[L335]   RET         call __ret_0_ := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L336]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((__ret_0_ == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L2]                 revert := revert_hold;
[L4909]  RET         call __ret_0_transfer := transfer~address~uint256_BasicToken(this, msgsender_MSG, msgvalue_MSG, _to_s202, _value_s202);
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

Loop:
[L5013]  CALL        call CorralChoice_GokuMarketCredit(this);
[L4841]              havoc msgsender_MSG;
[L4842]              havoc msgvalue_MSG;
[L4843]              havoc choice;
[L4844]              havoc __ret_0_totalSupply;
[L4845]              havoc _owner_s214;
[L4846]              havoc __ret_0_balanceOf;
[L4847]              havoc _to_s202;
[L4848]              havoc _value_s202;
[L4849]              havoc __ret_0_transfer;
[L4850]              havoc _value_s235;
[L4851]              havoc _owner_s463;
[L4852]              havoc _spender_s463;
[L4853]              havoc __ret_0_allowance;
[L4854]              havoc _from_s419;
[L4855]              havoc _to_s419;
[L4856]              havoc _value_s419;
[L4857]              havoc __ret_0_transferFrom;
[L4858]              havoc _spender_s447;
[L4859]              havoc _value_s447;
[L4860]              havoc __ret_0_approve;
[L4861]              havoc _spender_s505;
[L4862]              havoc _addedValue_s505;
[L4863]              havoc __ret_0_increaseApproval;
[L4864]              havoc _spender_s565;
[L4865]              havoc _subtractedValue_s565;
[L4866]              havoc __ret_0_decreaseApproval;
[L4867]              havoc __ret_0_owner;
[L4868]              havoc _newOwner_s610;
[L4869]              havoc __ret_0_name;
[L4870]              havoc __ret_0_symbol;
[L4871]              havoc __ret_0_decimals;
[L4872]              havoc __ret_0_INITIAL_SUPPLY;
[L4873]              havoc tokenAddress_s697;
[L4874]              havoc tokens_s697;
[L4875]              havoc success_s697;
[L4876]              havoc tmpNow;
[L4877]              havoc gas;
[L4878]              assume gas > 4000000 && gas <= 8000000;
[L4879]              tmpNow := now;
[L4880]              havoc now;
[L4881]              assume now > tmpNow;
[L4882]              assume msgsender_MSG != null;
[L4883]              assume DType[msgsender_MSG] != ERC20Basic;
[L4884]              assume DType[msgsender_MSG] != SafeMath;
[L4885]              assume DType[msgsender_MSG] != BasicToken;
[L4886]              assume DType[msgsender_MSG] != BurnableToken;
[L4887]              assume DType[msgsender_MSG] != ERC20;
[L4888]              assume DType[msgsender_MSG] != StandardToken;
[L4889]              assume DType[msgsender_MSG] != Ownable;
[L4890]              assume DType[msgsender_MSG] != GokuMarketCredit;
[L4891]              Alloc[msgsender_MSG] := true;
[L4892]  COND TRUE   choice == 16
[L4893]              gas := gas - 21000;
[L4894]  COND FALSE  !(gas >= 0)
[L5013]  RET         call CorralChoice_GokuMarketCredit(this);

[2020-11-25 17:20:21,461 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:20:21,461 INFO  L82        PathProgramCache]: Analyzing trace with hash 347419030, now seen corresponding path program 1 times
[2020-11-25 17:20:21,461 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:20:21,506 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 17:35:02,743 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 17:35:02,745 INFO  L168              Benchmark]: Toolchain (without parser) took 898574.16 ms. Allocated memory was 1.0 GB in the beginning and 6.4 GB in the end (delta: 5.4 GB). Free memory was 940.6 MB in the beginning and 5.6 GB in the end (delta: -4.7 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,745 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,746 INFO  L168              Benchmark]: Boogie Preprocessor took 110.96 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,746 INFO  L168              Benchmark]: UtopiaSpecLang took 78.79 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,747 INFO  L168              Benchmark]: Boogie Printer took 18.29 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,747 INFO  L168              Benchmark]: RCFGBuilder took 854.05 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 768.8 MB in the end (delta: 150.3 MB). Peak memory consumption was 150.3 MB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,748 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.45 ms. Allocated memory is still 1.0 GB. Free memory was 768.8 MB in the beginning and 765.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,748 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1608.04 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.4 MB). Free memory was 765.2 MB in the beginning and 817.7 MB in the end (delta: -52.6 MB). Peak memory consumption was 160.8 MB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,749 INFO  L168              Benchmark]: BlockEncodingV2 took 152.87 ms. Allocated memory is still 1.2 GB. Free memory was 817.7 MB in the beginning and 742.6 MB in the end (delta: 75.1 MB). Peak memory consumption was 75.1 MB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,749 INFO  L168              Benchmark]: BuchiAutomizer took 895707.69 ms. Allocated memory was 1.2 GB in the beginning and 6.4 GB in the end (delta: 5.2 GB). Free memory was 742.6 MB in the beginning and 5.6 GB in the end (delta: -4.9 GB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
[2020-11-25 17:35:02,753 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4392 locations, 7797 edges
  - StatisticsResult: Encoded RCFG
    4328 locations, 7634 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 110.96 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 78.79 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.29 ms. Allocated memory is still 1.0 GB. Free memory is still 919.1 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 854.05 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 768.8 MB in the end (delta: 150.3 MB). Peak memory consumption was 150.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.45 ms. Allocated memory is still 1.0 GB. Free memory was 768.8 MB in the beginning and 765.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1608.04 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 213.4 MB). Free memory was 765.2 MB in the beginning and 817.7 MB in the end (delta: -52.6 MB). Peak memory consumption was 160.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 152.87 ms. Allocated memory is still 1.2 GB. Free memory was 817.7 MB in the beginning and 742.6 MB in the end (delta: 75.1 MB). Peak memory consumption was 75.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 895707.69 ms. Allocated memory was 1.2 GB in the beginning and 6.4 GB in the end (delta: 5.2 GB). Free memory was 742.6 MB in the beginning and 5.6 GB in the end (delta: -4.9 GB). Peak memory consumption was 5.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1779 locations, 2378 edges
  - StatisticsResult: BuchiProgram size
    4392 locations, 7797 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
