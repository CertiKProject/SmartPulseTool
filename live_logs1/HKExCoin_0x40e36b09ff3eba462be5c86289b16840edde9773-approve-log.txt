This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:41:41,412 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:41:41,413 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:41:41,423 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:41:41,423 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:41:41,424 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:41:41,425 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:41:41,426 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:41:41,428 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:41:41,429 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:41:41,430 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:41:41,431 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:41:41,432 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:41:41,433 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:41:41,434 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:41:41,435 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:41:41,436 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:41:41,438 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:41:41,440 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:41:41,441 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:41:41,441 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:41:41,442 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:41:41,443 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:41:41,444 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:41:41,444 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:41:41,444 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:41:41,444 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:41:41,445 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:41:41,445 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:41:41,445 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:41:41,446 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:41:41,446 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:41:41,447 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:41:41,447 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:41:41,448 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:41:41,448 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:41:41,448 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:41:41,449 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:41:41,449 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:41:41,449 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:41:41,450 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:41:41,450 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:41:41,457 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:41:41,457 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:41:41,458 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:41:41,458 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:41:41,458 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:41:41,459 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:41:41,459 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:41:41,459 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:41:41,459 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:41:41,459 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:41:41,459 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:41:41,459 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:41:41,459 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:41:41,459 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:41:41,460 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:41:41,460 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:41:41,461 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:41:41,461 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:41:41,484 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:41:41,499 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:41:41,501 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:41:41,502 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:41:41,503 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:41:41,503 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl
[2020-11-25 17:41:41,503 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl'
[2020-11-25 17:41:41,616 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:41:41,617 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:41:41,617 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:41:41,617 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:41:41,618 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:41:41,633 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,635 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,672 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,672 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,700 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,714 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,727 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,743 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:41:41,743 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:41:41,743 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:41:41,745 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:41:41,751 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/1) ...
[2020-11-25 17:41:41,778 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(PausableToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(PausableToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_HKExCoin[this] == old(name_HKExCoin[this]) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this]) && standard_HKExCoin[this] == old(standard_HKExCoin[this]) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:41:41,783 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(PausableToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(PausableToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_HKExCoin[this] == old(name_HKExCoin[this]) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this]) && standard_HKExCoin[this] == old(standard_HKExCoin[this]) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:41:41,791 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(PausableToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(PausableToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_HKExCoin[this] == old(name_HKExCoin[this]) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this]) && standard_HKExCoin[this] == old(standard_HKExCoin[this]) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:41:41,798 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s680 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s680,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]
[2020-11-25 17:41:41,802 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && allowed_StandardToken[this][msg.sender][_spender_s680]==_value_s680 ) && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this][p1][p2]==( old(allowed_StandardToken[this][p1][p2]) ) ) && name_HKExCoin[this]==( old(name_HKExCoin[this]) ) ) && symbol_HKExCoin[this]==( old(symbol_HKExCoin[this]) ) ) && standard_HKExCoin[this]==( old(standard_HKExCoin[this]) ) ) && M_Ref_Ref[allocations_HKExCoin[this]]==( old(M_Ref_Ref[allocations_HKExCoin[this]]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_PausableToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],[IdentifierExpression[_spender_s680,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],IdentifierExpression[_value_s680,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[standard_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[standard_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[allocations_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[allocations_HKExCoin,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_PausableToken>]]]]]]
[2020-11-25 17:41:41,807 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(PausableToken.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(PausableToken.approve(spender, value), return == true && allowed_StandardToken[this][msg.sender][spender] == value &&  totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2]) && name_HKExCoin[this] == old(name_HKExCoin[this]) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this]) && standard_HKExCoin[this] == old(standard_HKExCoin[this]) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]]) && paused_Pausable[this] == old(paused_Pausable[this]) && owner_Ownable[this] == old(owner_Ownable[this]))))
[2020-11-25 17:41:41,808 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_PausableToken0) ==> ( <>AP(success_approve_PausableToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:41:41,823 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:41:41 PropertyContainer
[2020-11-25 17:41:41,823 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:41:41,823 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:41:41,823 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:41:41,823 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:41:41,824 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/2) ...
[2020-11-25 17:41:41,824 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:41:41,824 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:41:41,845 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:41:41" (2/2) ...
[2020-11-25 17:41:41,845 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:41:41,846 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:41:41,846 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:41:41,846 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:41:41,846 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/2) ...
[2020-11-25 17:41:41,881 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:41:41,881 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin.TimeLock_ctor__success
[2020-11-25 17:41:41,881 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:41:41,881 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:41:41,881 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:41:41,881 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 17:41:41,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 17:41:41,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 17:41:41,882 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 17:41:41,882 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:41:41,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-25 17:41:41,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-25 17:41:41,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:41:41,883 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-25 17:41:41,883 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-25 17:41:41,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 17:41:41,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-25 17:41:41,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:41:41,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-25 17:41:41,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-25 17:41:41,884 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-25 17:41:41,884 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:41:41,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:41:41,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 17:41:41,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 17:41:41,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 17:41:41,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 17:41:41,885 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 17:41:41,885 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken
[2020-11-25 17:41:41,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin_NoBaseCtor__success
[2020-11-25 17:41:41,886 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin
[2020-11-25 17:41:41,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin
[2020-11-25 17:41:41,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin
[2020-11-25 17:41:41,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_HKExCoin__success
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin
[2020-11-25 17:41:41,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin
[2020-11-25 17:41:41,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin
[2020-11-25 17:41:41,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin
[2020-11-25 17:41:41,887 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin
[2020-11-25 17:41:41,887 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin
[2020-11-25 17:41:41,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin
[2020-11-25 17:41:41,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin
[2020-11-25 17:41:41,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:41:41,888 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PausableToken
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PausableToken
[2020-11-25 17:41:41,889 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HKExCoin
[2020-11-25 17:41:41,890 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:41:41,890 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:41:41,890 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin.TimeLock_ctor__fail
[2020-11-25 17:41:41,890 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:41:41,890 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:41:41,890 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:41:41,890 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:41:41,891 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-25 17:41:41,892 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:41:41,893 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:41:41,894 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 17:41:41,895 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__success
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure PausableToken_PausableToken__fail
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__success
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,896 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin_NoBaseCtor__fail
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin__success
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure HKExCoin_HKExCoin__fail
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure canSubAllocation~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure subAllocation~address_HKExCoin__fail
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin__success
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllocation~address~uint256~arr~arr_HKExCoin__fail
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin__success
[2020-11-25 17:41:41,897 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HKExCoin__fail
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin__success
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HKExCoin__fail
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin__success
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure standard_HKExCoin__fail
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin__success
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HKExCoin__fail
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin__success
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure INITIAL_SUPPLY_HKExCoin__fail
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure allocations~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:41:41,898 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:41:41,899 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:41:41,899 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 17:41:41,899 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 17:41:41,899 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 17:41:41,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:41:41,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:41:41,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin.TimeLock_ctor__fail
[2020-11-25 17:41:41,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin.TimeLock_ctor__success
[2020-11-25 17:41:41,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:41:41,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:41:41,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 17:41:41,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-25 17:41:41,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 17:41:41,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 17:41:41,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__fail
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken_NoBaseCtor__success
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__fail
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure PausableToken_PausableToken__success
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_PausableToken__success
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_PausableToken__success
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_PausableToken__success
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__fail
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_PausableToken__success
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin_NoBaseCtor__fail
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin_NoBaseCtor__success
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin__fail
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure HKExCoin_HKExCoin__success
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure canSubAllocation~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_HKExCoin__fail
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure subAllocation~address_HKExCoin__success
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin__fail
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllocation~address~uint256~arr~arr_HKExCoin__success
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin__fail
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HKExCoin__success
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin__fail
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HKExCoin__success
[2020-11-25 17:41:41,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin__fail
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure standard_HKExCoin__success
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin__fail
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HKExCoin__success
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin__fail
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure INITIAL_SUPPLY_HKExCoin__success
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin__fail
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure allocations~address~uint256_HKExCoin__success
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:41:41,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-25 17:41:41,909 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PausableToken
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PausableToken
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HKExCoin
[2020-11-25 17:41:41,910 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:41:41,910 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:41:41,911 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:41:42,555 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:41:42,979 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:41:42,979 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:41:42,980 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:41:43,030 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:41:43,030 INFO  L286             CfgBuilder]: Removed 9 assue(true) statements.
[2020-11-25 17:41:43,032 INFO  L202        PluginConnector]: Adding new model HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:41:43 BoogieIcfgContainer
[2020-11-25 17:41:43,032 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:41:41" (2/2) ...
[2020-11-25 17:41:43,032 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:41:43,033 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@17e3b5bc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:41:43, skipping insertion in model container
[2020-11-25 17:41:43,033 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:41:43,033 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:41:43,033 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:41:43,034 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:41:43,034 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/3) ...
[2020-11-25 17:41:43,035 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@3b43ccc0 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:41:43, skipping insertion in model container
[2020-11-25 17:41:43,035 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:41:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:41:43,068 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:41:43 NWAContainer
[2020-11-25 17:41:43,068 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:41:43,068 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:41:43,068 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:41:43,069 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:41:43,070 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:41:43" (3/4) ...
[2020-11-25 17:41:43,070 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6d1e6e4f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:41:43, skipping insertion in model container
[2020-11-25 17:41:43,071 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:41:43" (4/4) ...
[2020-11-25 17:41:43,073 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:41:43,079 INFO  L110   BuchiProductObserver]: Initial RCFG 3264 locations, 4463 edges
[2020-11-25 17:41:43,079 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:41:43,091 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:41:45,502 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:41:45,512 INFO  L110   BuchiProductObserver]: BuchiProgram size 8064 locations, 14496 edges
[2020-11-25 17:41:45,513 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:41:45 BoogieIcfgContainer
[2020-11-25 17:41:45,513 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:41:45,513 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:41:45,513 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:41:45,515 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:41:45,515 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:41:45" (1/1) ...
[2020-11-25 17:41:45,663 INFO  L313           BlockEncoder]: Initial Icfg 8064 locations, 14496 edges
[2020-11-25 17:41:45,663 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:41:45,666 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:41:45,666 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:41:45,666 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:41:45,683 INFO  L70    emoveInfeasibleEdges]: Removed 147 edges and 21 locations because of local infeasibility
[2020-11-25 17:41:45,698 INFO  L70        RemoveSinkStates]: Removed 56 edges and 37 locations by removing sink states
[2020-11-25 17:41:45,716 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:41:45,721 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:41:45,727 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:41:45,727 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:41:45,732 INFO  L313           BlockEncoder]: Encoded RCFG 7966 locations, 14234 edges
[2020-11-25 17:41:45,733 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:41:45 BasicIcfg
[2020-11-25 17:41:45,733 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:41:45,733 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:41:45,733 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:41:45,735 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:41:45,735 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:41:45,735 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:41:41" (1/6) ...
[2020-11-25 17:41:45,736 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14047fc2 and model type HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:41:45, skipping insertion in model container
[2020-11-25 17:41:45,736 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:41:45,736 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:41:41" (2/6) ...
[2020-11-25 17:41:45,737 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14047fc2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:41:45, skipping insertion in model container
[2020-11-25 17:41:45,737 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:41:45,737 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:41:43" (3/6) ...
[2020-11-25 17:41:45,737 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14047fc2 and model type HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:41:45, skipping insertion in model container
[2020-11-25 17:41:45,737 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:41:45,737 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:41:43" (4/6) ...
[2020-11-25 17:41:45,738 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14047fc2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:41:45, skipping insertion in model container
[2020-11-25 17:41:45,738 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:41:45,738 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:41:45" (5/6) ...
[2020-11-25 17:41:45,738 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14047fc2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:41:45, skipping insertion in model container
[2020-11-25 17:41:45,738 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:41:45,738 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:41:45" (6/6) ...
[2020-11-25 17:41:45,739 INFO  L404   chiAutomizerObserver]: Analyzing ICFG HKExCoin_0x40e36b09ff3eba462be5c86289b16840edde9773_approve.bpl_BEv2
[2020-11-25 17:41:45,766 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:41:45,767 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:41:45,767 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:41:45,767 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:41:45,767 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:41:45,767 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:41:45,767 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:41:45,767 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:41:45,767 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:41:45,819 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7966 states.
[2020-11-25 17:41:45,880 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:41:45,880 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:45,880 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:45,888 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:45,888 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:45,888 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:41:45,888 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7966 states.
[2020-11-25 17:41:45,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:41:45,917 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:45,917 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:45,918 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:45,918 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND TRUE   revert
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND TRUE   choice == 20
[L8543]              gas := gas - 21000;
[L8544]  COND FALSE  !(gas >= 0)
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:41:45,932 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:45,932 INFO  L82        PathProgramCache]: Analyzing trace with hash 1444708327, now seen corresponding path program 1 times
[2020-11-25 17:41:45,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:45,957 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:45,991 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:41:45,992 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:45,992 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:41:46,413 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:46,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:41:46,422 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:41:46,423 INFO  L87              Difference]: Start difference. First operand 7966 states. Second operand 4 states.
[2020-11-25 17:41:47,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:47,137 INFO  L93              Difference]: Finished difference Result 4977 states and 5891 transitions.
[2020-11-25 17:41:47,137 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:41:47,138 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4977 states and 5891 transitions.
[2020-11-25 17:41:47,164 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:41:47,197 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4977 states to 4973 states and 5883 transitions.
[2020-11-25 17:41:47,198 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 17:41:47,201 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 964
[2020-11-25 17:41:47,201 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4973 states and 5883 transitions.
[2020-11-25 17:41:47,212 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:47,212 INFO  L728         BuchiCegarLoop]: Abstraction has 4973 states and 5883 transitions.
[2020-11-25 17:41:47,229 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4973 states and 5883 transitions.
[2020-11-25 17:41:47,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4973 to 4973.
[2020-11-25 17:41:47,293 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4973 states.
[2020-11-25 17:41:47,300 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4973 states to 4973 states and 5883 transitions.
[2020-11-25 17:41:47,300 INFO  L751         BuchiCegarLoop]: Abstraction has 4973 states and 5883 transitions.
[2020-11-25 17:41:47,300 INFO  L631         BuchiCegarLoop]: Abstraction has 4973 states and 5883 transitions.
[2020-11-25 17:41:47,300 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:41:47,301 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4973 states and 5883 transitions.
[2020-11-25 17:41:47,311 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:41:47,311 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:47,311 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:47,313 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:47,313 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND TRUE   revert
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND TRUE   revert
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND TRUE   revert
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:41:47,317 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:47,318 INFO  L82        PathProgramCache]: Analyzing trace with hash 1571875570, now seen corresponding path program 1 times
[2020-11-25 17:41:47,319 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:47,327 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:47,348 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:41:47,348 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:47,348 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:41:47,349 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:47,349 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:41:47,350 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:41:47,350 INFO  L87              Difference]: Start difference. First operand 4973 states and 5883 transitions. cyclomatic complexity: 928 Second operand 4 states.
[2020-11-25 17:41:48,607 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:48,608 INFO  L93              Difference]: Finished difference Result 6385 states and 7329 transitions.
[2020-11-25 17:41:48,608 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:41:48,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6385 states and 7329 transitions.
[2020-11-25 17:41:48,624 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:41:48,646 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6385 states to 6163 states and 7067 transitions.
[2020-11-25 17:41:48,646 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1225
[2020-11-25 17:41:48,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1243
[2020-11-25 17:41:48,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6163 states and 7067 transitions.
[2020-11-25 17:41:48,653 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:48,653 INFO  L728         BuchiCegarLoop]: Abstraction has 6163 states and 7067 transitions.
[2020-11-25 17:41:48,658 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6163 states and 7067 transitions.
[2020-11-25 17:41:48,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6163 to 5597.
[2020-11-25 17:41:48,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5597 states.
[2020-11-25 17:41:48,716 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5597 states to 5597 states and 6326 transitions.
[2020-11-25 17:41:48,716 INFO  L751         BuchiCegarLoop]: Abstraction has 5597 states and 6326 transitions.
[2020-11-25 17:41:48,717 INFO  L631         BuchiCegarLoop]: Abstraction has 5597 states and 6326 transitions.
[2020-11-25 17:41:48,717 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:41:48,717 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5597 states and 6326 transitions.
[2020-11-25 17:41:48,725 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:41:48,725 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:48,725 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:48,729 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:48,729 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND FALSE  !(DType[this] == HKExCoin)
[L4869]  COND TRUE   DType[this] == PausableToken
[L4870]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4870]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4871]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND FALSE  !(DType[this] == HKExCoin)
[L4869]  COND TRUE   DType[this] == PausableToken
[L4870]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4870]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4871]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:41:48,736 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:48,736 INFO  L82        PathProgramCache]: Analyzing trace with hash -11087331, now seen corresponding path program 1 times
[2020-11-25 17:41:48,737 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:48,764 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:48,949 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 17:41:48,949 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:48,949 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 17:41:48,950 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:48,950 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 17:41:48,950 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 17:41:48,950 INFO  L87              Difference]: Start difference. First operand 5597 states and 6326 transitions. cyclomatic complexity: 747 Second operand 6 states.
[2020-11-25 17:41:49,077 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:49,077 INFO  L93              Difference]: Finished difference Result 5627 states and 6356 transitions.
[2020-11-25 17:41:49,077 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 17:41:49,077 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5627 states and 6356 transitions.
[2020-11-25 17:41:49,089 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:41:49,105 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5627 states to 5587 states and 6312 transitions.
[2020-11-25 17:41:49,106 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 17:41:49,106 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 17:41:49,106 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5587 states and 6312 transitions.
[2020-11-25 17:41:49,110 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:49,110 INFO  L728         BuchiCegarLoop]: Abstraction has 5587 states and 6312 transitions.
[2020-11-25 17:41:49,115 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5587 states and 6312 transitions.
[2020-11-25 17:41:49,152 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5587 to 5587.
[2020-11-25 17:41:49,152 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5587 states.
[2020-11-25 17:41:49,158 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5587 states to 5587 states and 6312 transitions.
[2020-11-25 17:41:49,159 INFO  L751         BuchiCegarLoop]: Abstraction has 5587 states and 6312 transitions.
[2020-11-25 17:41:49,159 INFO  L631         BuchiCegarLoop]: Abstraction has 5587 states and 6312 transitions.
[2020-11-25 17:41:49,159 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:41:49,159 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5587 states and 6312 transitions.
[2020-11-25 17:41:49,165 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 17:41:49,165 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:49,165 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:49,168 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:49,168 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND TRUE   DType[this] == HKExCoin
[L4865]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4865]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4866]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND TRUE   DType[this] == HKExCoin
[L4865]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4865]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4866]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:41:49,173 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:49,173 INFO  L82        PathProgramCache]: Analyzing trace with hash -656319977, now seen corresponding path program 1 times
[2020-11-25 17:41:49,174 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:49,220 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:49,522 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 956 trivial. 0 not checked.
[2020-11-25 17:41:49,522 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:49,523 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 17:41:49,523 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:49,523 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 17:41:49,523 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 17:41:49,524 INFO  L87              Difference]: Start difference. First operand 5587 states and 6312 transitions. cyclomatic complexity: 743 Second operand 17 states.
[2020-11-25 17:41:54,179 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:54,179 INFO  L93              Difference]: Finished difference Result 5766 states and 6559 transitions.
[2020-11-25 17:41:54,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 17:41:54,180 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5766 states and 6559 transitions.
[2020-11-25 17:41:54,190 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 17:41:54,206 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5766 states to 5766 states and 6559 transitions.
[2020-11-25 17:41:54,206 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1141
[2020-11-25 17:41:54,207 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1141
[2020-11-25 17:41:54,207 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5766 states and 6559 transitions.
[2020-11-25 17:41:54,212 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:54,212 INFO  L728         BuchiCegarLoop]: Abstraction has 5766 states and 6559 transitions.
[2020-11-25 17:41:54,217 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5766 states and 6559 transitions.
[2020-11-25 17:41:54,263 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5766 to 5718.
[2020-11-25 17:41:54,263 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5718 states.
[2020-11-25 17:41:54,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5718 states to 5718 states and 6483 transitions.
[2020-11-25 17:41:54,270 INFO  L751         BuchiCegarLoop]: Abstraction has 5718 states and 6483 transitions.
[2020-11-25 17:41:54,270 INFO  L631         BuchiCegarLoop]: Abstraction has 5718 states and 6483 transitions.
[2020-11-25 17:41:54,270 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:41:54,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5718 states and 6483 transitions.
[2020-11-25 17:41:54,276 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 17:41:54,276 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:54,276 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:54,279 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:54,279 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND TRUE   __exception
[L2096]              __tmp__Balance := Balance;
[L2097]              __tmp__DType := DType;
[L2098]              __tmp__Alloc := Alloc;
[L2099]              __tmp__balance_ADDR := balance_ADDR;
[L2100]              __tmp__M_Ref_int := M_Ref_int;
[L2101]              __tmp__sum_balances0 := sum_balances0;
[L2102]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2103]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2104]              __tmp__sum_allowed1 := sum_allowed1;
[L2105]              __tmp__M_int_Ref := M_int_Ref;
[L2106]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L2107]              __tmp__sum := sum;
[L2108]              __tmp__M_int_int := M_int_int;
[L2109]              __tmp__Length := Length;
[L2110]              __tmp__now := now;
[L2111]              __tmp__owner_Ownable := owner_Ownable;
[L2112]              __tmp__balances_BasicToken := balances_BasicToken;
[L2113]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2114]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L2115]              __tmp__paused_Pausable := paused_Pausable;
[L2116]              __tmp__name_HKExCoin := name_HKExCoin;
[L2117]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L2118]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L2119]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L2120]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L2121]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L2122]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L2123]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L2124]  CALL        call HKExCoin_HKExCoin__fail(this, msgsender_MSG, msgvalue_MSG);
[L5042]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L5042]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L5043]  COND FALSE  !(revert)
[L5046]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4267]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4268]  COND FALSE  !(revert)
[L4271]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4252]              assume msgsender_MSG != null;
[L4253]              __tmp__Balance[this] := 0;
[L4271]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4272]  COND FALSE  !(revert)
[L5046]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5047]  COND FALSE  !(revert)
[L5050]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4138]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4117]              assume msgsender_MSG != null;
[L4118]              __tmp__Balance[this] := 0;
[L4119]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4120]              __tmp__sum_balances0[this] := 0;
[L4121]              __tmp__totalSupply__BasicToken[this] := 0;
[L4142]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L5050]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5051]  COND FALSE  !(revert)
[L5054]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4311]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4312]  COND FALSE  !(revert)
[L4315]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4267]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4268]  COND FALSE  !(revert)
[L4271]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4252]              assume msgsender_MSG != null;
[L4253]              __tmp__Balance[this] := 0;
[L4271]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4272]  COND FALSE  !(revert)
[L4315]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4138]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4117]              assume msgsender_MSG != null;
[L4118]              __tmp__Balance[this] := 0;
[L4119]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4120]              __tmp__sum_balances0[this] := 0;
[L4121]              __tmp__totalSupply__BasicToken[this] := 0;
[L4142]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4319]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4292]              assume msgsender_MSG != null;
[L4293]              __tmp__Balance[this] := 0;
[L4294]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4295]              __tmp__sum_allowed1[this] := 0;
[L4323]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L5054]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5055]  COND FALSE  !(revert)
[L5058]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3952]              assume msgsender_MSG != null;
[L3953]              __tmp__Balance[this] := 0;
[L3954]              __tmp__owner_Ownable[this] := null;
[L3956]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3971]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3972]  COND FALSE  !(revert)
[L5058]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5059]  COND FALSE  !(revert)
[L5062]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3952]              assume msgsender_MSG != null;
[L3953]              __tmp__Balance[this] := 0;
[L3954]              __tmp__owner_Ownable[this] := null;
[L3956]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3971]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3972]  COND FALSE  !(revert)
[L4563]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4564]  COND FALSE  !(revert)
[L4567]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4546]              assume msgsender_MSG != null;
[L4547]              __tmp__Balance[this] := 0;
[L4548]              __tmp__paused_Pausable[this] := false;
[L4567]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L5062]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5063]  COND FALSE  !(revert)
[L5066]  CALL        call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4669]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4669]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4670]  COND FALSE  !(revert)
[L4673]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4267]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4268]  COND FALSE  !(revert)
[L4271]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4252]              assume msgsender_MSG != null;
[L4253]              __tmp__Balance[this] := 0;
[L4271]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4272]  COND FALSE  !(revert)
[L4673]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4674]  COND FALSE  !(revert)
[L4677]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4138]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4117]              assume msgsender_MSG != null;
[L4118]              __tmp__Balance[this] := 0;
[L4119]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4120]              __tmp__sum_balances0[this] := 0;
[L4121]              __tmp__totalSupply__BasicToken[this] := 0;
[L4142]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4677]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4678]  COND FALSE  !(revert)
[L4681]  CALL        call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4311]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4311]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4312]  COND FALSE  !(revert)
[L4315]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4267]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4267]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4268]  COND FALSE  !(revert)
[L4271]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4252]              assume msgsender_MSG != null;
[L4253]              __tmp__Balance[this] := 0;
[L4271]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4272]  COND FALSE  !(revert)
[L4315]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4138]  CALL        call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4100]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4085]              assume msgsender_MSG != null;
[L4086]              __tmp__Balance[this] := 0;
[L4100]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4101]  COND FALSE  !(revert)
[L4138]  RET         call ERC20Basic_ERC20Basic__fail(this, msgsender_MSG, msgvalue_MSG);
[L4139]  COND FALSE  !(revert)
[L4142]  CALL        call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4117]              assume msgsender_MSG != null;
[L4118]              __tmp__Balance[this] := 0;
[L4119]              __tmp__balances_BasicToken[this] := zeroRefintArr();
[L4120]              __tmp__sum_balances0[this] := 0;
[L4121]              __tmp__totalSupply__BasicToken[this] := 0;
[L4142]  RET         call BasicToken_BasicToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4143]  COND FALSE  !(revert)
[L4319]  RET         call BasicToken_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4292]              assume msgsender_MSG != null;
[L4293]              __tmp__Balance[this] := 0;
[L4294]              __tmp__allowed_StandardToken[this] := zeroRefRefintArr();
[L4295]              __tmp__sum_allowed1[this] := 0;
[L4323]  RET         call StandardToken_StandardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4681]  RET         call StandardToken_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  COND FALSE  !(revert)
[L4685]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3952]              assume msgsender_MSG != null;
[L3953]              __tmp__Balance[this] := 0;
[L3954]              __tmp__owner_Ownable[this] := null;
[L3956]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3971]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3972]  COND FALSE  !(revert)
[L4685]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]  COND FALSE  !(revert)
[L4689]  CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4563]  CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3971]  CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3952]              assume msgsender_MSG != null;
[L3953]              __tmp__Balance[this] := 0;
[L3954]              __tmp__owner_Ownable[this] := null;
[L3956]              __tmp__owner_Ownable[this] := msgsender_MSG;
[L3971]  RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3972]  COND FALSE  !(revert)
[L4563]  RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4564]  COND FALSE  !(revert)
[L4567]  CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4546]              assume msgsender_MSG != null;
[L4547]              __tmp__Balance[this] := 0;
[L4548]              __tmp__paused_Pausable[this] := false;
[L4567]  RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4689]  RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4693]  CALL        call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4654]              assume msgsender_MSG != null;
[L4655]              __tmp__Balance[this] := 0;
[L4693]  RET         call PausableToken_PausableToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4694]  COND FALSE  !(revert)
[L5066]  RET         call PausableToken_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L5067]  COND FALSE  !(revert)
[L5070]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4986]              assume msgsender_MSG != null;
[L4987]              __tmp__Balance[this] := 0;
[L4988]              __tmp__name_HKExCoin[this] := 1400933812;
[L4989]              __tmp__symbol_HKExCoin[this] := -256252482;
[L4990]              __tmp__standard_HKExCoin[this] := -941536354;
[L4991]              __tmp__decimals_HKExCoin[this] := 18;
[L4992]              __var_22 := __tmp__decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4993]              __tmp__INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, __tmp__decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4995]  CALL        call __var_23 := FreshRefGenerator__fail();
[L3828]              havoc newRef;
[L3829]              assume __tmp__Alloc[newRef] == false;
[L3830]              __tmp__Alloc[newRef] := true;
[L3831]              assume newRef != null;
[L4995]  RET         call __var_23 := FreshRefGenerator__fail();
[L4996]  COND FALSE  !(revert)
[L4999]              __tmp__allocations_HKExCoin[this] := __var_23;
[L5001]              __tmp__alloc_allocations_HKExCoin_lvl0[__tmp__allocations_HKExCoin[this]] := zeroRefboolArr();
[L5003]              __tmp__totalSupply__BasicToken[this] := __tmp__INITIAL_SUPPLY_HKExCoin[this];
[L5004]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L5005]              __tmp__balances_BasicToken[this][msgsender_MSG] := __tmp__INITIAL_SUPPLY_HKExCoin[this];
[L5006]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L5070]  RET         call HKExCoin_HKExCoin_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5071]  COND FALSE  !(revert)
[L2124]  RET         call HKExCoin_HKExCoin__fail(this, msgsender_MSG, msgvalue_MSG);
[L2125]              assume revert || gas < 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND TRUE   DType[this] == HKExCoin
[L4865]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4865]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4866]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND TRUE   DType[this] == HKExCoin
[L4865]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4865]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4866]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:41:54,284 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:54,284 INFO  L82        PathProgramCache]: Analyzing trace with hash -2146818212, now seen corresponding path program 1 times
[2020-11-25 17:41:54,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:54,301 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:54,426 INFO  L134       CoverageAnalysis]: Checked inductivity of 957 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 957 trivial. 0 not checked.
[2020-11-25 17:41:54,426 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:54,426 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:41:54,427 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:54,427 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:41:54,427 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:41:54,427 INFO  L87              Difference]: Start difference. First operand 5718 states and 6483 transitions. cyclomatic complexity: 785 Second operand 4 states.
[2020-11-25 17:41:55,015 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:55,015 INFO  L93              Difference]: Finished difference Result 7118 states and 8179 transitions.
[2020-11-25 17:41:55,015 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:41:55,015 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7118 states and 8179 transitions.
[2020-11-25 17:41:55,030 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-11-25 17:41:55,048 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7118 states to 6410 states and 7388 transitions.
[2020-11-25 17:41:55,048 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1303
[2020-11-25 17:41:55,048 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1303
[2020-11-25 17:41:55,049 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6410 states and 7388 transitions.
[2020-11-25 17:41:55,053 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:55,053 INFO  L728         BuchiCegarLoop]: Abstraction has 6410 states and 7388 transitions.
[2020-11-25 17:41:55,058 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6410 states and 7388 transitions.
[2020-11-25 17:41:55,103 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6410 to 5998.
[2020-11-25 17:41:55,104 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5998 states.
[2020-11-25 17:41:55,111 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5998 states to 5998 states and 6840 transitions.
[2020-11-25 17:41:55,111 INFO  L751         BuchiCegarLoop]: Abstraction has 5998 states and 6840 transitions.
[2020-11-25 17:41:55,111 INFO  L631         BuchiCegarLoop]: Abstraction has 5998 states and 6840 transitions.
[2020-11-25 17:41:55,111 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:41:55,111 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5998 states and 6840 transitions.
[2020-11-25 17:41:55,117 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 17:41:55,118 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:55,118 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:55,119 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:55,119 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_int_Ref := M_int_Ref;
[L1848]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]              __tmp__sum := sum;
[L1850]              __tmp__M_int_int := M_int_int;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__paused_Pausable := paused_Pausable;
[L1858]              __tmp__name_HKExCoin := name_HKExCoin;
[L1859]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND TRUE   !!__tmp__paused_Pausable[this]
[L7613]              revert := true;
[L4835]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]              assume revert || gas < 0;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_int_Ref := M_int_Ref;
[L1848]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]              __tmp__sum := sum;
[L1850]              __tmp__M_int_int := M_int_int;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__paused_Pausable := paused_Pausable;
[L1858]              __tmp__name_HKExCoin := name_HKExCoin;
[L1859]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND TRUE   !!__tmp__paused_Pausable[this]
[L7613]              revert := true;
[L4835]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]              assume revert || gas < 0;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:41:55,124 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:55,124 INFO  L82        PathProgramCache]: Analyzing trace with hash 837612802, now seen corresponding path program 1 times
[2020-11-25 17:41:55,125 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:55,140 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:55,280 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 957 trivial. 0 not checked.
[2020-11-25 17:41:55,280 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:55,280 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 17:41:55,280 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:55,281 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 17:41:55,281 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 17:41:55,281 INFO  L87              Difference]: Start difference. First operand 5998 states and 6840 transitions. cyclomatic complexity: 862 Second operand 14 states.
[2020-11-25 17:41:59,359 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:41:59,359 INFO  L93              Difference]: Finished difference Result 9176 states and 10671 transitions.
[2020-11-25 17:41:59,359 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 17:41:59,360 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9176 states and 10671 transitions.
[2020-11-25 17:41:59,377 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 17:41:59,398 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9176 states to 9176 states and 10671 transitions.
[2020-11-25 17:41:59,398 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1873
[2020-11-25 17:41:59,399 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1873
[2020-11-25 17:41:59,399 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9176 states and 10671 transitions.
[2020-11-25 17:41:59,404 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:41:59,404 INFO  L728         BuchiCegarLoop]: Abstraction has 9176 states and 10671 transitions.
[2020-11-25 17:41:59,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9176 states and 10671 transitions.
[2020-11-25 17:41:59,456 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9176 to 8318.
[2020-11-25 17:41:59,456 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8318 states.
[2020-11-25 17:41:59,467 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8318 states to 8318 states and 9812 transitions.
[2020-11-25 17:41:59,467 INFO  L751         BuchiCegarLoop]: Abstraction has 8318 states and 9812 transitions.
[2020-11-25 17:41:59,467 INFO  L631         BuchiCegarLoop]: Abstraction has 8318 states and 9812 transitions.
[2020-11-25 17:41:59,468 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:41:59,468 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8318 states and 9812 transitions.
[2020-11-25 17:41:59,477 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 28
[2020-11-25 17:41:59,477 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:41:59,477 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:41:59,478 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:41:59,478 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_int_Ref := M_int_Ref;
[L1848]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]              __tmp__sum := sum;
[L1850]              __tmp__M_int_int := M_int_int;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__paused_Pausable := paused_Pausable;
[L1858]              __tmp__name_HKExCoin := name_HKExCoin;
[L1859]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND FALSE  !(!!__tmp__paused_Pausable[this])
[L4835]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND FALSE  !(revert)
[L4839]  COND TRUE   __tmp__DType[this] == HKExCoin
[L4840]  CALL        call __var_15 := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4440]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4441]              __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4442]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4443]              __ret_0_ := true;
[L4840]  RET         call __var_15 := approve~address~uint256_StandardToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4841]  COND FALSE  !(revert)
[L4852]              __ret_0_ := __var_15;
[L1866]  RET         call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]              assume revert || gas < 0;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND TRUE   choice == 20
[L8543]              gas := gas - 21000;
[L8544]  COND TRUE   gas >= 0
[L8545]              assume msgvalue_MSG == 0;
[L8546]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L322]               havoc __exception;
[L323]               revert := false;
[L324]   COND FALSE  !(__exception)
[L356]   CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4078]              __ret_0_ := owner_Ownable[this];
[L356]   RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L357]               assume !revert && gas >= 0;
[L8546]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:41:59,482 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:41:59,483 INFO  L82        PathProgramCache]: Analyzing trace with hash 807190943, now seen corresponding path program 1 times
[2020-11-25 17:41:59,483 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:41:59,497 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:41:59,595 INFO  L134       CoverageAnalysis]: Checked inductivity of 963 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 963 trivial. 0 not checked.
[2020-11-25 17:41:59,596 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:41:59,596 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 17:41:59,596 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:41:59,596 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 17:41:59,596 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 17:41:59,596 INFO  L87              Difference]: Start difference. First operand 8318 states and 9812 transitions. cyclomatic complexity: 1526 Second operand 5 states.
[2020-11-25 17:42:00,288 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:42:00,288 INFO  L93              Difference]: Finished difference Result 8690 states and 10280 transitions.
[2020-11-25 17:42:00,288 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:42:00,288 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8690 states and 10280 transitions.
[2020-11-25 17:42:00,310 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-25 17:42:00,334 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8690 states to 7520 states and 9046 transitions.
[2020-11-25 17:42:00,335 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1194
[2020-11-25 17:42:00,335 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1376
[2020-11-25 17:42:00,335 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7520 states and 9046 transitions.
[2020-11-25 17:42:00,341 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:42:00,341 INFO  L728         BuchiCegarLoop]: Abstraction has 7520 states and 9046 transitions.
[2020-11-25 17:42:00,345 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7520 states and 9046 transitions.
[2020-11-25 17:42:00,391 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7520 to 6636.
[2020-11-25 17:42:00,391 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6636 states.
[2020-11-25 17:42:00,400 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6636 states to 6636 states and 7814 transitions.
[2020-11-25 17:42:00,401 INFO  L751         BuchiCegarLoop]: Abstraction has 6636 states and 7814 transitions.
[2020-11-25 17:42:00,401 INFO  L631         BuchiCegarLoop]: Abstraction has 6636 states and 7814 transitions.
[2020-11-25 17:42:00,401 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:42:00,401 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6636 states and 7814 transitions.
[2020-11-25 17:42:00,408 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 22
[2020-11-25 17:42:00,408 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:42:00,408 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:42:00,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:42:00,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND FALSE  !(choice == 13)
[L8593]  COND FALSE  !(choice == 12)
[L8600]  COND TRUE   choice == 11
[L8601]              gas := gas - 21000;
[L8602]  COND TRUE   gas >= 0
[L8603]              assume _subtractedValue_s716 >= 0 && _subtractedValue_s716 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8604]              assume msgvalue_MSG == 0;
[L8605]  CALL        call success_s716 := decreaseApproval~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L1983]              havoc __exception;
[L1984]              revert := false;
[L1985]  COND FALSE  !(__exception)
[L2017]  CALL        call success_s716 := decreaseApproval~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L4960]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4960]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]  COND FALSE  !(revert)
[L4964]  COND FALSE  !(DType[this] == HKExCoin)
[L4969]  COND TRUE   DType[this] == PausableToken
[L4970]  CALL        call __var_19 := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L4524]              oldValue_s561 := allowed_StandardToken[this][msgsender_MSG][_spender_s561];
[L4525]  COND TRUE   _subtractedValue_s561 >= oldValue_s561
[L4526]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s561];
[L4527]              allowed_StandardToken[this][msgsender_MSG][_spender_s561] := 0;
[L4528]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s561];
[L4538]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4539]              __ret_0_ := true;
[L4970]  RET         call __var_19 := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L4971]  COND FALSE  !(revert)
[L4977]              success_s716 := __var_19;
[L2017]  RET         call success_s716 := decreaseApproval~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L2018]              assume !revert && gas >= 0;
[L8605]  RET         call success_s716 := decreaseApproval~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L8689]  RET         call CorralChoice_HKExCoin(this);
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND TRUE   DType[this] == HKExCoin
[L4865]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4865]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4866]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND TRUE   choice == 20
[L8543]              gas := gas - 21000;
[L8544]  COND FALSE  !(gas >= 0)
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:42:00,414 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:42:00,414 INFO  L82        PathProgramCache]: Analyzing trace with hash -895636394, now seen corresponding path program 1 times
[2020-11-25 17:42:00,415 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:42:00,432 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:42:00,591 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1030 trivial. 0 not checked.
[2020-11-25 17:42:00,591 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:42:00,591 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 17:42:00,592 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:42:00,592 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 17:42:00,592 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 17:42:00,592 INFO  L87              Difference]: Start difference. First operand 6636 states and 7814 transitions. cyclomatic complexity: 1212 Second operand 6 states.
[2020-11-25 17:42:00,656 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:42:00,656 INFO  L93              Difference]: Finished difference Result 6676 states and 7850 transitions.
[2020-11-25 17:42:00,656 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 17:42:00,656 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6676 states and 7850 transitions.
[2020-11-25 17:42:00,670 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 22
[2020-11-25 17:42:00,690 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6676 states to 6616 states and 7786 transitions.
[2020-11-25 17:42:00,690 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1236
[2020-11-25 17:42:00,691 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1236
[2020-11-25 17:42:00,691 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6616 states and 7786 transitions.
[2020-11-25 17:42:00,696 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:42:00,696 INFO  L728         BuchiCegarLoop]: Abstraction has 6616 states and 7786 transitions.
[2020-11-25 17:42:00,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6616 states and 7786 transitions.
[2020-11-25 17:42:00,745 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6616 to 6616.
[2020-11-25 17:42:00,745 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6616 states.
[2020-11-25 17:42:00,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6616 states to 6616 states and 7786 transitions.
[2020-11-25 17:42:00,755 INFO  L751         BuchiCegarLoop]: Abstraction has 6616 states and 7786 transitions.
[2020-11-25 17:42:00,755 INFO  L631         BuchiCegarLoop]: Abstraction has 6616 states and 7786 transitions.
[2020-11-25 17:42:00,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 17:42:00,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6616 states and 7786 transitions.
[2020-11-25 17:42:00,763 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 22
[2020-11-25 17:42:00,763 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:42:00,763 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:42:00,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:42:00,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND FALSE  !(choice == 13)
[L8593]  COND FALSE  !(choice == 12)
[L8600]  COND TRUE   choice == 11
[L8601]              gas := gas - 21000;
[L8602]  COND TRUE   gas >= 0
[L8603]              assume _subtractedValue_s716 >= 0 && _subtractedValue_s716 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8604]              assume msgvalue_MSG == 0;
[L8605]  CALL        call success_s716 := decreaseApproval~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L1983]              havoc __exception;
[L1984]              revert := false;
[L1985]  COND FALSE  !(__exception)
[L2017]  CALL        call success_s716 := decreaseApproval~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L4960]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4960]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4961]  COND FALSE  !(revert)
[L4964]  COND TRUE   DType[this] == HKExCoin
[L4965]  CALL        call __var_19 := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L4524]              oldValue_s561 := allowed_StandardToken[this][msgsender_MSG][_spender_s561];
[L4525]  COND TRUE   _subtractedValue_s561 >= oldValue_s561
[L4526]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s561];
[L4527]              allowed_StandardToken[this][msgsender_MSG][_spender_s561] := 0;
[L4528]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s561];
[L4538]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4539]              __ret_0_ := true;
[L4965]  RET         call __var_19 := decreaseApproval~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L4966]  COND FALSE  !(revert)
[L4977]              success_s716 := __var_19;
[L2017]  RET         call success_s716 := decreaseApproval~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L2018]              assume !revert && gas >= 0;
[L8605]  RET         call success_s716 := decreaseApproval~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s716, _subtractedValue_s716);
[L8689]  RET         call CorralChoice_HKExCoin(this);
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND FALSE  !(__exception)
[L1869]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4860]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4860]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4861]  COND FALSE  !(revert)
[L4864]  COND TRUE   DType[this] == HKExCoin
[L4865]  CALL        call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4449]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4450]              allowed_StandardToken[this][msgsender_MSG][_spender_s443] := _value_s443;
[L4451]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_StandardToken[this][msgsender_MSG][_spender_s443];
[L4452]              assert { :EventEmitted "Approval_StandardToken" } true;
[L4453]              __ret_0_ := true;
[L4865]  RET         call __var_15 := approve~address~uint256_StandardToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4866]  COND FALSE  !(revert)
[L4877]              __ret_0_ := __var_15;
[L1869]  RET         call __ret_0_ := approve~address~uint256_PausableToken__success(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1870]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && allowed_StandardToken[this][msgsender_MSG][_spender_s680] == _value_s680) && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this][p1][p2] == old(allowed_StandardToken[this][p1][p2])) && name_HKExCoin[this] == old(name_HKExCoin[this])) && symbol_HKExCoin[this] == old(symbol_HKExCoin[this])) && standard_HKExCoin[this] == old(standard_HKExCoin[this])) && M_Ref_Ref[allocations_HKExCoin[this]] == old(M_Ref_Ref[allocations_HKExCoin[this]])) && paused_Pausable[this] == old(paused_Pausable[this])) && owner_Ownable[this] == old(owner_Ownable[this]));
[L3]                 revert := revert_hold;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND TRUE   choice == 20
[L8543]              gas := gas - 21000;
[L8544]  COND FALSE  !(gas >= 0)
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:42:00,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:42:00,769 INFO  L82        PathProgramCache]: Analyzing trace with hash -1132200529, now seen corresponding path program 1 times
[2020-11-25 17:42:00,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:42:00,795 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:42:01,005 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1031 trivial. 0 not checked.
[2020-11-25 17:42:01,005 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:42:01,005 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 17:42:01,006 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:42:01,006 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 17:42:01,006 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-11-25 17:42:01,006 INFO  L87              Difference]: Start difference. First operand 6616 states and 7786 transitions. cyclomatic complexity: 1204 Second operand 9 states.
[2020-11-25 17:42:02,679 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:42:02,679 INFO  L93              Difference]: Finished difference Result 6623 states and 7741 transitions.
[2020-11-25 17:42:02,679 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 17:42:02,679 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6623 states and 7741 transitions.
[2020-11-25 17:42:02,693 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 14
[2020-11-25 17:42:02,707 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6623 states to 6611 states and 7727 transitions.
[2020-11-25 17:42:02,707 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1206
[2020-11-25 17:42:02,707 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1212
[2020-11-25 17:42:02,707 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6611 states and 7727 transitions.
[2020-11-25 17:42:02,711 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:42:02,711 INFO  L728         BuchiCegarLoop]: Abstraction has 6611 states and 7727 transitions.
[2020-11-25 17:42:02,714 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6611 states and 7727 transitions.
[2020-11-25 17:42:02,745 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6611 to 6540.
[2020-11-25 17:42:02,745 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6540 states.
[2020-11-25 17:42:02,752 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6540 states to 6540 states and 7581 transitions.
[2020-11-25 17:42:02,752 INFO  L751         BuchiCegarLoop]: Abstraction has 6540 states and 7581 transitions.
[2020-11-25 17:42:02,752 INFO  L631         BuchiCegarLoop]: Abstraction has 6540 states and 7581 transitions.
[2020-11-25 17:42:02,752 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 17:42:02,752 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6540 states and 7581 transitions.
[2020-11-25 17:42:02,758 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 17:42:02,758 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:42:02,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:42:02,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:42:02,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND FALSE  !(choice == 13)
[L8593]  COND FALSE  !(choice == 12)
[L8600]  COND FALSE  !(choice == 11)
[L8607]  COND FALSE  !(choice == 10)
[L8613]  COND FALSE  !(choice == 9)
[L8619]  COND TRUE   choice == 8
[L8620]              gas := gas - 21000;
[L8621]  COND TRUE   gas >= 0
[L8622]              assume msgvalue_MSG == 0;
[L8623]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1457]              havoc __exception;
[L1458]              revert := false;
[L1459]  COND FALSE  !(__exception)
[L1491]  CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4627]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7604]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4627]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4628]  COND FALSE  !(revert)
[L4631]  CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]  COND FALSE  !(!paused_Pausable[this])
[L4631]  RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4632]  COND FALSE  !(revert)
[L4635]              paused_Pausable[this] := false;
[L4636]              assert { :EventEmitted "Unpause_Pausable" } true;
[L1491]  RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1492]              assume !revert && gas >= 0;
[L8623]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L8689]  RET         call CorralChoice_HKExCoin(this);
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_int_Ref := M_int_Ref;
[L1848]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]              __tmp__sum := sum;
[L1850]              __tmp__M_int_int := M_int_int;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__paused_Pausable := paused_Pausable;
[L1858]              __tmp__name_HKExCoin := name_HKExCoin;
[L1859]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND TRUE   !!__tmp__paused_Pausable[this]
[L7613]              revert := true;
[L4835]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]              assume revert || gas < 0;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND FALSE  !(choice == 13)
[L8593]  COND FALSE  !(choice == 12)
[L8600]  COND FALSE  !(choice == 11)
[L8607]  COND FALSE  !(choice == 10)
[L8613]  COND FALSE  !(choice == 9)
[L8619]  COND FALSE  !(choice == 8)
[L8625]  COND FALSE  !(choice == 7)
[L8631]  COND FALSE  !(choice == 6)
[L8637]  COND FALSE  !(choice == 5)
[L8643]  COND FALSE  !(choice == 4)
[L8649]  COND FALSE  !(choice == 3)
[L8655]  COND FALSE  !(choice == 2)
[L8662]  COND FALSE  !(choice == 1)
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:42:02,764 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:42:02,764 INFO  L82        PathProgramCache]: Analyzing trace with hash -541502567, now seen corresponding path program 1 times
[2020-11-25 17:42:02,765 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:42:02,781 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:42:02,972 INFO  L134       CoverageAnalysis]: Checked inductivity of 1031 backedges. 7 proven. 67 refuted. 0 times theorem prover too weak. 957 trivial. 0 not checked.
[2020-11-25 17:42:02,972 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:42:02,972 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 17:42:02,973 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:42:02,973 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 17:42:02,973 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 17:42:02,973 INFO  L87              Difference]: Start difference. First operand 6540 states and 7581 transitions. cyclomatic complexity: 1069 Second operand 14 states.
[2020-11-25 17:42:05,043 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:42:05,043 INFO  L93              Difference]: Finished difference Result 6544 states and 7592 transitions.
[2020-11-25 17:42:05,044 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 17:42:05,044 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6544 states and 7592 transitions.
[2020-11-25 17:42:05,054 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 17:42:05,066 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6544 states to 6544 states and 7592 transitions.
[2020-11-25 17:42:05,066 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1198
[2020-11-25 17:42:05,067 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1198
[2020-11-25 17:42:05,067 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6544 states and 7592 transitions.
[2020-11-25 17:42:05,070 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:42:05,071 INFO  L728         BuchiCegarLoop]: Abstraction has 6544 states and 7592 transitions.
[2020-11-25 17:42:05,074 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6544 states and 7592 transitions.
[2020-11-25 17:42:05,103 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6544 to 6542.
[2020-11-25 17:42:05,104 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6542 states.
[2020-11-25 17:42:05,111 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6542 states to 6542 states and 7587 transitions.
[2020-11-25 17:42:05,111 INFO  L751         BuchiCegarLoop]: Abstraction has 6542 states and 7587 transitions.
[2020-11-25 17:42:05,111 INFO  L631         BuchiCegarLoop]: Abstraction has 6542 states and 7587 transitions.
[2020-11-25 17:42:05,111 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 17:42:05,111 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6542 states and 7587 transitions.
[2020-11-25 17:42:05,117 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 17:42:05,117 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:42:05,117 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:42:05,118 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:42:05,119 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_PausableToken0 := false;
[L3]                 call_approve_PausableToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8679]              assume null == 0;
[L8680]  CALL        call this := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L8680]  RET         call this := FreshRefGenerator__success();
[L8681]              assume now >= 0;
[L8682]              assume DType[this] == HKExCoin;
[L8683]              assume msgvalue_MSG == 0;
[L8684]              gas := gas - 53000;
[L8685]  CALL        call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
[L8686]              assume !revert && gas >= 0;
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND FALSE  !(choice == 13)
[L8593]  COND FALSE  !(choice == 12)
[L8600]  COND FALSE  !(choice == 11)
[L8607]  COND FALSE  !(choice == 10)
[L8613]  COND TRUE   choice == 9
[L8614]              gas := gas - 21000;
[L8615]  COND TRUE   gas >= 0
[L8616]              assume msgvalue_MSG == 0;
[L8617]  CALL        call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1384]              havoc __exception;
[L1385]              revert := false;
[L1386]  COND FALSE  !(__exception)
[L1418]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4600]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7604]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4600]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4604]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L4608]              paused_Pausable[this] := true;
[L4609]              assert { :EventEmitted "Pause_Pausable" } true;
[L1418]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1419]              assume !revert && gas >= 0;
[L8617]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L8689]  RET         call CorralChoice_HKExCoin(this);
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_int_Ref := M_int_Ref;
[L1848]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]              __tmp__sum := sum;
[L1850]              __tmp__M_int_int := M_int_int;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__paused_Pausable := paused_Pausable;
[L1858]              __tmp__name_HKExCoin := name_HKExCoin;
[L1859]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND TRUE   !!__tmp__paused_Pausable[this]
[L7613]              revert := true;
[L4835]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]              assume revert || gas < 0;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

Loop:
[L8689]  CALL        call CorralChoice_HKExCoin(this);
[L8484]              havoc msgsender_MSG;
[L8485]              havoc msgvalue_MSG;
[L8486]              havoc choice;
[L8487]              havoc __ret_0_owner;
[L8488]              havoc _newOwner_s133;
[L8489]              havoc __ret_0_totalSupply;
[L8490]              havoc _owner_s278;
[L8491]              havoc __ret_0_balanceOf;
[L8492]              havoc _to_s828;
[L8493]              havoc _value_s828;
[L8494]              havoc __ret_0_transfer;
[L8495]              havoc _owner_s459;
[L8496]              havoc _spender_s459;
[L8497]              havoc __ret_0_allowance;
[L8498]              havoc _from_s858;
[L8499]              havoc _to_s858;
[L8500]              havoc _value_s858;
[L8501]              havoc __ret_0_transferFrom;
[L8502]              havoc _spender_s680;
[L8503]              havoc _value_s680;
[L8504]              havoc __ret_0_approve;
[L8505]              havoc _spender_s698;
[L8506]              havoc _addedValue_s698;
[L8507]              havoc success_s698;
[L8508]              havoc _spender_s716;
[L8509]              havoc _subtractedValue_s716;
[L8510]              havoc success_s716;
[L8511]              havoc __ret_0_paused;
[L8512]              havoc __ret_0_name;
[L8513]              havoc __ret_0_symbol;
[L8514]              havoc __ret_0_standard;
[L8515]              havoc __ret_0_decimals;
[L8516]              havoc __ret_0_INITIAL_SUPPLY;
[L8517]              havoc arg1229_s0;
[L8518]              havoc arg1230_s0;
[L8519]              havoc __ret_0_allocations;
[L8520]              havoc _address_s1226;
[L8521]              havoc total_value_s1226;
[L8522]              havoc times_s1226;
[L8523]              havoc balanceRequires_s1226;
[L8524]              havoc __ret_0_setAllocation;
[L8525]              havoc tmpNow;
[L8526]              havoc gas;
[L8527]              assume gas > 4000000 && gas <= 8000000;
[L8528]              tmpNow := now;
[L8529]              havoc now;
[L8530]              assume now > tmpNow;
[L8531]              assume msgsender_MSG != null;
[L8532]              assume DType[msgsender_MSG] != SafeMath;
[L8533]              assume DType[msgsender_MSG] != Ownable;
[L8534]              assume DType[msgsender_MSG] != ERC20Basic;
[L8535]              assume DType[msgsender_MSG] != BasicToken;
[L8536]              assume DType[msgsender_MSG] != ERC20;
[L8537]              assume DType[msgsender_MSG] != StandardToken;
[L8538]              assume DType[msgsender_MSG] != Pausable;
[L8539]              assume DType[msgsender_MSG] != PausableToken;
[L8540]              assume DType[msgsender_MSG] != HKExCoin;
[L8541]              Alloc[msgsender_MSG] := true;
[L8542]  COND FALSE  !(choice == 20)
[L8548]  COND FALSE  !(choice == 19)
[L8554]  COND FALSE  !(choice == 18)
[L8560]  COND FALSE  !(choice == 17)
[L8566]  COND FALSE  !(choice == 16)
[L8573]  COND FALSE  !(choice == 15)
[L8579]  COND FALSE  !(choice == 14)
[L8586]  COND TRUE   choice == 13
[L8587]              gas := gas - 21000;
[L8588]  COND TRUE   gas >= 0
[L8589]              assume _value_s680 >= 0 && _value_s680 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8590]              assume msgvalue_MSG == 0;
[L8591]  CALL        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                 call_approve_PausableToken0 := true;
[L3]                 call_approve_PausableToken0 := false;
[L3]                 revert := revert_hold;
[L1835]              havoc __exception;
[L1836]              revert := false;
[L1837]  COND TRUE   __exception
[L1838]              __tmp__Balance := Balance;
[L1839]              __tmp__DType := DType;
[L1840]              __tmp__Alloc := Alloc;
[L1841]              __tmp__balance_ADDR := balance_ADDR;
[L1842]              __tmp__M_Ref_int := M_Ref_int;
[L1843]              __tmp__sum_balances0 := sum_balances0;
[L1844]              __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]              __tmp__sum_allowed1 := sum_allowed1;
[L1847]              __tmp__M_int_Ref := M_int_Ref;
[L1848]              __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]              __tmp__sum := sum;
[L1850]              __tmp__M_int_int := M_int_int;
[L1851]              __tmp__Length := Length;
[L1852]              __tmp__now := now;
[L1853]              __tmp__owner_Ownable := owner_Ownable;
[L1854]              __tmp__balances_BasicToken := balances_BasicToken;
[L1855]              __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]              __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]              __tmp__paused_Pausable := paused_Pausable;
[L1858]              __tmp__name_HKExCoin := name_HKExCoin;
[L1859]              __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]              __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]              __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]              __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]              __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]              __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]              __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND TRUE   !!__tmp__paused_Pausable[this]
[L7613]              revert := true;
[L4835]  RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND TRUE   revert
[L1866]  RET         call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]              assume revert || gas < 0;
[L8591]  RET         call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L8689]  RET         call CorralChoice_HKExCoin(this);

[2020-11-25 17:42:05,123 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:42:05,123 INFO  L82        PathProgramCache]: Analyzing trace with hash 27135095, now seen corresponding path program 1 times
[2020-11-25 17:42:05,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:42:05,143 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:42:05,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:42:05,351 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:42:05,351 INFO  L82        PathProgramCache]: Analyzing trace with hash 2091071099, now seen corresponding path program 1 times
[2020-11-25 17:42:05,352 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:42:05,358 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:42:05,363 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:42:05,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:42:05,379 INFO  L82        PathProgramCache]: Analyzing trace with hash -802640315, now seen corresponding path program 1 times
[2020-11-25 17:42:05,379 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:42:05,411 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:42:05,442 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
[2020-11-25 17:42:05,858 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification that was a NOOP. DAG size: 295
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3967 to 7933
[2020-11-25 17:42:06,343 WARN  L188               SmtUtils]: Spent 469.00 ms on a formula simplification. DAG size of input: 233 DAG size of output: 233
[2020-11-25 17:42:07,040 WARN  L188               SmtUtils]: Spent 693.00 ms on a formula simplification. DAG size of input: 313 DAG size of output: 290
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.005s / 0.009s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 17:42:07,228 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 168
[2020-11-25 17:42:07,457 WARN  L188               SmtUtils]: Spent 226.00 ms on a formula simplification that was a NOOP. DAG size: 390
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9883 to 19763
[2020-11-25 17:42:07,985 WARN  L188               SmtUtils]: Spent 513.00 ms on a formula simplification. DAG size of input: 315 DAG size of output: 315
[2020-11-25 17:42:08,234 WARN  L188               SmtUtils]: Spent 246.00 ms on a formula simplification that was a NOOP. DAG size: 315
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 15859 to 31699
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 17:42:08,304 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 17:42:09,462 WARN  L188               SmtUtils]: Spent 587.00 ms on a formula simplification. DAG size of input: 309 DAG size of output: 295
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 17:42:09,751 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification that was a NOOP. DAG size: 325
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-25 17:42:09,861 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification that was a NOOP. DAG size: 291
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #8: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 17:42:10,409 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification that was a NOOP. DAG size: 295
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 17:42:10,826 WARN  L188               SmtUtils]: Spent 408.00 ms on a formula simplification. DAG size of input: 233 DAG size of output: 233
[2020-11-25 17:42:11,424 WARN  L188               SmtUtils]: Spent 596.00 ms on a formula simplification. DAG size of input: 312 DAG size of output: 290
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 17:42:11,583 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 168
[2020-11-25 17:42:11,847 WARN  L188               SmtUtils]: Spent 262.00 ms on a formula simplification that was a NOOP. DAG size: 390
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 17:42:12,385 WARN  L188               SmtUtils]: Spent 528.00 ms on a formula simplification. DAG size of input: 315 DAG size of output: 315
[2020-11-25 17:42:14,696 WARN  L188               SmtUtils]: Spent 2.31 s on a formula simplification. DAG size of input: 801 DAG size of output: 793
Garbage collection #1: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #2: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #3: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #4: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #5: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #6: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #7: 21107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 21107 to 42209
Garbage collection #8: 42209 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 42209 to 84407
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
[2020-11-25 17:42:15,499 WARN  L188               SmtUtils]: Spent 751.00 ms on a formula simplification. DAG size of input: 304 DAG size of output: 291
[2020-11-25 17:42:16,032 WARN  L188               SmtUtils]: Spent 503.00 ms on a formula simplification that was a NOOP. DAG size: 437
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12541 to 25073
Garbage collection #9: 25073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 25073 to 50131
[2020-11-25 17:42:16,761 WARN  L188               SmtUtils]: Spent 672.00 ms on a formula simplification. DAG size of input: 304 DAG size of output: 291
[2020-11-25 17:42:17,679 WARN  L188               SmtUtils]: Spent 917.00 ms on a formula simplification. DAG size of input: 439 DAG size of output: 438
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #8: 21023 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 21023 to 42043
Garbage collection #9: 42043 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 42043 to 84067
Garbage collection #10: 84067 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 84067 to 134059
[2020-11-25 17:42:18,918 WARN  L188               SmtUtils]: Spent 1.21 s on a formula simplification. DAG size of input: 477 DAG size of output: 433
[2020-11-25 17:42:18,940 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:42:18,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 17:42:18,976 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:42:18 BasicIcfg
[2020-11-25 17:42:18,976 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 17:42:18,976 INFO  L168              Benchmark]: Toolchain (without parser) took 37359.62 ms. Allocated memory was 1.0 GB in the beginning and 3.1 GB in the end (delta: 2.1 GB). Free memory was 929.8 MB in the beginning and 1.0 GB in the end (delta: -118.8 MB). Peak memory consumption was 2.1 GB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,976 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,977 INFO  L168              Benchmark]: Boogie Preprocessor took 125.76 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,977 INFO  L168              Benchmark]: UtopiaSpecLang took 79.53 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,977 INFO  L168              Benchmark]: Boogie Printer took 22.26 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,978 INFO  L168              Benchmark]: RCFGBuilder took 1187.16 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.0 MB). Free memory was 892.2 MB in the beginning and 908.6 MB in the end (delta: -16.4 MB). Peak memory consumption was 182.0 MB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,978 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.24 ms. Allocated memory is still 1.1 GB. Free memory was 908.6 MB in the beginning and 905.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,978 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2444.62 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 201.9 MB). Free memory was 905.3 MB in the beginning and 947.8 MB in the end (delta: -42.6 MB). Peak memory consumption was 493.9 MB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,978 INFO  L168              Benchmark]: BlockEncodingV2 took 219.76 ms. Allocated memory is still 1.3 GB. Free memory was 947.8 MB in the beginning and 830.2 MB in the end (delta: 117.6 MB). Peak memory consumption was 117.6 MB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,979 INFO  L168              Benchmark]: BuchiAutomizer took 33242.51 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 830.2 MB in the beginning and 1.0 GB in the end (delta: -218.4 MB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
[2020-11-25 17:42:18,981 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    8064 locations, 14496 edges
  - StatisticsResult: Encoded RCFG
    7966 locations, 14234 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 125.76 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 908.4 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 79.53 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 897.6 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.26 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1187.16 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.0 MB). Free memory was 892.2 MB in the beginning and 908.6 MB in the end (delta: -16.4 MB). Peak memory consumption was 182.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.24 ms. Allocated memory is still 1.1 GB. Free memory was 908.6 MB in the beginning and 905.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2444.62 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 201.9 MB). Free memory was 905.3 MB in the beginning and 947.8 MB in the end (delta: -42.6 MB). Peak memory consumption was 493.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 219.76 ms. Allocated memory is still 1.3 GB. Free memory was 947.8 MB in the beginning and 830.2 MB in the end (delta: 117.6 MB). Peak memory consumption was 117.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 33242.51 ms. Allocated memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: 1.8 GB). Free memory was 830.2 MB in the beginning and 1.0 GB in the end (delta: -218.4 MB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3264 locations, 4463 edges
  - StatisticsResult: BuchiProgram size
    8064 locations, 14496 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.10 modules have a trivial ranking function, the largest among these consists of 17 locations. The remainder module has 6542 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 33.1s and 11 iterations.  TraceHistogramMax:12. Analysis of lassos took 15.9s. Construction of modules took 12.1s. BÃ¼chi inclusion checks took 3.7s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 10 MinimizatonAttempts, 2841 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.3s Buchi closure took 0.0s. Biggest automaton had 8318 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 53137 SDtfs, 50051 SDslu, 95412 SDs, 0 SdLazy, 183397 SolverSat, 8282 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 12.1s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1400933837) = (new HKExCoin)({from : 1400933838});
[L2093]              havoc __exception;
[L2094]              revert := false;
[L2095]  COND FALSE  !(__exception)
[L2127]  CALL        call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L5080]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L5080]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L5081]  COND FALSE  !(revert)
[L5084]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L5084]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5085]  COND FALSE  !(revert)
[L5088]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L5088]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5089]  COND FALSE  !(revert)
[L5092]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L5092]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5093]  COND FALSE  !(revert)
[L5096]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L5096]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L5097]  COND FALSE  !(revert)
[L5100]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L5100]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L5101]  COND FALSE  !(revert)
[L5104]  CALL        call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4701]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4701]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4702]  COND FALSE  !(revert)
[L4705]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4705]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4706]  COND FALSE  !(revert)
[L4709]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4709]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4710]  COND FALSE  !(revert)
[L4713]  CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4331]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4331]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4279]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4279]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4280]  COND FALSE  !(revert)
[L4283]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]              assume msgsender_MSG != null;
[L4261]              Balance[this] := 0;
[L4283]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4284]  COND FALSE  !(revert)
[L4335]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4150]  CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4108]  CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4093]              assume msgsender_MSG != null;
[L4094]              Balance[this] := 0;
[L4108]  RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4109]  COND FALSE  !(revert)
[L4150]  RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L4151]  COND FALSE  !(revert)
[L4154]  CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4128]              assume msgsender_MSG != null;
[L4129]              Balance[this] := 0;
[L4130]              balances_BasicToken[this] := zeroRefintArr();
[L4131]              sum_balances0[this] := 0;
[L4132]              totalSupply__BasicToken[this] := 0;
[L4154]  RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4155]  COND FALSE  !(revert)
[L4339]  RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]  COND FALSE  !(revert)
[L4343]  CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4302]              assume msgsender_MSG != null;
[L4303]              Balance[this] := 0;
[L4304]              allowed_StandardToken[this] := zeroRefRefintArr();
[L4305]              sum_allowed1[this] := 0;
[L4343]  RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4344]  COND FALSE  !(revert)
[L4713]  RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4714]  COND FALSE  !(revert)
[L4717]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4717]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]  COND FALSE  !(revert)
[L4721]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4575]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3979]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3962]              assume msgsender_MSG != null;
[L3963]              Balance[this] := 0;
[L3964]              owner_Ownable[this] := null;
[L3966]              owner_Ownable[this] := msgsender_MSG;
[L3979]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3980]  COND FALSE  !(revert)
[L4575]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4576]  COND FALSE  !(revert)
[L4579]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4555]              assume msgsender_MSG != null;
[L4556]              Balance[this] := 0;
[L4557]              paused_Pausable[this] := false;
[L4579]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4580]  COND FALSE  !(revert)
[L4721]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4722]  COND FALSE  !(revert)
[L4725]  CALL        call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4662]              assume msgsender_MSG != null;
[L4663]              Balance[this] := 0;
[L4725]  RET         call PausableToken_PausableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]  COND FALSE  !(revert)
[L5104]  RET         call PausableToken_PausableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L5105]  COND FALSE  !(revert)
[L5108]  CALL        call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5014]              assume msgsender_MSG != null;
[L5015]              Balance[this] := 0;
[L5016]              name_HKExCoin[this] := 1400933812;
[L5017]              symbol_HKExCoin[this] := -256252482;
[L5018]              standard_HKExCoin[this] := -941536354;
[L5019]              decimals_HKExCoin[this] := 18;
[L5020]              __var_22 := decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5021]              INITIAL_SUPPLY_HKExCoin[this] := nonlinearMul(10 * (100000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_HKExCoin[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5023]  CALL        call __var_23 := FreshRefGenerator__success();
[L3836]              havoc newRef;
[L3837]              assume Alloc[newRef] == false;
[L3838]              Alloc[newRef] := true;
[L3839]              assume newRef != null;
[L5023]  RET         call __var_23 := FreshRefGenerator__success();
[L5024]  COND FALSE  !(revert)
[L5027]              allocations_HKExCoin[this] := __var_23;
[L5029]              alloc_allocations_HKExCoin_lvl0[allocations_HKExCoin[this]] := zeroRefboolArr();
[L5031]              totalSupply__BasicToken[this] := INITIAL_SUPPLY_HKExCoin[this];
[L5032]              sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L5033]              balances_BasicToken[this][msgsender_MSG] := INITIAL_SUPPLY_HKExCoin[this];
[L5034]              sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L5035]              assert { :EventEmitted "Transfer_HKExCoin" } true;
[L5108]  RET         call HKExCoin_HKExCoin_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5109]  COND FALSE  !(revert)
[L2127]  RET         call HKExCoin_HKExCoin__success(this, msgsender_MSG, msgvalue_MSG);
[L2128]              assume !revert && gas >= 0;
[L8685]  RET         call HKExCoin_HKExCoin(this, msgsender_MSG, msgvalue_MSG);
Pausable(1400933837).pause.gas(3979002)({from : 1400933838});
[L1384]              havoc __exception;
[L1385]              revert := false;
[L1386]  COND FALSE  !(__exception)
[L1418]  CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4600]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7604]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L4600]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4601]  COND FALSE  !(revert)
[L4604]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7620]  COND FALSE  !(!!paused_Pausable[this])
[L4604]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4605]  COND FALSE  !(revert)
[L4608]              paused_Pausable[this] := true;
[L4609]              assert { :EventEmitted "Pause_Pausable" } true;
[L1418]  RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1419]              assume !revert && gas >= 0;
[L8617]  RET         call pause_Pausable(this, msgsender_MSG, msgvalue_MSG);
PausableToken(1400933837).approve~address~uint256.gas(3979003)({from : 1400933824, _spender : 1400933825, _value : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                call_approve_PausableToken0 := true;
[L3]                call_approve_PausableToken0 := false;
[L3]                revert := revert_hold;
[L1835]             havoc __exception;
[L1836]             revert := false;
[L1837]  COND TRUE  __exception
[L1838]             __tmp__Balance := Balance;
[L1839]             __tmp__DType := DType;
[L1840]             __tmp__Alloc := Alloc;
[L1841]             __tmp__balance_ADDR := balance_ADDR;
[L1842]             __tmp__M_Ref_int := M_Ref_int;
[L1843]             __tmp__sum_balances0 := sum_balances0;
[L1844]             __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]             __tmp__sum_allowed1 := sum_allowed1;
[L1847]             __tmp__M_int_Ref := M_int_Ref;
[L1848]             __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]             __tmp__sum := sum;
[L1850]             __tmp__M_int_int := M_int_int;
[L1851]             __tmp__Length := Length;
[L1852]             __tmp__now := now;
[L1853]             __tmp__owner_Ownable := owner_Ownable;
[L1854]             __tmp__balances_BasicToken := balances_BasicToken;
[L1855]             __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]             __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]             __tmp__paused_Pausable := paused_Pausable;
[L1858]             __tmp__name_HKExCoin := name_HKExCoin;
[L1859]             __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]             __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]             __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]             __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]             __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]             __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]             __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL       call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND TRUE  !!__tmp__paused_Pausable[this]
[L7613]             revert := true;
[L4835]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND TRUE  revert
[L1866]  RET        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]             assume revert || gas < 0;
[L8591]  RET        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);

Loop:
PausableToken(1400933837).approve~address~uint256.gas(3979001)({from : 1400933819, _spender : 1400933840, _value : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != _spender_s680;
[L3]                call_approve_PausableToken0 := true;
[L3]                call_approve_PausableToken0 := false;
[L3]                revert := revert_hold;
[L1835]             havoc __exception;
[L1836]             revert := false;
[L1837]  COND TRUE  __exception
[L1838]             __tmp__Balance := Balance;
[L1839]             __tmp__DType := DType;
[L1840]             __tmp__Alloc := Alloc;
[L1841]             __tmp__balance_ADDR := balance_ADDR;
[L1842]             __tmp__M_Ref_int := M_Ref_int;
[L1843]             __tmp__sum_balances0 := sum_balances0;
[L1844]             __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L1845]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L1846]             __tmp__sum_allowed1 := sum_allowed1;
[L1847]             __tmp__M_int_Ref := M_int_Ref;
[L1848]             __tmp__alloc_allocations_HKExCoin_lvl0 := alloc_allocations_HKExCoin_lvl0;
[L1849]             __tmp__sum := sum;
[L1850]             __tmp__M_int_int := M_int_int;
[L1851]             __tmp__Length := Length;
[L1852]             __tmp__now := now;
[L1853]             __tmp__owner_Ownable := owner_Ownable;
[L1854]             __tmp__balances_BasicToken := balances_BasicToken;
[L1855]             __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L1856]             __tmp__allowed_StandardToken := allowed_StandardToken;
[L1857]             __tmp__paused_Pausable := paused_Pausable;
[L1858]             __tmp__name_HKExCoin := name_HKExCoin;
[L1859]             __tmp__symbol_HKExCoin := symbol_HKExCoin;
[L1860]             __tmp__standard_HKExCoin := standard_HKExCoin;
[L1861]             __tmp__decimals_HKExCoin := decimals_HKExCoin;
[L1862]             __tmp__INITIAL_SUPPLY_HKExCoin := INITIAL_SUPPLY_HKExCoin;
[L1863]             __tmp__allocations_HKExCoin := allocations_HKExCoin;
[L1864]             __tmp__releaseTime_HKExCoin.TimeLock := releaseTime_HKExCoin.TimeLock;
[L1865]             __tmp__balance_HKExCoin.TimeLock := balance_HKExCoin.TimeLock;
[L1866]  CALL       call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L4835]  CALL       call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7612]  COND TRUE  !!__tmp__paused_Pausable[this]
[L7613]             revert := true;
[L4835]  RET        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4836]  COND TRUE  revert
[L1866]  RET        call __ret_0_ := approve~address~uint256_PausableToken__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);
[L1867]             assume revert || gas < 0;
[L8591]  RET        call __ret_0_approve := approve~address~uint256_PausableToken(this, msgsender_MSG, msgvalue_MSG, _spender_s680, _value_s680);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
