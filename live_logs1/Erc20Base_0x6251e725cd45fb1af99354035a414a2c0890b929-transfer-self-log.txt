This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:04:29,221 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:04:29,223 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:04:29,233 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:04:29,233 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:04:29,234 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:04:29,235 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:04:29,236 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:04:29,237 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:04:29,238 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:04:29,239 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:04:29,239 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:04:29,240 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:04:29,240 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:04:29,241 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:04:29,241 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:04:29,242 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:04:29,243 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:04:29,244 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:04:29,246 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:04:29,246 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:04:29,247 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:04:29,249 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:04:29,249 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:04:29,249 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:04:29,250 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:04:29,250 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:04:29,250 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:04:29,251 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:04:29,251 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:04:29,251 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:04:29,252 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:04:29,252 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:04:29,253 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:04:29,253 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:04:29,253 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:04:29,254 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:04:29,254 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:04:29,254 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:04:29,255 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:04:29,255 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:04:29,256 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:04:29,263 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:04:29,263 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:04:29,264 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:04:29,264 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:04:29,264 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:04:29,265 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:04:29,265 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:04:29,265 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:04:29,265 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:04:29,265 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:04:29,265 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:04:29,265 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:04:29,265 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:04:29,265 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:04:29,266 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:04:29,266 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:04:29,267 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:04:29,267 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:04:29,287 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:04:29,299 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:04:29,302 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:04:29,303 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:04:29,304 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:04:29,304 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl
[2020-11-25 15:04:29,304 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl'
[2020-11-25 15:04:29,380 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:04:29,381 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:04:29,382 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:04:29,382 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:04:29,382 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:04:29,398 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,400 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,428 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,429 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,448 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,457 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,464 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,473 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:04:29,473 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:04:29,473 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:04:29,475 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:04:29,479 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/1) ...
[2020-11-25 15:04:29,497 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Token.transfer(to, value), msg.sender == to && value <= balances_ERC20Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][msg.sender] >= 0 &&  balances_ERC20Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Token.transfer(to, value), return == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:04:29,502 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Token.transfer(to, value), msg.sender == to && value <= balances_ERC20Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][msg.sender] >= 0 &&  balances_ERC20Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Token.transfer(to, value), return == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:04:29,509 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Token.transfer(to, value), msg.sender == to && value <= balances_ERC20Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][msg.sender] >= 0 &&  balances_ERC20Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Token.transfer(to, value), return == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:04:29,516 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s326 && _value_s326<=balances_ERC20Token[this][msg.sender] ) && _value_s326>=0 ) && _value_s326<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_ERC20Token[this][_to_s326]>=0 ) && balances_ERC20Token[this][_to_s326]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_ERC20Token[this][msg.sender]>=0 ) && balances_ERC20Token[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>],IdentifierExpression[_to_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],[IdentifierExpression[_to_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],[IdentifierExpression[_to_s326,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 15:04:29,519 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && totalSupply_ERC20[this]==( old(totalSupply_ERC20[this]) ) ) && balances_ERC20Token[this]==( old(balances_ERC20Token[this]) ) ) && allowed_ERC20Token[this]==( old(allowed_ERC20Token[this]) ) ) && name_Erc20Base[this]==( old(name_Erc20Base[this]) ) ) && symbol_Erc20Base[this]==( old(symbol_Erc20Base[this]) ) ) && decimals_Erc20Base[this]==( old(decimals_Erc20Base[this]) ) ) && transferable_ERC20Token[this]==( old(transferable_ERC20Token[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20Token>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[transferable_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[transferable_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Token>]]]]]]
[2020-11-25 15:04:29,524 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Token.transfer(to, value), msg.sender == to && value <= balances_ERC20Token[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][to] >= 0 && balances_ERC20Token[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_ERC20Token[this][msg.sender] >= 0 &&  balances_ERC20Token[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Token.transfer(to, value), return == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:04:29,524 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Token0) ==> ( <>AP(success_transfer_ERC20Token0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:04:29,531 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:04:29 PropertyContainer
[2020-11-25 15:04:29,531 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:04:29,531 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:04:29,532 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:04:29,532 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:04:29,532 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/2) ...
[2020-11-25 15:04:29,533 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:04:29,533 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:04:29,546 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:04:29" (2/2) ...
[2020-11-25 15:04:29,546 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:04:29,546 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:04:29,546 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:04:29,546 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:04:29,547 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/2) ...
[2020-11-25 15:04:29,598 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:04:29,598 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:04:29,598 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:04:29,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:04:29,598 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,598 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,598 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,598 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 15:04:29,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 15:04:29,599 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 15:04:29,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 15:04:29,600 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 15:04:29,600 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 15:04:29,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 15:04:29,600 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 15:04:29,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 15:04:29,600 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 15:04:29,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 15:04:29,600 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token_NoBaseCtor__success
[2020-11-25 15:04:29,600 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token
[2020-11-25 15:04:29,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token
[2020-11-25 15:04:29,600 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token
[2020-11-25 15:04:29,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token
[2020-11-25 15:04:29,601 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token
[2020-11-25 15:04:29,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token
[2020-11-25 15:04:29,601 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token
[2020-11-25 15:04:29,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token
[2020-11-25 15:04:29,601 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token
[2020-11-25 15:04:29,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token
[2020-11-25 15:04:29,601 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token
[2020-11-25 15:04:29,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token
[2020-11-25 15:04:29,601 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token
[2020-11-25 15:04:29,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token
[2020-11-25 15:04:29,601 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token
[2020-11-25 15:04:29,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Token__success
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token
[2020-11-25 15:04:29,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base_NoBaseCtor__success
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base
[2020-11-25 15:04:29,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base
[2020-11-25 15:04:29,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base
[2020-11-25 15:04:29,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base
[2020-11-25 15:04:29,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:04:29,602 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer_pre__success
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Token
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Token
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Erc20Base
[2020-11-25 15:04:29,603 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 15:04:29,604 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token_NoBaseCtor__fail
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token__success
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token__fail
[2020-11-25 15:04:29,605 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token__success
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token__fail
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token__success
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token__fail
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token__success
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token__fail
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token__success
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token__fail
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token__success
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token__fail
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token__success
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token__fail
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token__success
[2020-11-25 15:04:29,606 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token__fail
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Token__fail
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token__success
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token__fail
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base_NoBaseCtor__fail
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base__success
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base__fail
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base__success
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base__fail
[2020-11-25 15:04:29,607 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base__success
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base__fail
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base__success
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base__fail
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:04:29,608 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer_pre__fail
[2020-11-25 15:04:29,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:04:29,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:04:29,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 15:04:29,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token_NoBaseCtor__fail
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token_NoBaseCtor__success
[2020-11-25 15:04:29,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token__fail
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token__success
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token__fail
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token__success
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token__fail
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token__success
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token__fail
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token__success
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token__fail
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token__success
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token__fail
[2020-11-25 15:04:29,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token__success
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token__fail
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token__success
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token__fail
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token__success
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Token__fail
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Token__success
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token__fail
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token__success
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base_NoBaseCtor__fail
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base_NoBaseCtor__success
[2020-11-25 15:04:29,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base__fail
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base__success
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base__fail
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base__success
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base__fail
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base__success
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base__fail
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base__success
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:04:29,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer_pre__fail
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer_pre__success
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 15:04:29,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Token
[2020-11-25 15:04:29,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Token
[2020-11-25 15:04:29,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Erc20Base
[2020-11-25 15:04:29,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:04:29,616 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:04:29,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:04:29,908 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:04:29,908 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:04:29,909 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:04:30,219 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:04:30,219 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 15:04:30,221 INFO  L202        PluginConnector]: Adding new model Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:30 BoogieIcfgContainer
[2020-11-25 15:04:30,221 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:04:29" (2/2) ...
[2020-11-25 15:04:30,221 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:04:30,221 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@159c3e37 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:30, skipping insertion in model container
[2020-11-25 15:04:30,222 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:04:30,222 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:04:30,222 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:04:30,223 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:04:30,223 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/3) ...
[2020-11-25 15:04:30,224 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@31cb526f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:30, skipping insertion in model container
[2020-11-25 15:04:30,224 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:04:29" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:04:30,262 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:30 NWAContainer
[2020-11-25 15:04:30,262 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:04:30,263 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:04:30,263 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:04:30,264 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:04:30,265 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:30" (3/4) ...
[2020-11-25 15:04:30,266 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6d35e6f2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:30, skipping insertion in model container
[2020-11-25 15:04:30,267 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:30" (4/4) ...
[2020-11-25 15:04:30,271 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:04:30,275 INFO  L110   BuchiProductObserver]: Initial RCFG 1321 locations, 1715 edges
[2020-11-25 15:04:30,275 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:04:30,283 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:04:31,490 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:04:31,494 INFO  L110   BuchiProductObserver]: BuchiProgram size 3202 locations, 5606 edges
[2020-11-25 15:04:31,494 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:31 BoogieIcfgContainer
[2020-11-25 15:04:31,494 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:04:31,494 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:04:31,495 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:04:31,496 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:04:31,496 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:31" (1/1) ...
[2020-11-25 15:04:31,564 INFO  L313           BlockEncoder]: Initial Icfg 3202 locations, 5606 edges
[2020-11-25 15:04:31,564 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:04:31,564 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:04:31,565 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:04:31,565 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:04:31,574 INFO  L70    emoveInfeasibleEdges]: Removed 51 edges and 13 locations because of local infeasibility
[2020-11-25 15:04:31,581 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 15:04:31,590 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:04:31,594 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:04:31,597 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:04:31,597 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:04:31,601 INFO  L313           BlockEncoder]: Encoded RCFG 3168 locations, 5524 edges
[2020-11-25 15:04:31,601 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:04:31 BasicIcfg
[2020-11-25 15:04:31,601 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:04:31,602 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:04:31,602 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:04:31,603 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:04:31,604 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:31,604 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:04:29" (1/6) ...
[2020-11-25 15:04:31,606 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df241d4 and model type Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:04:31, skipping insertion in model container
[2020-11-25 15:04:31,606 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:31,606 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:04:29" (2/6) ...
[2020-11-25 15:04:31,606 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df241d4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:04:31, skipping insertion in model container
[2020-11-25 15:04:31,606 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:31,606 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:30" (3/6) ...
[2020-11-25 15:04:31,606 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df241d4 and model type Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:04:31, skipping insertion in model container
[2020-11-25 15:04:31,606 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:31,606 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:30" (4/6) ...
[2020-11-25 15:04:31,607 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df241d4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:04:31, skipping insertion in model container
[2020-11-25 15:04:31,607 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:31,607 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:31" (5/6) ...
[2020-11-25 15:04:31,608 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df241d4 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:04:31, skipping insertion in model container
[2020-11-25 15:04:31,608 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:31,608 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:04:31" (6/6) ...
[2020-11-25 15:04:31,610 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_transfer-self.bpl_BEv2
[2020-11-25 15:04:31,655 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:04:31,656 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:04:31,656 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:04:31,656 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:04:31,656 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:04:31,656 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:04:31,656 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:04:31,656 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:04:31,656 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:04:31,689 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3168 states.
[2020-11-25 15:04:31,740 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:31,740 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:31,740 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:31,750 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:31,750 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:31,750 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:04:31,750 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3168 states.
[2020-11-25 15:04:31,767 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:31,768 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:31,768 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:31,770 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:31,770 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND TRUE   revert
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND TRUE   choice == 14
[L3716]              gas := gas - 21000;
[L3717]  COND FALSE  !(gas >= 0)
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:31,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:31,787 INFO  L82        PathProgramCache]: Analyzing trace with hash -621871995, now seen corresponding path program 1 times
[2020-11-25 15:04:31,792 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:31,816 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:31,856 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:04:31,858 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:31,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:04:31,862 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:31,985 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:04:31,986 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:04:31,987 INFO  L87              Difference]: Start difference. First operand 3168 states. Second operand 4 states.
[2020-11-25 15:04:32,294 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:32,295 INFO  L93              Difference]: Finished difference Result 1952 states and 2157 transitions.
[2020-11-25 15:04:32,295 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:04:32,296 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1952 states and 2157 transitions.
[2020-11-25 15:04:32,306 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:32,321 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1952 states to 1948 states and 2149 transitions.
[2020-11-25 15:04:32,322 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 15:04:32,324 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 658
[2020-11-25 15:04:32,325 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1948 states and 2149 transitions.
[2020-11-25 15:04:32,331 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:32,331 INFO  L728         BuchiCegarLoop]: Abstraction has 1948 states and 2149 transitions.
[2020-11-25 15:04:32,348 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1948 states and 2149 transitions.
[2020-11-25 15:04:32,388 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1948 to 1948.
[2020-11-25 15:04:32,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1948 states.
[2020-11-25 15:04:32,395 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1948 states to 1948 states and 2149 transitions.
[2020-11-25 15:04:32,396 INFO  L751         BuchiCegarLoop]: Abstraction has 1948 states and 2149 transitions.
[2020-11-25 15:04:32,396 INFO  L631         BuchiCegarLoop]: Abstraction has 1948 states and 2149 transitions.
[2020-11-25 15:04:32,396 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:04:32,396 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1948 states and 2149 transitions.
[2020-11-25 15:04:32,401 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:32,402 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:32,402 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:32,404 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:32,404 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND TRUE   revert
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND TRUE   revert
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND FALSE  !(__exception)
[L567]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1998]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L1998]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  COND TRUE   revert
[L567]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L568]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND FALSE  !(__exception)
[L567]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1998]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L1998]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  COND TRUE   revert
[L567]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L568]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:32,408 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:32,408 INFO  L82        PathProgramCache]: Analyzing trace with hash -584474902, now seen corresponding path program 1 times
[2020-11-25 15:04:32,409 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:32,420 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:32,440 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:04:32,441 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:32,441 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:04:32,442 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:32,442 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:04:32,442 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:04:32,443 INFO  L87              Difference]: Start difference. First operand 1948 states and 2149 transitions. cyclomatic complexity: 203 Second operand 4 states.
[2020-11-25 15:04:32,743 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:32,743 INFO  L93              Difference]: Finished difference Result 2776 states and 3143 transitions.
[2020-11-25 15:04:32,743 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:04:32,743 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2776 states and 3143 transitions.
[2020-11-25 15:04:32,754 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:04:32,766 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2776 states to 2694 states and 3049 transitions.
[2020-11-25 15:04:32,766 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 906
[2020-11-25 15:04:32,767 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 913
[2020-11-25 15:04:32,767 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2694 states and 3049 transitions.
[2020-11-25 15:04:32,771 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:32,771 INFO  L728         BuchiCegarLoop]: Abstraction has 2694 states and 3049 transitions.
[2020-11-25 15:04:32,773 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2694 states and 3049 transitions.
[2020-11-25 15:04:32,793 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2694 to 1954.
[2020-11-25 15:04:32,793 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1954 states.
[2020-11-25 15:04:32,796 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1954 states to 1954 states and 2089 transitions.
[2020-11-25 15:04:32,796 INFO  L751         BuchiCegarLoop]: Abstraction has 1954 states and 2089 transitions.
[2020-11-25 15:04:32,796 INFO  L631         BuchiCegarLoop]: Abstraction has 1954 states and 2089 transitions.
[2020-11-25 15:04:32,796 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:04:32,796 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1954 states and 2089 transitions.
[2020-11-25 15:04:32,800 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:32,800 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:32,800 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:32,802 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:32,802 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND TRUE   !(__tmp__transferable_ERC20Token[this] == true)
[L3242]              revert := true;
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND TRUE   revert
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND TRUE   !(__tmp__transferable_ERC20Token[this] == true)
[L3242]              revert := true;
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND TRUE   revert
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:32,806 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:32,806 INFO  L82        PathProgramCache]: Analyzing trace with hash -174829970, now seen corresponding path program 1 times
[2020-11-25 15:04:32,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:32,817 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:32,877 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:32,877 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:32,877 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 15:04:32,877 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:32,878 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 15:04:32,878 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-11-25 15:04:32,878 INFO  L87              Difference]: Start difference. First operand 1954 states and 2089 transitions. cyclomatic complexity: 137 Second operand 13 states.
[2020-11-25 15:04:34,350 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:34,350 INFO  L93              Difference]: Finished difference Result 3278 states and 3599 transitions.
[2020-11-25 15:04:34,350 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 15:04:34,350 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3278 states and 3599 transitions.
[2020-11-25 15:04:34,360 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 15:04:34,369 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3278 states to 3278 states and 3599 transitions.
[2020-11-25 15:04:34,369 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1170
[2020-11-25 15:04:34,370 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1170
[2020-11-25 15:04:34,370 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3278 states and 3599 transitions.
[2020-11-25 15:04:34,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:34,374 INFO  L728         BuchiCegarLoop]: Abstraction has 3278 states and 3599 transitions.
[2020-11-25 15:04:34,376 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3278 states and 3599 transitions.
[2020-11-25 15:04:34,395 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3278 to 1990.
[2020-11-25 15:04:34,396 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1990 states.
[2020-11-25 15:04:34,398 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1990 states to 1990 states and 2132 transitions.
[2020-11-25 15:04:34,398 INFO  L751         BuchiCegarLoop]: Abstraction has 1990 states and 2132 transitions.
[2020-11-25 15:04:34,398 INFO  L631         BuchiCegarLoop]: Abstraction has 1990 states and 2132 transitions.
[2020-11-25 15:04:34,398 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:04:34,398 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1990 states and 2132 transitions.
[2020-11-25 15:04:34,401 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:04:34,401 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:34,401 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:34,403 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:34,403 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND FALSE  !(!(__tmp__transferable_ERC20Token[this] == true))
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND FALSE  !(revert)
[L1966]              __var_2 := null;
[L1967]  COND TRUE   !(_to_s326 != null)
[L1968]              revert := true;
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND FALSE  !(!(__tmp__transferable_ERC20Token[this] == true))
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND FALSE  !(revert)
[L1966]              __var_2 := null;
[L1967]  COND TRUE   !(_to_s326 != null)
[L1968]              revert := true;
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:34,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:34,406 INFO  L82        PathProgramCache]: Analyzing trace with hash -759010647, now seen corresponding path program 1 times
[2020-11-25 15:04:34,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:34,414 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:34,440 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:34,441 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:34,441 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 15:04:34,441 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:34,441 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 15:04:34,441 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 15:04:34,441 INFO  L87              Difference]: Start difference. First operand 1990 states and 2132 transitions. cyclomatic complexity: 146 Second operand 6 states.
[2020-11-25 15:04:34,471 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:34,471 INFO  L93              Difference]: Finished difference Result 2082 states and 2233 transitions.
[2020-11-25 15:04:34,471 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 15:04:34,471 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2082 states and 2233 transitions.
[2020-11-25 15:04:34,477 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:04:34,482 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2082 states to 2074 states and 2225 transitions.
[2020-11-25 15:04:34,482 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 15:04:34,483 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 15:04:34,483 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2074 states and 2225 transitions.
[2020-11-25 15:04:34,484 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:34,484 INFO  L728         BuchiCegarLoop]: Abstraction has 2074 states and 2225 transitions.
[2020-11-25 15:04:34,486 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2074 states and 2225 transitions.
[2020-11-25 15:04:34,500 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2074 to 2057.
[2020-11-25 15:04:34,500 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2057 states.
[2020-11-25 15:04:34,503 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2057 states to 2057 states and 2206 transitions.
[2020-11-25 15:04:34,503 INFO  L751         BuchiCegarLoop]: Abstraction has 2057 states and 2206 transitions.
[2020-11-25 15:04:34,503 INFO  L631         BuchiCegarLoop]: Abstraction has 2057 states and 2206 transitions.
[2020-11-25 15:04:34,503 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:04:34,503 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2057 states and 2206 transitions.
[2020-11-25 15:04:34,506 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:04:34,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:34,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:34,507 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:34,507 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND FALSE  !(!(__tmp__transferable_ERC20Token[this] == true))
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND FALSE  !(revert)
[L1966]              __var_2 := null;
[L1967]  COND FALSE  !(!(_to_s326 != null))
[L1971]  COND TRUE   !(_value_s326 <= __tmp__balances_ERC20Token[this][msgsender_MSG])
[L1972]              revert := true;
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND FALSE  !(!(__tmp__transferable_ERC20Token[this] == true))
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND FALSE  !(revert)
[L1966]              __var_2 := null;
[L1967]  COND FALSE  !(!(_to_s326 != null))
[L1971]  COND TRUE   !(_value_s326 <= __tmp__balances_ERC20Token[this][msgsender_MSG])
[L1972]              revert := true;
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:34,510 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:34,510 INFO  L82        PathProgramCache]: Analyzing trace with hash -317399355, now seen corresponding path program 1 times
[2020-11-25 15:04:34,510 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:34,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:34,595 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:34,596 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:34,596 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 15:04:34,596 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:34,596 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 15:04:34,597 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 15:04:34,597 INFO  L87              Difference]: Start difference. First operand 2057 states and 2206 transitions. cyclomatic complexity: 153 Second operand 6 states.
[2020-11-25 15:04:35,125 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:35,125 INFO  L93              Difference]: Finished difference Result 2166 states and 2340 transitions.
[2020-11-25 15:04:35,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 15:04:35,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2166 states and 2340 transitions.
[2020-11-25 15:04:35,130 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 15:04:35,135 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2166 states to 2166 states and 2340 transitions.
[2020-11-25 15:04:35,135 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 747
[2020-11-25 15:04:35,136 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 747
[2020-11-25 15:04:35,136 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2166 states and 2340 transitions.
[2020-11-25 15:04:35,138 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:35,138 INFO  L728         BuchiCegarLoop]: Abstraction has 2166 states and 2340 transitions.
[2020-11-25 15:04:35,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2166 states and 2340 transitions.
[2020-11-25 15:04:35,154 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2166 to 2057.
[2020-11-25 15:04:35,154 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2057 states.
[2020-11-25 15:04:35,155 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2057 states to 2057 states and 2206 transitions.
[2020-11-25 15:04:35,156 INFO  L751         BuchiCegarLoop]: Abstraction has 2057 states and 2206 transitions.
[2020-11-25 15:04:35,156 INFO  L631         BuchiCegarLoop]: Abstraction has 2057 states and 2206 transitions.
[2020-11-25 15:04:35,156 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:04:35,156 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2057 states and 2206 transitions.
[2020-11-25 15:04:35,158 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:04:35,158 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:35,158 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:35,159 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:35,159 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND FALSE  !(__exception)
[L567]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1998]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L1998]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  COND FALSE  !(revert)
[L2002]              __var_2 := null;
[L2003]  COND FALSE  !(!(_to_s326 != null))
[L2007]  COND FALSE  !(!(_value_s326 <= balances_ERC20Token[this][msgsender_MSG]))
[L2011]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2011]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L2012]  COND FALSE  !(revert)
[L2015]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][msgsender_MSG];
[L2016]              balances_ERC20Token[this][msgsender_MSG] := __var_3;
[L2017]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][msgsender_MSG];
[L2018]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s326], _value_s326);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2018]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s326], _value_s326);
[L2019]  COND FALSE  !(revert)
[L2022]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s326];
[L2023]              balances_ERC20Token[this][_to_s326] := __var_4;
[L2024]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s326];
[L2025]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2026]              __ret_0_ := true;
[L567]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L568]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND FALSE  !(__exception)
[L567]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1998]  CALL        call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3249]  COND FALSE  !(!(transferable_ERC20Token[this] == true))
[L1998]  RET         call canTransfer_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1999]  COND FALSE  !(revert)
[L2002]              __var_2 := null;
[L2003]  COND FALSE  !(!(_to_s326 != null))
[L2007]  COND FALSE  !(!(_value_s326 <= balances_ERC20Token[this][msgsender_MSG]))
[L2011]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L1742]              assert b_s78 <= a_s78;
[L1743]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2011]  RET         call __var_3 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L2012]  COND FALSE  !(revert)
[L2015]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][msgsender_MSG];
[L2016]              balances_ERC20Token[this][msgsender_MSG] := __var_3;
[L2017]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][msgsender_MSG];
[L2018]  CALL        call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s326], _value_s326);
[L1758]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1759]              assert c_s102 >= a_s102;
[L1760]              __ret_0_ := c_s102;
[L2018]  RET         call __var_4 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_ERC20Token[this][_to_s326], _value_s326);
[L2019]  COND FALSE  !(revert)
[L2022]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_to_s326];
[L2023]              balances_ERC20Token[this][_to_s326] := __var_4;
[L2024]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_to_s326];
[L2025]              assert { :EventEmitted "Transfer_ERC20Token" } true;
[L2026]              __ret_0_ := true;
[L567]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L568]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this] == old(allowed_ERC20Token[this])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L2]                 revert := revert_hold;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:35,162 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:35,162 INFO  L82        PathProgramCache]: Analyzing trace with hash -1680563702, now seen corresponding path program 1 times
[2020-11-25 15:04:35,163 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:35,223 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:36,511 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:36,511 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:36,512 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [30] imperfect sequences [] total 30
[2020-11-25 15:04:36,512 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:36,512 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 15:04:36,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=844, Unknown=0, NotChecked=0, Total=930
[2020-11-25 15:04:36,513 INFO  L87              Difference]: Start difference. First operand 2057 states and 2206 transitions. cyclomatic complexity: 153 Second operand 31 states.
[2020-11-25 15:04:43,470 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:43,470 INFO  L93              Difference]: Finished difference Result 2131 states and 2334 transitions.
[2020-11-25 15:04:43,470 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 15:04:43,470 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2131 states and 2334 transitions.
[2020-11-25 15:04:43,474 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 15:04:43,479 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2131 states to 2131 states and 2334 transitions.
[2020-11-25 15:04:43,479 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 717
[2020-11-25 15:04:43,479 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 717
[2020-11-25 15:04:43,479 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2131 states and 2334 transitions.
[2020-11-25 15:04:43,481 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:43,481 INFO  L728         BuchiCegarLoop]: Abstraction has 2131 states and 2334 transitions.
[2020-11-25 15:04:43,483 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2131 states and 2334 transitions.
[2020-11-25 15:04:43,496 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2131 to 2098.
[2020-11-25 15:04:43,496 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2098 states.
[2020-11-25 15:04:43,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2098 states to 2098 states and 2273 transitions.
[2020-11-25 15:04:43,498 INFO  L751         BuchiCegarLoop]: Abstraction has 2098 states and 2273 transitions.
[2020-11-25 15:04:43,498 INFO  L631         BuchiCegarLoop]: Abstraction has 2098 states and 2273 transitions.
[2020-11-25 15:04:43,498 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:04:43,498 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2098 states and 2273 transitions.
[2020-11-25 15:04:43,500 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 15:04:43,501 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:43,501 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:43,502 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:43,503 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND FALSE  !(!(__tmp__transferable_ERC20Token[this] == true))
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND FALSE  !(revert)
[L1966]              __var_2 := null;
[L1967]  COND FALSE  !(!(_to_s326 != null))
[L1971]  COND FALSE  !(!(_value_s326 <= __tmp__balances_ERC20Token[this][msgsender_MSG]))
[L1975]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L1736]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1975]  RET         call __var_3 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L1976]  COND FALSE  !(revert)
[L1979]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_ERC20Token[this][msgsender_MSG];
[L1980]              __tmp__balances_ERC20Token[this][msgsender_MSG] := __var_3;
[L1981]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_ERC20Token[this][msgsender_MSG];
[L1982]  CALL        call __var_4 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][_to_s326], _value_s326);
[L1750]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1751]              __ret_0_ := c_s102;
[L1982]  RET         call __var_4 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][_to_s326], _value_s326);
[L1983]  COND FALSE  !(revert)
[L1986]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_ERC20Token[this][_to_s326];
[L1987]              __tmp__balances_ERC20Token[this][_to_s326] := __var_4;
[L1988]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_ERC20Token[this][_to_s326];
[L1989]              __ret_0_ := true;
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND FALSE  !(!(__tmp__transferable_ERC20Token[this] == true))
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND FALSE  !(revert)
[L1966]              __var_2 := null;
[L1967]  COND FALSE  !(!(_to_s326 != null))
[L1971]  COND FALSE  !(!(_value_s326 <= __tmp__balances_ERC20Token[this][msgsender_MSG]))
[L1975]  CALL        call __var_3 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L1736]              __ret_0_ := (a_s78 - b_s78) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1975]  RET         call __var_3 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][msgsender_MSG], _value_s326);
[L1976]  COND FALSE  !(revert)
[L1979]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_ERC20Token[this][msgsender_MSG];
[L1980]              __tmp__balances_ERC20Token[this][msgsender_MSG] := __var_3;
[L1981]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_ERC20Token[this][msgsender_MSG];
[L1982]  CALL        call __var_4 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][_to_s326], _value_s326);
[L1750]              c_s102 := (a_s102 + b_s102) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1751]              __ret_0_ := c_s102;
[L1982]  RET         call __var_4 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_ERC20Token[this][_to_s326], _value_s326);
[L1983]  COND FALSE  !(revert)
[L1986]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_ERC20Token[this][_to_s326];
[L1987]              __tmp__balances_ERC20Token[this][_to_s326] := __var_4;
[L1988]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_ERC20Token[this][_to_s326];
[L1989]              __ret_0_ := true;
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:43,506 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:43,506 INFO  L82        PathProgramCache]: Analyzing trace with hash -513974680, now seen corresponding path program 1 times
[2020-11-25 15:04:43,507 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:43,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:43,537 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:43,538 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:43,538 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 15:04:43,538 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:43,538 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 15:04:43,538 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 15:04:43,538 INFO  L87              Difference]: Start difference. First operand 2098 states and 2273 transitions. cyclomatic complexity: 183 Second operand 5 states.
[2020-11-25 15:04:43,715 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:43,715 INFO  L93              Difference]: Finished difference Result 2668 states and 3081 transitions.
[2020-11-25 15:04:43,715 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 15:04:43,715 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2668 states and 3081 transitions.
[2020-11-25 15:04:43,722 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-11-25 15:04:43,729 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2668 states to 1953 states and 2358 transitions.
[2020-11-25 15:04:43,729 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 15:04:43,729 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 665
[2020-11-25 15:04:43,730 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1953 states and 2358 transitions.
[2020-11-25 15:04:43,731 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:43,732 INFO  L728         BuchiCegarLoop]: Abstraction has 1953 states and 2358 transitions.
[2020-11-25 15:04:43,733 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1953 states and 2358 transitions.
[2020-11-25 15:04:43,747 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1953 to 1415.
[2020-11-25 15:04:43,748 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1415 states.
[2020-11-25 15:04:43,749 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1415 states to 1415 states and 1544 transitions.
[2020-11-25 15:04:43,749 INFO  L751         BuchiCegarLoop]: Abstraction has 1415 states and 1544 transitions.
[2020-11-25 15:04:43,749 INFO  L631         BuchiCegarLoop]: Abstraction has 1415 states and 1544 transitions.
[2020-11-25 15:04:43,749 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 15:04:43,749 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1415 states and 1544 transitions.
[2020-11-25 15:04:43,751 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 15:04:43,751 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:43,751 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:43,752 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:43,752 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND FALSE  !(choice == 10)
[L3747]  COND FALSE  !(choice == 9)
[L3754]  COND FALSE  !(choice == 8)
[L3760]  COND FALSE  !(choice == 7)
[L3766]  COND FALSE  !(choice == 6)
[L3772]  COND TRUE   choice == 5
[L3773]              gas := gas - 21000;
[L3774]  COND TRUE   gas >= 0
[L3775]              assume msgvalue_MSG == 0;
[L3776]  CALL        call setTransferable~bool_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L486]               havoc __exception;
[L487]               revert := false;
[L488]   COND FALSE  !(__exception)
[L511]   CALL        call setTransferable~bool_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L1950]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1950]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1951]  COND FALSE  !(revert)
[L1954]              transferable_ERC20Token[this] := _transferable_s264;
[L511]   RET         call setTransferable~bool_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L512]               assume !revert && gas >= 0;
[L3776]  RET         call setTransferable~bool_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L3825]  RET         call CorralChoice_Erc20Base(this);
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND TRUE   !(__tmp__transferable_ERC20Token[this] == true)
[L3242]              revert := true;
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND TRUE   revert
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND TRUE   choice == 14
[L3716]              gas := gas - 21000;
[L3717]  COND FALSE  !(gas >= 0)
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:43,755 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:43,755 INFO  L82        PathProgramCache]: Analyzing trace with hash 1452767207, now seen corresponding path program 1 times
[2020-11-25 15:04:43,755 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:43,765 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:43,776 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:43,837 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:43,837 INFO  L82        PathProgramCache]: Analyzing trace with hash 1987003788, now seen corresponding path program 1 times
[2020-11-25 15:04:43,838 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:43,840 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:43,843 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:04:43,843 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:43,843 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:04:43,843 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 15:04:43,843 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:04:43,844 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:04:43,844 INFO  L87              Difference]: Start difference. First operand 1415 states and 1544 transitions. cyclomatic complexity: 136 Second operand 4 states.
[2020-11-25 15:04:43,953 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:43,953 INFO  L93              Difference]: Finished difference Result 1542 states and 1692 transitions.
[2020-11-25 15:04:43,953 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:04:43,953 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1542 states and 1692 transitions.
[2020-11-25 15:04:43,958 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 15:04:43,962 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1542 states to 1542 states and 1692 transitions.
[2020-11-25 15:04:43,963 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 539
[2020-11-25 15:04:43,963 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 539
[2020-11-25 15:04:43,963 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1542 states and 1692 transitions.
[2020-11-25 15:04:43,964 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:43,964 INFO  L728         BuchiCegarLoop]: Abstraction has 1542 states and 1692 transitions.
[2020-11-25 15:04:43,965 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1542 states and 1692 transitions.
[2020-11-25 15:04:43,974 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1542 to 1415.
[2020-11-25 15:04:43,974 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1415 states.
[2020-11-25 15:04:43,975 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1415 states to 1415 states and 1516 transitions.
[2020-11-25 15:04:43,975 INFO  L751         BuchiCegarLoop]: Abstraction has 1415 states and 1516 transitions.
[2020-11-25 15:04:43,975 INFO  L631         BuchiCegarLoop]: Abstraction has 1415 states and 1516 transitions.
[2020-11-25 15:04:43,975 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 15:04:43,975 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1415 states and 1516 transitions.
[2020-11-25 15:04:43,978 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 15:04:43,978 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:43,978 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:43,979 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:43,979 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC20Token0 := false;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]     CALL        call main();
[L3815]              assume null == 0;
[L3816]  CALL        call this := FreshRefGenerator__success();
[L1654]              havoc newRef;
[L1655]              assume Alloc[newRef] == false;
[L1656]              Alloc[newRef] := true;
[L1657]              assume newRef != null;
[L3816]  RET         call this := FreshRefGenerator__success();
[L3817]              assume now >= 0;
[L3818]              assume DType[this] == Erc20Base;
[L3819]              assume msgvalue_MSG == 0;
[L3820]              gas := gas - 53000;
[L3821]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3822]              assume !revert && gas >= 0;
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND FALSE  !(choice == 10)
[L3747]  COND FALSE  !(choice == 9)
[L3754]  COND FALSE  !(choice == 8)
[L3760]  COND FALSE  !(choice == 7)
[L3766]  COND FALSE  !(choice == 6)
[L3772]  COND TRUE   choice == 5
[L3773]              gas := gas - 21000;
[L3774]  COND TRUE   gas >= 0
[L3775]              assume msgvalue_MSG == 0;
[L3776]  CALL        call setTransferable~bool_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L486]               havoc __exception;
[L487]               revert := false;
[L488]   COND FALSE  !(__exception)
[L511]   CALL        call setTransferable~bool_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L1950]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1950]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1951]  COND FALSE  !(revert)
[L1954]              transferable_ERC20Token[this] := _transferable_s264;
[L511]   RET         call setTransferable~bool_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L512]               assume !revert && gas >= 0;
[L3776]  RET         call setTransferable~bool_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L3825]  RET         call CorralChoice_Erc20Base(this);
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND TRUE   choice == 12
[L3728]              gas := gas - 21000;
[L3729]  COND TRUE   gas >= 0
[L3730]              assume _value_s326 >= 0 && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3731]              assume msgvalue_MSG == 0;
[L3732]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Token0 := true;
[L2]                 call_transfer_ERC20Token0 := false;
[L2]                 revert := revert_hold;
[L542]               havoc __exception;
[L543]               revert := false;
[L544]   COND TRUE   __exception
[L545]               __tmp__Balance := Balance;
[L546]               __tmp__DType := DType;
[L547]               __tmp__Alloc := Alloc;
[L548]               __tmp__balance_ADDR := balance_ADDR;
[L549]               __tmp__M_Ref_int := M_Ref_int;
[L550]               __tmp__sum_balances0 := sum_balances0;
[L551]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]               __tmp__sum_allowed1 := sum_allowed1;
[L554]               __tmp__Length := Length;
[L555]               __tmp__now := now;
[L556]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]               __tmp__owner_Owned := owner_Owned;
[L558]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]               __tmp__name_Erc20Base := name_Erc20Base;
[L562]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND TRUE   !(__tmp__transferable_ERC20Token[this] == true)
[L3242]              revert := true;
[L1962]  RET         call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND TRUE   revert
[L564]   RET         call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]               assume revert || gas < 0;
[L3732]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L3825]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3825]  CALL        call CorralChoice_Erc20Base(this);
[L3669]              havoc msgsender_MSG;
[L3670]              havoc msgvalue_MSG;
[L3671]              havoc choice;
[L3672]              havoc __ret_0_totalSupply;
[L3673]              havoc _owner_s338;
[L3674]              havoc balance_s338;
[L3675]              havoc _to_s326;
[L3676]              havoc _value_s326;
[L3677]              havoc __ret_0_transfer;
[L3678]              havoc _owner_s489;
[L3679]              havoc _spender_s489;
[L3680]              havoc __ret_0_allowance;
[L3681]              havoc _from_s426;
[L3682]              havoc _to_s426;
[L3683]              havoc _value_s426;
[L3684]              havoc __ret_0_transferFrom;
[L3685]              havoc _spender_s473;
[L3686]              havoc _value_s473;
[L3687]              havoc success_s473;
[L3688]              havoc __ret_0_owner;
[L3689]              havoc _owner_s185;
[L3690]              havoc _owner_s221;
[L3691]              havoc __ret_0_transferable;
[L3692]              havoc _transferable_s264;
[L3693]              havoc __ret_0_signature;
[L3694]              havoc __ret_0_name;
[L3695]              havoc __ret_0_symbol;
[L3696]              havoc __ret_0_decimals;
[L3697]              havoc _issuer_s560;
[L3698]              havoc _name_s560;
[L3699]              havoc _symbol_s560;
[L3700]              havoc _totalSupplyCap_s560;
[L3701]              havoc _decimals_s560;
[L3702]              havoc tmpNow;
[L3703]              havoc gas;
[L3704]              assume gas > 4000000 && gas <= 8000000;
[L3705]              tmpNow := now;
[L3706]              havoc now;
[L3707]              assume now > tmpNow;
[L3708]              assume msgsender_MSG != null;
[L3709]              assume DType[msgsender_MSG] != SafeMath;
[L3710]              assume DType[msgsender_MSG] != ERC20;
[L3711]              assume DType[msgsender_MSG] != Owned;
[L3712]              assume DType[msgsender_MSG] != ERC20Token;
[L3713]              assume DType[msgsender_MSG] != Erc20Base;
[L3714]              Alloc[msgsender_MSG] := true;
[L3715]  COND FALSE  !(choice == 14)
[L3721]  COND FALSE  !(choice == 13)
[L3727]  COND FALSE  !(choice == 12)
[L3734]  COND FALSE  !(choice == 11)
[L3740]  COND FALSE  !(choice == 10)
[L3747]  COND FALSE  !(choice == 9)
[L3754]  COND FALSE  !(choice == 8)
[L3760]  COND FALSE  !(choice == 7)
[L3766]  COND FALSE  !(choice == 6)
[L3772]  COND FALSE  !(choice == 5)
[L3778]  COND FALSE  !(choice == 4)
[L3784]  COND FALSE  !(choice == 3)
[L3790]  COND FALSE  !(choice == 2)
[L3796]  COND FALSE  !(choice == 1)
[L3825]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:43,982 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:43,982 INFO  L82        PathProgramCache]: Analyzing trace with hash 1452767207, now seen corresponding path program 2 times
[2020-11-25 15:04:43,983 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:43,992 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:44,002 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:44,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:44,023 INFO  L82        PathProgramCache]: Analyzing trace with hash 928727020, now seen corresponding path program 1 times
[2020-11-25 15:04:44,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:44,025 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:44,027 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:44,030 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:44,030 INFO  L82        PathProgramCache]: Analyzing trace with hash 1788802246, now seen corresponding path program 1 times
[2020-11-25 15:04:44,031 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:44,040 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:44,052 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 97 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3019 to 6037
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 15:04:44,829 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 174
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
[2020-11-25 15:04:45,170 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 124
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 15:04:45,576 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification. DAG size of input: 229 DAG size of output: 220
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 15:04:46,738 WARN  L188               SmtUtils]: Spent 910.00 ms on a formula simplification. DAG size of input: 579 DAG size of output: 572
Garbage collection #1: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #2: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #3: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #4: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #5: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #6: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #7: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 15:04:46,921 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 286
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 15:04:47,173 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification. DAG size of input: 288 DAG size of output: 287
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 15:04:47,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:47,302 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:04:47 BasicIcfg
[2020-11-25 15:04:47,302 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:04:47,302 INFO  L168              Benchmark]: Toolchain (without parser) took 17921.43 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 940.6 MB in the beginning and 1.5 GB in the end (delta: -531.0 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,303 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,303 INFO  L168              Benchmark]: Boogie Preprocessor took 91.33 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,303 INFO  L168              Benchmark]: UtopiaSpecLang took 57.96 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,304 INFO  L168              Benchmark]: Boogie Printer took 14.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,304 INFO  L168              Benchmark]: RCFGBuilder took 675.62 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 811.7 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,305 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.69 ms. Allocated memory is still 1.0 GB. Free memory was 811.7 MB in the beginning and 802.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,306 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1231.56 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 248.0 MB). Free memory was 802.8 MB in the beginning and 1.2 GB in the end (delta: -357.0 MB). Peak memory consumption was 197.1 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,306 INFO  L168              Benchmark]: BlockEncodingV2 took 106.83 ms. Allocated memory is still 1.3 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 63.9 MB). Peak memory consumption was 63.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,306 INFO  L168              Benchmark]: BuchiAutomizer took 15700.07 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: -375.8 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 15:04:47,310 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3202 locations, 5606 edges
  - StatisticsResult: Encoded RCFG
    3168 locations, 5524 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 91.33 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.96 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.32 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 675.62 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 811.7 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.69 ms. Allocated memory is still 1.0 GB. Free memory was 811.7 MB in the beginning and 802.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1231.56 ms. Allocated memory was 1.0 GB in the beginning and 1.3 GB in the end (delta: 248.0 MB). Free memory was 802.8 MB in the beginning and 1.2 GB in the end (delta: -357.0 MB). Peak memory consumption was 197.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 106.83 ms. Allocated memory is still 1.3 GB. Free memory was 1.2 GB in the beginning and 1.1 GB in the end (delta: 63.9 MB). Peak memory consumption was 63.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 15700.07 ms. Allocated memory was 1.3 GB in the beginning and 2.4 GB in the end (delta: 1.1 GB). Free memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: -375.8 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1321 locations, 1715 edges
  - StatisticsResult: BuchiProgram size
    3202 locations, 5606 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.8 modules have a trivial ranking function, the largest among these consists of 31 locations. The remainder module has 1415 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 15.6s and 9 iterations.  TraceHistogramMax:2. Analysis of lassos took 5.1s. Construction of modules took 7.8s. BÃ¼chi inclusion checks took 2.1s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 8 MinimizatonAttempts, 2852 StatesRemovedByMinimization, 7 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 2098 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 16963 SDtfs, 17226 SDslu, 38267 SDs, 0 SdLazy, 55027 SolverSat, 3009 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 7.8s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(4000008) = (new Erc20Base)({from : 4000017, _issuer : 4000002, _name : 4000014, _symbol : 4000005, _totalSupplyCap : (- 1), _decimals : 4000018});
[L951]               havoc __exception;
[L952]               revert := false;
[L953]   COND FALSE  !(__exception)
[L976]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2283]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L2283]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2284]  COND FALSE  !(revert)
[L2287]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1840]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1823]              assume msgsender_MSG != null;
[L1824]              Balance[this] := 0;
[L1825]              owner_Owned[this] := null;
[L1827]              owner_Owned[this] := _owner_s185;
[L1840]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1841]  COND FALSE  !(revert)
[L2287]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2288]  COND FALSE  !(revert)
[L2291]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1929]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1792]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1776]              assume msgsender_MSG != null;
[L1777]              Balance[this] := 0;
[L1778]              totalSupply_ERC20[this] := 0;
[L1792]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  COND FALSE  !(revert)
[L1929]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  COND FALSE  !(revert)
[L1933]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1905]              assume msgsender_MSG != null;
[L1906]              Balance[this] := 0;
[L1907]              balances_ERC20Token[this] := zeroRefintArr();
[L1908]              sum_balances0[this] := 0;
[L1909]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1910]              sum_allowed1[this] := 0;
[L1911]              transferable_ERC20Token[this] := true;
[L1933]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1934]  COND FALSE  !(revert)
[L2291]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2292]  COND FALSE  !(revert)
[L2295]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2245]              assume msgsender_MSG != null;
[L2246]              Balance[this] := 0;
[L2247]              name_Erc20Base[this] := -1000343086;
[L2248]              symbol_Erc20Base[this] := -1000343086;
[L2249]              decimals_Erc20Base[this] := 0;
[L2251]              name_Erc20Base[this] := _name_s560;
[L2252]              symbol_Erc20Base[this] := _symbol_s560;
[L2253]              decimals_Erc20Base[this] := _decimals_s560;
[L2254]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2255]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2256]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2257]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2258]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2295]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2296]  COND FALSE  !(revert)
[L976]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L977]               assume !revert && gas >= 0;
[L3821]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
ERC20Token(4000008).setTransferable~bool.gas(3979002)({from : 4000002, _transferable : false});
[L486]               havoc __exception;
[L487]               revert := false;
[L488]   COND FALSE  !(__exception)
[L511]   CALL        call setTransferable~bool_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L1950]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3233]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L1950]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1951]  COND FALSE  !(revert)
[L1954]              transferable_ERC20Token[this] := _transferable_s264;
[L511]   RET         call setTransferable~bool_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
[L512]               assume !revert && gas >= 0;
[L3776]  RET         call setTransferable~bool_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _transferable_s264);
ERC20Token(4000008).transfer~address~uint256.gas(3979001)({from : 4000013, _to : 4000013, _value : 0});
[L2]                revert_hold := revert;
[L2]                revert := false;
[L2]                assume ((((((msgsender_MSG == _to_s326 && _value_s326 <= balances_ERC20Token[this][msgsender_MSG]) && _value_s326 >= 0) && _value_s326 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][_to_s326] >= 0) && balances_ERC20Token[this][_to_s326] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_ERC20Token[this][msgsender_MSG] >= 0) && balances_ERC20Token[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                call_transfer_ERC20Token0 := true;
[L2]                call_transfer_ERC20Token0 := false;
[L2]                revert := revert_hold;
[L542]              havoc __exception;
[L543]              revert := false;
[L544]   COND TRUE  __exception
[L545]              __tmp__Balance := Balance;
[L546]              __tmp__DType := DType;
[L547]              __tmp__Alloc := Alloc;
[L548]              __tmp__balance_ADDR := balance_ADDR;
[L549]              __tmp__M_Ref_int := M_Ref_int;
[L550]              __tmp__sum_balances0 := sum_balances0;
[L551]              __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L552]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L553]              __tmp__sum_allowed1 := sum_allowed1;
[L554]              __tmp__Length := Length;
[L555]              __tmp__now := now;
[L556]              __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L557]              __tmp__owner_Owned := owner_Owned;
[L558]              __tmp__balances_ERC20Token := balances_ERC20Token;
[L559]              __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L560]              __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L561]              __tmp__name_Erc20Base := name_Erc20Base;
[L562]              __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L563]              __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L564]   CALL       call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L1962]  CALL       call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L3241]  COND TRUE  !(__tmp__transferable_ERC20Token[this] == true)
[L3242]             revert := true;
[L1962]  RET        call canTransfer_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L1963]  COND TRUE  revert
[L564]   RET        call __ret_0_ := transfer~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);
[L565]              assume revert || gas < 0;
[L3732]  RET        call __ret_0_transfer := transfer~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _to_s326, _value_s326);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
