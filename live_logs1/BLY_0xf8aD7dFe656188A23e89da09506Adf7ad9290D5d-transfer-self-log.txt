This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:47:11,339 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:47:11,340 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:47:11,351 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:47:11,352 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:47:11,352 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:47:11,353 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:47:11,355 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:47:11,356 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:47:11,357 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:47:11,358 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:47:11,358 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:47:11,359 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:47:11,360 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:47:11,360 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:47:11,361 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:47:11,362 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:47:11,363 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:47:11,365 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:47:11,366 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:47:11,366 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:47:11,367 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:47:11,369 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:47:11,369 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:47:11,369 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:47:11,370 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:47:11,370 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:47:11,371 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:47:11,371 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:47:11,371 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:47:11,372 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:47:11,372 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:47:11,373 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:47:11,373 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:47:11,374 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:47:11,374 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:47:11,375 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:47:11,375 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:47:11,375 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:47:11,376 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:47:11,376 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:47:11,376 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:47:11,385 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:47:11,385 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:47:11,386 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:47:11,386 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:47:11,386 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:47:11,386 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:47:11,386 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:47:11,387 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:47:11,387 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:47:11,387 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:47:11,387 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:47:11,387 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:47:11,387 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:47:11,387 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:47:11,387 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:47:11,388 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:47:11,388 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:47:11,389 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:47:11,389 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:47:11,412 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:47:11,424 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:47:11,427 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:47:11,428 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:47:11,429 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:47:11,430 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl
[2020-11-25 00:47:11,430 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl'
[2020-11-25 00:47:11,557 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:47:11,558 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:47:11,558 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:47:11,559 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:47:11,559 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:47:11,575 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,577 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,628 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,629 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,663 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,684 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,699 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,718 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:47:11,719 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:47:11,719 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:47:11,721 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:47:11,725 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/1) ...
[2020-11-25 00:47:11,751 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BLY.transfer(to, value), msg.sender == to && value <= _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:47:11,757 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BLY.transfer(to, value), msg.sender == to && value <= _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:47:11,764 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BLY.transfer(to, value), msg.sender == to && value <= _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:47:11,774 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s1288 && value_s1288<=_balances_HxERC20[this][msg.sender] ) && value_s1288>=0 ) && value_s1288<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][to_s1288]>=0 ) && _balances_HxERC20[this][to_s1288]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][msg.sender]>=0 ) && _balances_HxERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:47:11,778 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_HxERC20[this]==( old(_totalSupply_HxERC20[this]) ) ) && _balances_HxERC20[this]==( old(_balances_HxERC20[this]) ) ) && _allowed_HxERC20[this]==( old(_allowed_HxERC20[this]) ) ) && implementation_BLY[this]==( old(implementation_BLY[this]) ) ) && M_Ref_Ref[timelockList_BLY[this]]==( old(M_Ref_Ref[timelockList_BLY[this]]) ) ) && frozenAccount_BLY[this]==( old(frozenAccount_BLY[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && owner_HxOwnable[this]==( old(owner_HxOwnable[this]) ) ) && newOwner_HxOwnable[this]==( old(newOwner_HxOwnable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_BLY>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowed_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[implementation_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_Ref_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[timelockList_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_BLY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_HxOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]]]]
[2020-11-25 00:47:11,784 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BLY.transfer(to, value), msg.sender == to && value <= _balances_HxERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BLY.transfer(to, value), return == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this]) && _balances_HxERC20[this] == old(_balances_HxERC20[this]) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this]) && implementation_BLY[this] == old(implementation_BLY[this]) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]]) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && owner_HxOwnable[this] == old(owner_HxOwnable[this]) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 00:47:11,785 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BLY0) ==> ( <>AP(success_transfer_BLY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:47:11,805 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:47:11 PropertyContainer
[2020-11-25 00:47:11,806 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:47:11,806 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:47:11,806 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:47:11,806 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:47:11,807 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/2) ...
[2020-11-25 00:47:11,807 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:47:11,807 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:47:11,834 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:47:11" (2/2) ...
[2020-11-25 00:47:11,834 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:47:11,834 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:47:11,834 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:47:11,834 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:47:11,835 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/2) ...
[2020-11-25 00:47:11,887 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:47:11,887 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:47:11,888 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,888 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,889 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:47:11,889 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 00:47:11,889 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 00:47:11,889 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 00:47:11,889 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 00:47:11,889 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 00:47:11,889 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:47:11,889 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 00:47:11,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 00:47:11,890 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 00:47:11,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 00:47:11,890 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:47:11,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:47:11,890 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 00:47:11,890 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 00:47:11,891 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 00:47:11,891 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 00:47:11,891 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 00:47:11,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 00:47:11,892 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:47:11,892 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 00:47:11,892 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 00:47:11,892 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 00:47:11,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 00:47:11,893 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 00:47:11,893 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 00:47:11,894 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 00:47:11,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 00:47:11,894 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 00:47:11,894 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 00:47:11,894 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:47:11,895 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:47:11,895 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:47:11,895 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 00:47:11,895 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 00:47:11,896 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 00:47:11,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 00:47:11,896 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 00:47:11,896 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 00:47:11,896 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 00:47:11,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 00:47:11,897 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:47:11,897 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 00:47:11,897 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 00:47:11,897 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 00:47:11,898 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 00:47:11,898 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 00:47:11,898 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 00:47:11,898 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 00:47:11,898 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 00:47:11,899 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:47:11,899 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 00:47:11,899 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 00:47:11,899 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 00:47:11,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 00:47:11,900 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 00:47:11,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 00:47:11,900 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 00:47:11,900 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 00:47:11,901 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:47:11,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:47:11,901 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 00:47:11,901 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 00:47:11,901 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:47:11,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:47:11,902 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:47:11,902 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:47:11,902 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:47:11,903 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:47:11,903 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:47:11,903 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:47:11,903 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:47:11,903 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:47:11,904 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:47:11,904 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:47:11,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:47:11,904 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:47:11,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:47:11,904 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:47:11,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:47:11,904 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:47:11,904 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:47:11,904 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:47:11,904 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 00:47:11,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 00:47:11,905 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 00:47:11,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 00:47:11,905 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 00:47:11,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 00:47:11,905 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:47:11,905 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 00:47:11,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 00:47:11,905 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 00:47:11,905 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 00:47:11,905 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 00:47:11,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 00:47:11,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:47:11,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:47:11,906 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 00:47:11,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 00:47:11,906 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 00:47:11,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 00:47:11,906 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:47:11,906 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:47:11,906 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:47:11,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:47:11,907 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 00:47:11,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 00:47:11,907 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 00:47:11,907 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 00:47:11,907 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:47:11,907 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:47:11,907 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:47:11,907 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 00:47:11,907 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 00:47:11,908 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 00:47:11,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 00:47:11,908 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 00:47:11,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 00:47:11,908 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 00:47:11,908 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 00:47:11,908 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:47:11,908 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:47:11,908 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:47:11,908 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 00:47:11,909 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 00:47:11,910 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:47:11,911 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 00:47:11,912 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 00:47:11,913 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 00:47:11,914 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 00:47:11,915 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:47:11,916 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,917 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:47:11,918 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:47:11,919 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:47:11,920 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:47:11,921 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:47:11,921 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 00:47:11,921 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:47:11,921 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:47:11,921 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:47:11,921 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:47:11,922 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:47:11,923 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:47:11,923 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 00:47:11,923 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 00:47:11,923 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 00:47:11,923 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 00:47:11,923 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 00:47:11,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:47:11,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:47:11,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 00:47:11,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 00:47:11,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:47:11,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:47:11,923 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,924 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 00:47:11,925 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 00:47:11,926 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 00:47:11,927 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 00:47:11,928 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 00:47:11,929 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:47:11,930 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:47:11,931 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:47:11,932 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:47:11,933 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:47:11,934 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:47:11,935 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 00:47:11,936 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 00:47:11,937 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 00:47:11,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:47:11,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:47:11,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:47:11,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:47:11,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 00:47:11,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:47:11,938 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:47:11,938 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:47:12,392 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:47:12,392 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:47:12,392 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:47:13,258 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:47:13,258 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 00:47:13,261 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:47:13 BoogieIcfgContainer
[2020-11-25 00:47:13,261 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:47:11" (2/2) ...
[2020-11-25 00:47:13,261 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:47:13,261 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@24b5c910 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:47:13, skipping insertion in model container
[2020-11-25 00:47:13,262 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:47:13,262 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:47:13,262 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:47:13,263 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:47:13,263 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/3) ...
[2020-11-25 00:47:13,263 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6cb72fb5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:47:13, skipping insertion in model container
[2020-11-25 00:47:13,263 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:47:11" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:47:13,298 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:47:13 NWAContainer
[2020-11-25 00:47:13,298 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:47:13,298 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:47:13,298 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:47:13,299 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:47:13,300 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:47:13" (3/4) ...
[2020-11-25 00:47:13,301 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@312d414a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:47:13, skipping insertion in model container
[2020-11-25 00:47:13,301 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:47:13" (4/4) ...
[2020-11-25 00:47:13,304 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:47:13,312 INFO  L110   BuchiProductObserver]: Initial RCFG 4605 locations, 6368 edges
[2020-11-25 00:47:13,312 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:47:13,330 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:47:16,633 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:47:16,648 INFO  L110   BuchiProductObserver]: BuchiProgram size 11434 locations, 20718 edges
[2020-11-25 00:47:16,648 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:47:16 BoogieIcfgContainer
[2020-11-25 00:47:16,648 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:47:16,648 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:47:16,648 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:47:16,649 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:47:16,650 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:47:16" (1/1) ...
[2020-11-25 00:47:16,848 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:47:16,852 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:47:16,870 INFO  L313           BlockEncoder]: Initial Icfg 11434 locations, 20718 edges
[2020-11-25 00:47:16,870 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:47:16,870 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:47:16,870 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:47:16,871 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:47:16,892 INFO  L70    emoveInfeasibleEdges]: Removed 213 edges and 23 locations because of local infeasibility
[2020-11-25 00:47:16,915 INFO  L70        RemoveSinkStates]: Removed 98 edges and 65 locations by removing sink states
[2020-11-25 00:47:16,940 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:47:16,948 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:47:16,955 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:47:16,955 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:47:16,960 INFO  L313           BlockEncoder]: Encoded RCFG 11292 locations, 20327 edges
[2020-11-25 00:47:16,961 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:47:16 BasicIcfg
[2020-11-25 00:47:16,961 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:47:16,961 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:47:16,961 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:47:16,963 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:47:16,963 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:47:16,963 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:47:11" (1/6) ...
[2020-11-25 00:47:16,965 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5fcf8484 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:47:16, skipping insertion in model container
[2020-11-25 00:47:16,965 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:47:16,965 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:47:11" (2/6) ...
[2020-11-25 00:47:16,965 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5fcf8484 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:47:16, skipping insertion in model container
[2020-11-25 00:47:16,965 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:47:16,965 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:47:13" (3/6) ...
[2020-11-25 00:47:16,965 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5fcf8484 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:47:16, skipping insertion in model container
[2020-11-25 00:47:16,965 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:47:16,965 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:47:13" (4/6) ...
[2020-11-25 00:47:16,966 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5fcf8484 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:47:16, skipping insertion in model container
[2020-11-25 00:47:16,966 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:47:16,966 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:47:16" (5/6) ...
[2020-11-25 00:47:16,966 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5fcf8484 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:47:16, skipping insertion in model container
[2020-11-25 00:47:16,966 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:47:16,966 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:47:16" (6/6) ...
[2020-11-25 00:47:16,967 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-self.bpl_BEv2
[2020-11-25 00:47:17,001 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:47:17,001 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:47:17,001 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:47:17,001 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:47:17,001 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:47:17,001 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:47:17,001 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:47:17,001 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:47:17,001 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:47:17,127 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11292 states.
[2020-11-25 00:47:17,222 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:17,223 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:17,223 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:17,233 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:17,233 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:17,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:47:17,233 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11292 states.
[2020-11-25 00:47:17,284 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:17,284 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:17,285 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:17,287 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:17,287 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:17,306 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:17,306 INFO  L82        PathProgramCache]: Analyzing trace with hash 236109498, now seen corresponding path program 1 times
[2020-11-25 00:47:17,312 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:17,341 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:17,389 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:47:17,391 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:17,391 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:47:17,806 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:17,814 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:47:17,815 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:47:17,816 INFO  L87              Difference]: Start difference. First operand 11292 states. Second operand 4 states.
[2020-11-25 00:47:18,883 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:18,884 INFO  L93              Difference]: Finished difference Result 7165 states and 8389 transitions.
[2020-11-25 00:47:18,884 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:47:18,885 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7165 states and 8389 transitions.
[2020-11-25 00:47:18,934 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:18,972 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7165 states to 7165 states and 8389 transitions.
[2020-11-25 00:47:18,973 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 00:47:18,976 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1329
[2020-11-25 00:47:18,976 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7165 states and 8389 transitions.
[2020-11-25 00:47:18,992 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:18,993 INFO  L728         BuchiCegarLoop]: Abstraction has 7165 states and 8389 transitions.
[2020-11-25 00:47:19,014 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7165 states and 8389 transitions.
[2020-11-25 00:47:19,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7165 to 7165.
[2020-11-25 00:47:19,106 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7165 states.
[2020-11-25 00:47:19,117 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7165 states to 7165 states and 8389 transitions.
[2020-11-25 00:47:19,118 INFO  L751         BuchiCegarLoop]: Abstraction has 7165 states and 8389 transitions.
[2020-11-25 00:47:19,118 INFO  L631         BuchiCegarLoop]: Abstraction has 7165 states and 8389 transitions.
[2020-11-25 00:47:19,118 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:47:19,118 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7165 states and 8389 transitions.
[2020-11-25 00:47:19,128 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:19,129 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:19,129 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:19,130 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:19,131 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:19,135 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:19,135 INFO  L82        PathProgramCache]: Analyzing trace with hash -663702115, now seen corresponding path program 1 times
[2020-11-25 00:47:19,136 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:19,146 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:19,173 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:47:19,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:19,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:47:19,175 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:19,175 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:47:19,175 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:47:19,175 INFO  L87              Difference]: Start difference. First operand 7165 states and 8389 transitions. cyclomatic complexity: 1234 Second operand 3 states.
[2020-11-25 00:47:19,352 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:19,352 INFO  L93              Difference]: Finished difference Result 9119 states and 10652 transitions.
[2020-11-25 00:47:19,352 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:47:19,352 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9119 states and 10652 transitions.
[2020-11-25 00:47:19,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:47:19,417 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9119 states to 9119 states and 10652 transitions.
[2020-11-25 00:47:19,417 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1850
[2020-11-25 00:47:19,420 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1850
[2020-11-25 00:47:19,420 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9119 states and 10652 transitions.
[2020-11-25 00:47:19,433 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:19,433 INFO  L728         BuchiCegarLoop]: Abstraction has 9119 states and 10652 transitions.
[2020-11-25 00:47:19,444 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9119 states and 10652 transitions.
[2020-11-25 00:47:19,539 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9119 to 7967.
[2020-11-25 00:47:19,540 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7967 states.
[2020-11-25 00:47:19,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7967 states to 7967 states and 9258 transitions.
[2020-11-25 00:47:19,550 INFO  L751         BuchiCegarLoop]: Abstraction has 7967 states and 9258 transitions.
[2020-11-25 00:47:19,550 INFO  L631         BuchiCegarLoop]: Abstraction has 7967 states and 9258 transitions.
[2020-11-25 00:47:19,550 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:47:19,550 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7967 states and 9258 transitions.
[2020-11-25 00:47:19,560 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:19,560 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:19,560 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:19,562 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:19,562 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND TRUE   !(account_s164 != null)
[L5739]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:19,567 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:19,567 INFO  L82        PathProgramCache]: Analyzing trace with hash 133651446, now seen corresponding path program 1 times
[2020-11-25 00:47:19,568 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:19,579 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:19,637 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:47:19,637 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:19,637 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 00:47:19,638 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:19,638 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:47:19,638 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:47:19,638 INFO  L87              Difference]: Start difference. First operand 7967 states and 9258 transitions. cyclomatic complexity: 1301 Second operand 9 states.
[2020-11-25 00:47:19,822 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:19,822 INFO  L93              Difference]: Finished difference Result 8013 states and 9333 transitions.
[2020-11-25 00:47:19,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:47:19,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8013 states and 9333 transitions.
[2020-11-25 00:47:19,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:19,870 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8013 states to 8013 states and 9333 transitions.
[2020-11-25 00:47:19,870 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1546
[2020-11-25 00:47:19,871 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1546
[2020-11-25 00:47:19,871 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8013 states and 9333 transitions.
[2020-11-25 00:47:19,878 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:19,878 INFO  L728         BuchiCegarLoop]: Abstraction has 8013 states and 9333 transitions.
[2020-11-25 00:47:19,885 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8013 states and 9333 transitions.
[2020-11-25 00:47:19,948 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8013 to 8004.
[2020-11-25 00:47:19,949 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8004 states.
[2020-11-25 00:47:19,959 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8004 states to 8004 states and 9317 transitions.
[2020-11-25 00:47:19,959 INFO  L751         BuchiCegarLoop]: Abstraction has 8004 states and 9317 transitions.
[2020-11-25 00:47:19,959 INFO  L631         BuchiCegarLoop]: Abstraction has 8004 states and 9317 transitions.
[2020-11-25 00:47:19,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:47:19,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8004 states and 9317 transitions.
[2020-11-25 00:47:19,971 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:19,971 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:19,971 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:19,974 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:19,974 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND TRUE   !(account_s218 != null)
[L5810]               revert := true;
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND TRUE   revert
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:19,980 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:19,981 INFO  L82        PathProgramCache]: Analyzing trace with hash -297490338, now seen corresponding path program 1 times
[2020-11-25 00:47:19,984 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:20,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:20,101 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:47:20,101 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:20,102 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 00:47:20,102 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:20,102 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 00:47:20,102 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 00:47:20,102 INFO  L87              Difference]: Start difference. First operand 8004 states and 9317 transitions. cyclomatic complexity: 1323 Second operand 10 states.
[2020-11-25 00:47:20,211 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:20,211 INFO  L93              Difference]: Finished difference Result 8064 states and 9408 transitions.
[2020-11-25 00:47:20,211 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:47:20,211 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8064 states and 9408 transitions.
[2020-11-25 00:47:20,226 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:20,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8064 states to 8064 states and 9408 transitions.
[2020-11-25 00:47:20,245 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1553
[2020-11-25 00:47:20,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1553
[2020-11-25 00:47:20,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8064 states and 9408 transitions.
[2020-11-25 00:47:20,251 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:20,251 INFO  L728         BuchiCegarLoop]: Abstraction has 8064 states and 9408 transitions.
[2020-11-25 00:47:20,257 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8064 states and 9408 transitions.
[2020-11-25 00:47:20,301 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8064 to 8011.
[2020-11-25 00:47:20,301 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8011 states.
[2020-11-25 00:47:20,309 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8011 states to 8011 states and 9325 transitions.
[2020-11-25 00:47:20,310 INFO  L751         BuchiCegarLoop]: Abstraction has 8011 states and 9325 transitions.
[2020-11-25 00:47:20,310 INFO  L631         BuchiCegarLoop]: Abstraction has 8011 states and 9325 transitions.
[2020-11-25 00:47:20,310 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:47:20,310 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8011 states and 9325 transitions.
[2020-11-25 00:47:20,318 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:20,318 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:20,318 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:20,319 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:20,319 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND TRUE   !!__var_2
[L5747]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:20,323 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:20,323 INFO  L82        PathProgramCache]: Analyzing trace with hash -1672155673, now seen corresponding path program 1 times
[2020-11-25 00:47:20,324 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:20,334 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:20,368 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 00:47:20,368 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:20,368 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:47:20,369 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:20,369 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:47:20,369 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:47:20,369 INFO  L87              Difference]: Start difference. First operand 8011 states and 9325 transitions. cyclomatic complexity: 1324 Second operand 3 states.
[2020-11-25 00:47:20,483 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:20,483 INFO  L93              Difference]: Finished difference Result 9139 states and 10340 transitions.
[2020-11-25 00:47:20,483 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:47:20,483 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9139 states and 10340 transitions.
[2020-11-25 00:47:20,501 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:47:20,521 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9139 states to 8461 states and 9536 transitions.
[2020-11-25 00:47:20,521 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1652
[2020-11-25 00:47:20,522 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1734
[2020-11-25 00:47:20,522 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8461 states and 9536 transitions.
[2020-11-25 00:47:20,528 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:20,528 INFO  L728         BuchiCegarLoop]: Abstraction has 8461 states and 9536 transitions.
[2020-11-25 00:47:20,534 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8461 states and 9536 transitions.
[2020-11-25 00:47:20,575 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8461 to 7477.
[2020-11-25 00:47:20,575 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7477 states.
[2020-11-25 00:47:20,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7477 states to 7477 states and 8310 transitions.
[2020-11-25 00:47:20,582 INFO  L751         BuchiCegarLoop]: Abstraction has 7477 states and 8310 transitions.
[2020-11-25 00:47:20,582 INFO  L631         BuchiCegarLoop]: Abstraction has 7477 states and 8310 transitions.
[2020-11-25 00:47:20,582 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:47:20,582 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7477 states and 8310 transitions.
[2020-11-25 00:47:20,590 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:20,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:20,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:20,594 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:20,594 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:20,600 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:20,600 INFO  L82        PathProgramCache]: Analyzing trace with hash 1064674323, now seen corresponding path program 1 times
[2020-11-25 00:47:20,601 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:20,615 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:20,792 INFO  L134       CoverageAnalysis]: Checked inductivity of 948 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 00:47:20,792 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:20,792 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:47:20,793 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:20,793 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:47:20,793 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:47:20,793 INFO  L87              Difference]: Start difference. First operand 7477 states and 8310 transitions. cyclomatic complexity: 843 Second operand 7 states.
[2020-11-25 00:47:20,921 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:20,921 INFO  L93              Difference]: Finished difference Result 7500 states and 8337 transitions.
[2020-11-25 00:47:20,921 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:47:20,921 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7500 states and 8337 transitions.
[2020-11-25 00:47:20,934 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:20,950 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7500 states to 7483 states and 8317 transitions.
[2020-11-25 00:47:20,950 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 00:47:20,951 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 00:47:20,951 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7483 states and 8317 transitions.
[2020-11-25 00:47:20,955 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:20,955 INFO  L728         BuchiCegarLoop]: Abstraction has 7483 states and 8317 transitions.
[2020-11-25 00:47:20,961 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7483 states and 8317 transitions.
[2020-11-25 00:47:20,994 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7483 to 7483.
[2020-11-25 00:47:20,994 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7483 states.
[2020-11-25 00:47:21,001 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7483 states to 7483 states and 8317 transitions.
[2020-11-25 00:47:21,002 INFO  L751         BuchiCegarLoop]: Abstraction has 7483 states and 8317 transitions.
[2020-11-25 00:47:21,002 INFO  L631         BuchiCegarLoop]: Abstraction has 7483 states and 8317 transitions.
[2020-11-25 00:47:21,002 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:47:21,002 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7483 states and 8317 transitions.
[2020-11-25 00:47:21,009 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:21,010 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:21,010 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:21,012 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:21,012 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:21,018 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:21,018 INFO  L82        PathProgramCache]: Analyzing trace with hash 1075219693, now seen corresponding path program 1 times
[2020-11-25 00:47:21,019 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:21,038 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:21,203 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:47:21,204 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:21,204 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:47:21,204 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:21,204 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:47:21,205 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:47:21,205 INFO  L87              Difference]: Start difference. First operand 7483 states and 8317 transitions. cyclomatic complexity: 844 Second operand 8 states.
[2020-11-25 00:47:21,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:21,353 INFO  L93              Difference]: Finished difference Result 7504 states and 8341 transitions.
[2020-11-25 00:47:21,353 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:47:21,353 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7504 states and 8341 transitions.
[2020-11-25 00:47:21,365 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:21,380 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7504 states to 7490 states and 8325 transitions.
[2020-11-25 00:47:21,380 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 00:47:21,380 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 00:47:21,380 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7490 states and 8325 transitions.
[2020-11-25 00:47:21,385 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:21,385 INFO  L728         BuchiCegarLoop]: Abstraction has 7490 states and 8325 transitions.
[2020-11-25 00:47:21,391 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7490 states and 8325 transitions.
[2020-11-25 00:47:21,426 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7490 to 7490.
[2020-11-25 00:47:21,426 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7490 states.
[2020-11-25 00:47:21,434 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7490 states to 7490 states and 8325 transitions.
[2020-11-25 00:47:21,434 INFO  L751         BuchiCegarLoop]: Abstraction has 7490 states and 8325 transitions.
[2020-11-25 00:47:21,434 INFO  L631         BuchiCegarLoop]: Abstraction has 7490 states and 8325 transitions.
[2020-11-25 00:47:21,434 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:47:21,434 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7490 states and 8325 transitions.
[2020-11-25 00:47:21,444 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:21,445 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:21,445 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:21,448 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:21,448 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:21,453 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:21,454 INFO  L82        PathProgramCache]: Analyzing trace with hash -816826275, now seen corresponding path program 1 times
[2020-11-25 00:47:21,454 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:21,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:21,654 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 00:47:21,654 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:21,654 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:47:21,655 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:21,655 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:47:21,655 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:47:21,655 INFO  L87              Difference]: Start difference. First operand 7490 states and 8325 transitions. cyclomatic complexity: 845 Second operand 8 states.
[2020-11-25 00:47:21,782 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:21,782 INFO  L93              Difference]: Finished difference Result 7517 states and 8356 transitions.
[2020-11-25 00:47:21,782 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:47:21,782 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7517 states and 8356 transitions.
[2020-11-25 00:47:21,794 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:21,808 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7517 states to 7496 states and 8331 transitions.
[2020-11-25 00:47:21,808 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1499
[2020-11-25 00:47:21,808 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1499
[2020-11-25 00:47:21,808 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7496 states and 8331 transitions.
[2020-11-25 00:47:21,813 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:21,813 INFO  L728         BuchiCegarLoop]: Abstraction has 7496 states and 8331 transitions.
[2020-11-25 00:47:21,819 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7496 states and 8331 transitions.
[2020-11-25 00:47:21,856 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7496 to 7496.
[2020-11-25 00:47:21,856 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7496 states.
[2020-11-25 00:47:21,864 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7496 states to 7496 states and 8331 transitions.
[2020-11-25 00:47:21,864 INFO  L751         BuchiCegarLoop]: Abstraction has 7496 states and 8331 transitions.
[2020-11-25 00:47:21,864 INFO  L631         BuchiCegarLoop]: Abstraction has 7496 states and 8331 transitions.
[2020-11-25 00:47:21,864 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:47:21,864 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7496 states and 8331 transitions.
[2020-11-25 00:47:21,871 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:47:21,871 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:21,872 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:21,873 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:21,873 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND FALSE  !(__tmp__DType[this] == BLY)
[L5982]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L5983]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5983]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5984]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:21,879 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:21,879 INFO  L82        PathProgramCache]: Analyzing trace with hash -1610294492, now seen corresponding path program 1 times
[2020-11-25 00:47:21,880 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:21,893 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:22,083 INFO  L134       CoverageAnalysis]: Checked inductivity of 900 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 873 trivial. 0 not checked.
[2020-11-25 00:47:22,083 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:22,083 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:47:22,084 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:22,084 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:47:22,084 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:47:22,084 INFO  L87              Difference]: Start difference. First operand 7496 states and 8331 transitions. cyclomatic complexity: 845 Second operand 8 states.
[2020-11-25 00:47:23,497 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:23,497 INFO  L93              Difference]: Finished difference Result 10413 states and 11744 transitions.
[2020-11-25 00:47:23,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:47:23,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10413 states and 11744 transitions.
[2020-11-25 00:47:23,520 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:47:23,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10413 states to 10396 states and 11724 transitions.
[2020-11-25 00:47:23,540 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2092
[2020-11-25 00:47:23,541 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2092
[2020-11-25 00:47:23,541 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10396 states and 11724 transitions.
[2020-11-25 00:47:23,547 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:23,547 INFO  L728         BuchiCegarLoop]: Abstraction has 10396 states and 11724 transitions.
[2020-11-25 00:47:23,553 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10396 states and 11724 transitions.
[2020-11-25 00:47:23,604 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10396 to 10268.
[2020-11-25 00:47:23,604 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10268 states.
[2020-11-25 00:47:23,615 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10268 states to 10268 states and 11596 transitions.
[2020-11-25 00:47:23,615 INFO  L751         BuchiCegarLoop]: Abstraction has 10268 states and 11596 transitions.
[2020-11-25 00:47:23,615 INFO  L631         BuchiCegarLoop]: Abstraction has 10268 states and 11596 transitions.
[2020-11-25 00:47:23,615 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:47:23,615 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10268 states and 11596 transitions.
[2020-11-25 00:47:23,626 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:47:23,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:23,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:23,628 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:23,628 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:23,634 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:23,634 INFO  L82        PathProgramCache]: Analyzing trace with hash 315191984, now seen corresponding path program 1 times
[2020-11-25 00:47:23,635 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:23,667 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:23,941 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 00:47:23,941 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:23,941 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:47:23,941 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:23,942 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:47:23,942 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:47:23,942 INFO  L87              Difference]: Start difference. First operand 10268 states and 11596 transitions. cyclomatic complexity: 1344 Second operand 4 states.
[2020-11-25 00:47:24,344 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:24,345 INFO  L93              Difference]: Finished difference Result 13686 states and 15863 transitions.
[2020-11-25 00:47:24,345 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 00:47:24,345 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13686 states and 15863 transitions.
[2020-11-25 00:47:24,376 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 00:47:24,406 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13686 states to 12856 states and 14951 transitions.
[2020-11-25 00:47:24,406 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2627
[2020-11-25 00:47:24,407 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2646
[2020-11-25 00:47:24,407 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12856 states and 14951 transitions.
[2020-11-25 00:47:24,415 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:24,415 INFO  L728         BuchiCegarLoop]: Abstraction has 12856 states and 14951 transitions.
[2020-11-25 00:47:24,421 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12856 states and 14951 transitions.
[2020-11-25 00:47:24,494 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12856 to 11357.
[2020-11-25 00:47:24,494 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11357 states.
[2020-11-25 00:47:24,507 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11357 states to 11357 states and 12962 transitions.
[2020-11-25 00:47:24,508 INFO  L751         BuchiCegarLoop]: Abstraction has 11357 states and 12962 transitions.
[2020-11-25 00:47:24,508 INFO  L631         BuchiCegarLoop]: Abstraction has 11357 states and 12962 transitions.
[2020-11-25 00:47:24,508 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 00:47:24,508 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11357 states and 12962 transitions.
[2020-11-25 00:47:24,520 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:47:24,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:24,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:24,522 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:24,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:24,527 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:24,527 INFO  L82        PathProgramCache]: Analyzing trace with hash -1723930341, now seen corresponding path program 1 times
[2020-11-25 00:47:24,528 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:24,542 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:24,695 INFO  L134       CoverageAnalysis]: Checked inductivity of 916 backedges. 12 proven. 9 refuted. 0 times theorem prover too weak. 895 trivial. 0 not checked.
[2020-11-25 00:47:24,695 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:24,695 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:47:24,696 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:24,696 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:47:24,696 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:47:24,696 INFO  L87              Difference]: Start difference. First operand 11357 states and 12962 transitions. cyclomatic complexity: 1621 Second operand 8 states.
[2020-11-25 00:47:24,847 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:24,847 INFO  L93              Difference]: Finished difference Result 11384 states and 12993 transitions.
[2020-11-25 00:47:24,847 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:47:24,847 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11384 states and 12993 transitions.
[2020-11-25 00:47:24,869 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:47:24,890 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11384 states to 11363 states and 12968 transitions.
[2020-11-25 00:47:24,890 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2466
[2020-11-25 00:47:24,891 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2466
[2020-11-25 00:47:24,891 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11363 states and 12968 transitions.
[2020-11-25 00:47:24,896 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:24,896 INFO  L728         BuchiCegarLoop]: Abstraction has 11363 states and 12968 transitions.
[2020-11-25 00:47:24,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11363 states and 12968 transitions.
[2020-11-25 00:47:24,954 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11363 to 11357.
[2020-11-25 00:47:24,955 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11357 states.
[2020-11-25 00:47:24,967 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11357 states to 11357 states and 12962 transitions.
[2020-11-25 00:47:24,967 INFO  L751         BuchiCegarLoop]: Abstraction has 11357 states and 12962 transitions.
[2020-11-25 00:47:24,967 INFO  L631         BuchiCegarLoop]: Abstraction has 11357 states and 12962 transitions.
[2020-11-25 00:47:24,967 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 00:47:24,967 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11357 states and 12962 transitions.
[2020-11-25 00:47:24,979 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:47:24,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:24,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:24,981 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:24,981 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:24,985 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:24,986 INFO  L82        PathProgramCache]: Analyzing trace with hash -514503531, now seen corresponding path program 2 times
[2020-11-25 00:47:24,986 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:25,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:25,173 INFO  L134       CoverageAnalysis]: Checked inductivity of 917 backedges. 12 proven. 12 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 00:47:25,173 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:47:25,173 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:47:25,173 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:25,174 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:47:25,174 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:47:25,174 INFO  L87              Difference]: Start difference. First operand 11357 states and 12962 transitions. cyclomatic complexity: 1621 Second operand 8 states.
[2020-11-25 00:47:25,303 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:25,303 INFO  L93              Difference]: Finished difference Result 11378 states and 12986 transitions.
[2020-11-25 00:47:25,303 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:47:25,303 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11378 states and 12986 transitions.
[2020-11-25 00:47:25,321 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:47:25,341 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11378 states to 11357 states and 12961 transitions.
[2020-11-25 00:47:25,341 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2466
[2020-11-25 00:47:25,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2466
[2020-11-25 00:47:25,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11357 states and 12961 transitions.
[2020-11-25 00:47:25,348 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:25,348 INFO  L728         BuchiCegarLoop]: Abstraction has 11357 states and 12961 transitions.
[2020-11-25 00:47:25,354 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11357 states and 12961 transitions.
[2020-11-25 00:47:25,401 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11357 to 11351.
[2020-11-25 00:47:25,401 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11351 states.
[2020-11-25 00:47:25,414 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11351 states to 11351 states and 12955 transitions.
[2020-11-25 00:47:25,414 INFO  L751         BuchiCegarLoop]: Abstraction has 11351 states and 12955 transitions.
[2020-11-25 00:47:25,414 INFO  L631         BuchiCegarLoop]: Abstraction has 11351 states and 12955 transitions.
[2020-11-25 00:47:25,414 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 00:47:25,414 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11351 states and 12955 transitions.
[2020-11-25 00:47:25,425 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 00:47:25,425 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:25,425 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:25,427 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:25,427 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:25,432 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:25,432 INFO  L82        PathProgramCache]: Analyzing trace with hash -1067796303, now seen corresponding path program 1 times
[2020-11-25 00:47:25,433 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:25,451 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:25,636 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:47:25,636 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:25,636 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-25 00:47:25,637 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:25,637 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 00:47:25,637 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 00:47:25,637 INFO  L87              Difference]: Start difference. First operand 11351 states and 12955 transitions. cyclomatic complexity: 1620 Second operand 12 states.
[2020-11-25 00:47:31,524 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:31,524 INFO  L93              Difference]: Finished difference Result 16543 states and 18939 transitions.
[2020-11-25 00:47:31,524 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 00:47:31,524 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16543 states and 18939 transitions.
[2020-11-25 00:47:31,558 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 00:47:31,592 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16543 states to 16543 states and 18939 transitions.
[2020-11-25 00:47:31,592 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3458
[2020-11-25 00:47:31,593 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3458
[2020-11-25 00:47:31,593 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16543 states and 18939 transitions.
[2020-11-25 00:47:31,602 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:31,602 INFO  L728         BuchiCegarLoop]: Abstraction has 16543 states and 18939 transitions.
[2020-11-25 00:47:31,609 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16543 states and 18939 transitions.
[2020-11-25 00:47:31,685 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16543 to 14479.
[2020-11-25 00:47:31,685 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14479 states.
[2020-11-25 00:47:31,704 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14479 states to 14479 states and 16875 transitions.
[2020-11-25 00:47:31,704 INFO  L751         BuchiCegarLoop]: Abstraction has 14479 states and 16875 transitions.
[2020-11-25 00:47:31,704 INFO  L631         BuchiCegarLoop]: Abstraction has 14479 states and 16875 transitions.
[2020-11-25 00:47:31,704 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 00:47:31,704 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14479 states and 16875 transitions.
[2020-11-25 00:47:31,719 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 00:47:31,719 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:31,719 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:31,720 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:31,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10743]              revert := true;
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10743]              revert := true;
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:31,725 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:31,725 INFO  L82        PathProgramCache]: Analyzing trace with hash -855448240, now seen corresponding path program 1 times
[2020-11-25 00:47:31,726 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:31,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:31,996 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 924 trivial. 0 not checked.
[2020-11-25 00:47:31,997 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:31,997 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 00:47:31,997 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:31,997 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 00:47:31,997 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=183, Unknown=0, NotChecked=0, Total=210
[2020-11-25 00:47:31,997 INFO  L87              Difference]: Start difference. First operand 14479 states and 16875 transitions. cyclomatic complexity: 2420 Second operand 15 states.
[2020-11-25 00:47:39,482 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:39,482 INFO  L93              Difference]: Finished difference Result 22126 states and 26459 transitions.
[2020-11-25 00:47:39,482 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 00:47:39,482 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22126 states and 26459 transitions.
[2020-11-25 00:47:39,534 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 00:47:39,594 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22126 states to 22119 states and 26451 transitions.
[2020-11-25 00:47:39,594 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4529
[2020-11-25 00:47:39,597 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4529
[2020-11-25 00:47:39,597 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22119 states and 26451 transitions.
[2020-11-25 00:47:39,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:39,611 INFO  L728         BuchiCegarLoop]: Abstraction has 22119 states and 26451 transitions.
[2020-11-25 00:47:39,622 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22119 states and 26451 transitions.
[2020-11-25 00:47:39,750 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22119 to 20527.
[2020-11-25 00:47:39,750 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20527 states.
[2020-11-25 00:47:39,785 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20527 states to 20527 states and 24749 transitions.
[2020-11-25 00:47:39,785 INFO  L751         BuchiCegarLoop]: Abstraction has 20527 states and 24749 transitions.
[2020-11-25 00:47:39,785 INFO  L631         BuchiCegarLoop]: Abstraction has 20527 states and 24749 transitions.
[2020-11-25 00:47:39,785 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 00:47:39,785 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20527 states and 24749 transitions.
[2020-11-25 00:47:39,809 INFO  L131   ngComponentsAnalysis]: Automaton has 8 accepting balls. 76
[2020-11-25 00:47:39,809 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:39,809 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:39,811 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:39,811 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7538]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8200]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8211]               idx_s1645 := 0;
[L8212]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8214]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8225]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8226]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8011]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8022]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8023]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8024]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8035]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8046]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8057]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L8057]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8058]   COND TRUE   revert
[L8226]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8227]   COND TRUE   revert
[L7538]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7539]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7538]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8200]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8211]               idx_s1645 := 0;
[L8212]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8214]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8225]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8226]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8011]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8022]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8023]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8024]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8035]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8046]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8057]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L8057]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8058]   COND TRUE   revert
[L8226]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8227]   COND TRUE   revert
[L7538]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7539]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:39,816 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:39,816 INFO  L82        PathProgramCache]: Analyzing trace with hash 341726738, now seen corresponding path program 1 times
[2020-11-25 00:47:39,817 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:39,836 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:40,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:47:40,107 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:40,107 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-25 00:47:40,107 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:40,107 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 00:47:40,108 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=300, Unknown=0, NotChecked=0, Total=342
[2020-11-25 00:47:40,108 INFO  L87              Difference]: Start difference. First operand 20527 states and 24749 transitions. cyclomatic complexity: 4262 Second operand 19 states.
[2020-11-25 00:47:47,197 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:47,197 INFO  L93              Difference]: Finished difference Result 24013 states and 30395 transitions.
[2020-11-25 00:47:47,197 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:47:47,197 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 24013 states and 30395 transitions.
[2020-11-25 00:47:47,269 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:47,355 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 24013 states to 24013 states and 30395 transitions.
[2020-11-25 00:47:47,355 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5125
[2020-11-25 00:47:47,360 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5132
[2020-11-25 00:47:47,360 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24013 states and 30395 transitions.
[2020-11-25 00:47:47,382 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:47,382 INFO  L728         BuchiCegarLoop]: Abstraction has 24013 states and 30395 transitions.
[2020-11-25 00:47:47,391 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24013 states and 30395 transitions.
[2020-11-25 00:47:47,573 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24013 to 22581.
[2020-11-25 00:47:47,574 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22581 states.
[2020-11-25 00:47:47,614 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22581 states to 22581 states and 27767 transitions.
[2020-11-25 00:47:47,614 INFO  L751         BuchiCegarLoop]: Abstraction has 22581 states and 27767 transitions.
[2020-11-25 00:47:47,614 INFO  L631         BuchiCegarLoop]: Abstraction has 22581 states and 27767 transitions.
[2020-11-25 00:47:47,614 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 00:47:47,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22581 states and 27767 transitions.
[2020-11-25 00:47:47,641 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:47,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:47,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:47,643 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:47,643 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7538]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8200]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8211]               idx_s1645 := 0;
[L8212]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8214]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8225]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8226]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8011]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8022]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8023]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8024]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8035]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8046]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8057]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L8057]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8058]   COND TRUE   revert
[L8226]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8227]   COND TRUE   revert
[L7538]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7539]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:47,647 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:47,647 INFO  L82        PathProgramCache]: Analyzing trace with hash -120736172, now seen corresponding path program 1 times
[2020-11-25 00:47:47,648 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:47,666 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:47,864 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 918 trivial. 0 not checked.
[2020-11-25 00:47:47,864 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:47,864 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:47:47,865 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:47,865 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:47:47,865 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:47:47,865 INFO  L87              Difference]: Start difference. First operand 22581 states and 27767 transitions. cyclomatic complexity: 5260 Second operand 3 states.
[2020-11-25 00:47:47,999 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:48,000 INFO  L93              Difference]: Finished difference Result 22561 states and 27727 transitions.
[2020-11-25 00:47:48,000 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:47:48,000 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22561 states and 27727 transitions.
[2020-11-25 00:47:48,059 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:48,129 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22561 states to 22561 states and 27727 transitions.
[2020-11-25 00:47:48,130 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5094
[2020-11-25 00:47:48,133 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5094
[2020-11-25 00:47:48,133 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22561 states and 27727 transitions.
[2020-11-25 00:47:48,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:48,152 INFO  L728         BuchiCegarLoop]: Abstraction has 22561 states and 27727 transitions.
[2020-11-25 00:47:48,161 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22561 states and 27727 transitions.
[2020-11-25 00:47:48,319 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22561 to 22391.
[2020-11-25 00:47:48,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22391 states.
[2020-11-25 00:47:48,360 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22391 states to 22391 states and 27529 transitions.
[2020-11-25 00:47:48,360 INFO  L751         BuchiCegarLoop]: Abstraction has 22391 states and 27529 transitions.
[2020-11-25 00:47:48,360 INFO  L631         BuchiCegarLoop]: Abstraction has 22391 states and 27529 transitions.
[2020-11-25 00:47:48,360 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 00:47:48,360 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22391 states and 27529 transitions.
[2020-11-25 00:47:48,386 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:48,386 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:48,386 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:48,388 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:48,388 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND FALSE  !(__tmp__DType[this] == BLY)
[L7059]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7060]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND TRUE   !(to_s904 != null)
[L6769]               revert := true;
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7060]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7061]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:48,393 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:48,393 INFO  L82        PathProgramCache]: Analyzing trace with hash -660902249, now seen corresponding path program 1 times
[2020-11-25 00:47:48,394 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:48,412 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:48,581 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:47:48,581 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:48,581 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 00:47:48,582 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:48,582 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:47:48,582 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:47:48,582 INFO  L87              Difference]: Start difference. First operand 22391 states and 27529 transitions. cyclomatic complexity: 5212 Second operand 9 states.
[2020-11-25 00:47:48,728 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:48,728 INFO  L93              Difference]: Finished difference Result 22879 states and 28163 transitions.
[2020-11-25 00:47:48,728 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:47:48,728 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22879 states and 28163 transitions.
[2020-11-25 00:47:48,788 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:48,861 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22879 states to 22863 states and 28147 transitions.
[2020-11-25 00:47:48,861 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5279
[2020-11-25 00:47:48,864 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5279
[2020-11-25 00:47:48,864 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22863 states and 28147 transitions.
[2020-11-25 00:47:48,882 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:48,882 INFO  L728         BuchiCegarLoop]: Abstraction has 22863 states and 28147 transitions.
[2020-11-25 00:47:48,891 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22863 states and 28147 transitions.
[2020-11-25 00:47:49,063 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22863 to 22738.
[2020-11-25 00:47:49,064 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22738 states.
[2020-11-25 00:47:49,105 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22738 states to 22738 states and 27982 transitions.
[2020-11-25 00:47:49,105 INFO  L751         BuchiCegarLoop]: Abstraction has 22738 states and 27982 transitions.
[2020-11-25 00:47:49,105 INFO  L631         BuchiCegarLoop]: Abstraction has 22738 states and 27982 transitions.
[2020-11-25 00:47:49,106 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 00:47:49,106 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22738 states and 27982 transitions.
[2020-11-25 00:47:49,134 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:49,134 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:49,134 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:49,136 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:49,136 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:49,140 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:49,141 INFO  L82        PathProgramCache]: Analyzing trace with hash 1641789720, now seen corresponding path program 1 times
[2020-11-25 00:47:49,141 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:49,159 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:49,366 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 00:47:49,366 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:49,366 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 00:47:49,366 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:49,367 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:47:49,367 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:47:49,367 INFO  L87              Difference]: Start difference. First operand 22738 states and 27982 transitions. cyclomatic complexity: 5318 Second operand 9 states.
[2020-11-25 00:47:49,551 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:49,551 INFO  L93              Difference]: Finished difference Result 22769 states and 28015 transitions.
[2020-11-25 00:47:49,551 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:47:49,551 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22769 states and 28015 transitions.
[2020-11-25 00:47:49,611 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:49,683 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22769 states to 22734 states and 27976 transitions.
[2020-11-25 00:47:49,683 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5279
[2020-11-25 00:47:49,686 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5279
[2020-11-25 00:47:49,686 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22734 states and 27976 transitions.
[2020-11-25 00:47:49,705 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:49,705 INFO  L728         BuchiCegarLoop]: Abstraction has 22734 states and 27976 transitions.
[2020-11-25 00:47:49,714 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22734 states and 27976 transitions.
[2020-11-25 00:47:49,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22734 to 22734.
[2020-11-25 00:47:49,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22734 states.
[2020-11-25 00:47:49,919 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22734 states to 22734 states and 27976 transitions.
[2020-11-25 00:47:49,919 INFO  L751         BuchiCegarLoop]: Abstraction has 22734 states and 27976 transitions.
[2020-11-25 00:47:49,919 INFO  L631         BuchiCegarLoop]: Abstraction has 22734 states and 27976 transitions.
[2020-11-25 00:47:49,919 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 00:47:49,919 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22734 states and 27976 transitions.
[2020-11-25 00:47:49,946 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:49,946 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:49,946 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:49,948 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:49,948 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND FALSE  !(__tmp__DType[this] == BLY)
[L7059]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7060]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7060]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7061]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND FALSE  !(__tmp__DType[this] == BLY)
[L7059]   COND TRUE   __tmp__DType[this] == ERC20Pausable
[L7060]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7060]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7061]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:49,953 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:49,953 INFO  L82        PathProgramCache]: Analyzing trace with hash 2006470248, now seen corresponding path program 1 times
[2020-11-25 00:47:49,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:49,971 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:50,130 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:47:50,130 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:50,130 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:47:50,131 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:50,131 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:47:50,131 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:47:50,131 INFO  L87              Difference]: Start difference. First operand 22734 states and 27976 transitions. cyclomatic complexity: 5316 Second operand 4 states.
[2020-11-25 00:47:50,236 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:50,236 INFO  L93              Difference]: Finished difference Result 22787 states and 28010 transitions.
[2020-11-25 00:47:50,236 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:47:50,236 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22787 states and 28010 transitions.
[2020-11-25 00:47:50,297 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:50,370 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22787 states to 22675 states and 27891 transitions.
[2020-11-25 00:47:50,370 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5257
[2020-11-25 00:47:50,373 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5257
[2020-11-25 00:47:50,373 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22675 states and 27891 transitions.
[2020-11-25 00:47:50,391 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:50,392 INFO  L728         BuchiCegarLoop]: Abstraction has 22675 states and 27891 transitions.
[2020-11-25 00:47:50,400 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22675 states and 27891 transitions.
[2020-11-25 00:47:50,553 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22675 to 22671.
[2020-11-25 00:47:50,553 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22671 states.
[2020-11-25 00:47:50,594 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22671 states to 22671 states and 27885 transitions.
[2020-11-25 00:47:50,594 INFO  L751         BuchiCegarLoop]: Abstraction has 22671 states and 27885 transitions.
[2020-11-25 00:47:50,594 INFO  L631         BuchiCegarLoop]: Abstraction has 22671 states and 27885 transitions.
[2020-11-25 00:47:50,594 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 00:47:50,594 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22671 states and 27885 transitions.
[2020-11-25 00:47:50,622 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:50,622 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:50,622 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:50,623 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:50,624 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:50,628 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:50,628 INFO  L82        PathProgramCache]: Analyzing trace with hash -483281577, now seen corresponding path program 1 times
[2020-11-25 00:47:50,629 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:50,647 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:50,845 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 00:47:50,846 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:50,846 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 00:47:50,846 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:50,846 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:47:50,846 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:47:50,846 INFO  L87              Difference]: Start difference. First operand 22671 states and 27885 transitions. cyclomatic complexity: 5288 Second operand 9 states.
[2020-11-25 00:47:51,030 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:51,030 INFO  L93              Difference]: Finished difference Result 22696 states and 27912 transitions.
[2020-11-25 00:47:51,030 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:47:51,030 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22696 states and 27912 transitions.
[2020-11-25 00:47:51,090 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:51,163 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22696 states to 22654 states and 27864 transitions.
[2020-11-25 00:47:51,163 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5255
[2020-11-25 00:47:51,166 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5255
[2020-11-25 00:47:51,166 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22654 states and 27864 transitions.
[2020-11-25 00:47:51,184 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:51,184 INFO  L728         BuchiCegarLoop]: Abstraction has 22654 states and 27864 transitions.
[2020-11-25 00:47:51,192 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22654 states and 27864 transitions.
[2020-11-25 00:47:51,347 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22654 to 22654.
[2020-11-25 00:47:51,347 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22654 states.
[2020-11-25 00:47:51,388 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22654 states to 22654 states and 27864 transitions.
[2020-11-25 00:47:51,388 INFO  L751         BuchiCegarLoop]: Abstraction has 22654 states and 27864 transitions.
[2020-11-25 00:47:51,388 INFO  L631         BuchiCegarLoop]: Abstraction has 22654 states and 27864 transitions.
[2020-11-25 00:47:51,388 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 00:47:51,388 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22654 states and 27864 transitions.
[2020-11-25 00:47:51,415 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:51,415 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:51,415 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:51,417 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:51,417 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:51,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:51,421 INFO  L82        PathProgramCache]: Analyzing trace with hash -1487563005, now seen corresponding path program 1 times
[2020-11-25 00:47:51,422 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:51,441 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:51,672 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:47:51,672 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:51,672 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 00:47:51,672 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:51,673 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 00:47:51,673 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 00:47:51,673 INFO  L87              Difference]: Start difference. First operand 22654 states and 27864 transitions. cyclomatic complexity: 5284 Second operand 10 states.
[2020-11-25 00:47:54,842 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:47:54,842 INFO  L93              Difference]: Finished difference Result 23125 states and 28567 transitions.
[2020-11-25 00:47:54,842 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 00:47:54,842 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23125 states and 28567 transitions.
[2020-11-25 00:47:54,901 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:54,973 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23125 states to 23125 states and 28567 transitions.
[2020-11-25 00:47:54,973 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5423
[2020-11-25 00:47:54,976 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5423
[2020-11-25 00:47:54,976 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23125 states and 28567 transitions.
[2020-11-25 00:47:54,994 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:47:54,994 INFO  L728         BuchiCegarLoop]: Abstraction has 23125 states and 28567 transitions.
[2020-11-25 00:47:55,002 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23125 states and 28567 transitions.
[2020-11-25 00:47:55,154 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23125 to 22848.
[2020-11-25 00:47:55,154 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22848 states.
[2020-11-25 00:47:55,195 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22848 states to 22848 states and 28172 transitions.
[2020-11-25 00:47:55,195 INFO  L751         BuchiCegarLoop]: Abstraction has 22848 states and 28172 transitions.
[2020-11-25 00:47:55,195 INFO  L631         BuchiCegarLoop]: Abstraction has 22848 states and 28172 transitions.
[2020-11-25 00:47:55,195 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 00:47:55,195 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22848 states and 28172 transitions.
[2020-11-25 00:47:55,221 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 112
[2020-11-25 00:47:55,221 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:47:55,221 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:47:55,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:47:55,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND FALSE  !(!(b_s82 <= a_s82))
[L5620]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5621]               __ret_0_ := c_s82;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND FALSE  !(revert)
[L6776]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][from_s904];
[L6777]               __tmp___balances_HxERC20[this][from_s904] := __var_21;
[L6778]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][from_s904];
[L6779]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND TRUE   !(c_s106 >= a_s106)
[L5642]               revert := true;
[L6779]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L6780]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:47:55,227 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:47:55,228 INFO  L82        PathProgramCache]: Analyzing trace with hash 816273758, now seen corresponding path program 1 times
[2020-11-25 00:47:55,228 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:47:55,263 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:47:56,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 14 proven. 0 refuted. 0 times theorem prover too weak. 916 trivial. 0 not checked.
[2020-11-25 00:47:56,060 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:47:56,061 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [30] imperfect sequences [] total 30
[2020-11-25 00:47:56,061 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:47:56,061 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 00:47:56,061 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=864, Unknown=0, NotChecked=0, Total=930
[2020-11-25 00:47:56,062 INFO  L87              Difference]: Start difference. First operand 22848 states and 28172 transitions. cyclomatic complexity: 5404 Second operand 31 states.
[2020-11-25 00:48:23,542 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:48:23,542 INFO  L93              Difference]: Finished difference Result 23743 states and 30698 transitions.
[2020-11-25 00:48:23,542 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 00:48:23,542 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23743 states and 30698 transitions.
[2020-11-25 00:48:23,618 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 168
[2020-11-25 00:48:23,711 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23743 states to 23743 states and 30698 transitions.
[2020-11-25 00:48:23,711 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5515
[2020-11-25 00:48:23,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5515
[2020-11-25 00:48:23,714 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23743 states and 30698 transitions.
[2020-11-25 00:48:23,737 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:48:23,737 INFO  L728         BuchiCegarLoop]: Abstraction has 23743 states and 30698 transitions.
[2020-11-25 00:48:23,746 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23743 states and 30698 transitions.
[2020-11-25 00:48:23,979 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23743 to 22504.
[2020-11-25 00:48:23,979 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22504 states.
[2020-11-25 00:48:24,023 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22504 states to 22504 states and 28341 transitions.
[2020-11-25 00:48:24,024 INFO  L751         BuchiCegarLoop]: Abstraction has 22504 states and 28341 transitions.
[2020-11-25 00:48:24,024 INFO  L631         BuchiCegarLoop]: Abstraction has 22504 states and 28341 transitions.
[2020-11-25 00:48:24,024 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 00:48:24,024 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22504 states and 28341 transitions.
[2020-11-25 00:48:24,051 INFO  L131   ngComponentsAnalysis]: Automaton has 18 accepting balls. 132
[2020-11-25 00:48:24,051 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:48:24,051 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:48:24,052 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:48:24,053 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND FALSE  !(!(b_s82 <= a_s82))
[L5620]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5621]               __ret_0_ := c_s82;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND FALSE  !(revert)
[L6776]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][from_s904];
[L6777]               __tmp___balances_HxERC20[this][from_s904] := __var_21;
[L6778]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][from_s904];
[L6779]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6779]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L6780]   COND FALSE  !(revert)
[L6783]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][to_s904];
[L6784]               __tmp___balances_HxERC20[this][to_s904] := __var_22;
[L6785]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][to_s904];
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND FALSE  !(revert)
[L6556]               __ret_0_ := true;
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND FALSE  !(revert)
[L7067]               __ret_0_ := __var_30;
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND FALSE  !(revert)
[L7551]               __ret_0_ := __var_43;
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND FALSE  !(!(b_s82 <= a_s82))
[L5620]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5621]               __ret_0_ := c_s82;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND FALSE  !(revert)
[L6776]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][from_s904];
[L6777]               __tmp___balances_HxERC20[this][from_s904] := __var_21;
[L6778]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][from_s904];
[L6779]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6779]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L6780]   COND FALSE  !(revert)
[L6783]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][to_s904];
[L6784]               __tmp___balances_HxERC20[this][to_s904] := __var_22;
[L6785]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][to_s904];
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND FALSE  !(revert)
[L6556]               __ret_0_ := true;
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND FALSE  !(revert)
[L7067]               __ret_0_ := __var_30;
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND FALSE  !(revert)
[L7551]               __ret_0_ := __var_43;
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:48:24,057 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:48:24,058 INFO  L82        PathProgramCache]: Analyzing trace with hash -1028187742, now seen corresponding path program 1 times
[2020-11-25 00:48:24,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:48:24,076 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:48:24,276 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:48:24,277 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:48:24,277 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 00:48:24,277 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:48:24,277 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 00:48:24,277 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 00:48:24,277 INFO  L87              Difference]: Start difference. First operand 22504 states and 28341 transitions. cyclomatic complexity: 5935 Second operand 5 states.
[2020-11-25 00:48:25,589 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:48:25,589 INFO  L93              Difference]: Finished difference Result 26506 states and 34743 transitions.
[2020-11-25 00:48:25,589 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:48:25,589 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26506 states and 34743 transitions.
[2020-11-25 00:48:25,687 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 208
[2020-11-25 00:48:25,808 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26506 states to 24924 states and 32996 transitions.
[2020-11-25 00:48:25,808 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4642
[2020-11-25 00:48:25,811 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4642
[2020-11-25 00:48:25,811 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 24924 states and 32996 transitions.
[2020-11-25 00:48:25,838 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:48:25,839 INFO  L728         BuchiCegarLoop]: Abstraction has 24924 states and 32996 transitions.
[2020-11-25 00:48:25,847 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 24924 states and 32996 transitions.
[2020-11-25 00:48:26,134 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 24924 to 20391.
[2020-11-25 00:48:26,134 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20391 states.
[2020-11-25 00:48:26,167 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20391 states to 20391 states and 25030 transitions.
[2020-11-25 00:48:26,167 INFO  L751         BuchiCegarLoop]: Abstraction has 20391 states and 25030 transitions.
[2020-11-25 00:48:26,168 INFO  L631         BuchiCegarLoop]: Abstraction has 20391 states and 25030 transitions.
[2020-11-25 00:48:26,168 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 00:48:26,168 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20391 states and 25030 transitions.
[2020-11-25 00:48:26,189 INFO  L131   ngComponentsAnalysis]: Automaton has 17 accepting balls. 70
[2020-11-25 00:48:26,189 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:48:26,189 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:48:26,191 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:48:26,191 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:48:26,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:48:26,196 INFO  L82        PathProgramCache]: Analyzing trace with hash -1982717969, now seen corresponding path program 1 times
[2020-11-25 00:48:26,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:48:26,214 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:48:26,442 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:48:26,443 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:48:26,443 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 00:48:26,443 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:48:26,443 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 00:48:26,443 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 00:48:26,443 INFO  L87              Difference]: Start difference. First operand 20391 states and 25030 transitions. cyclomatic complexity: 4728 Second operand 14 states.
[2020-11-25 00:48:31,167 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:48:31,167 INFO  L93              Difference]: Finished difference Result 21659 states and 26590 transitions.
[2020-11-25 00:48:31,167 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 00:48:31,167 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21659 states and 26590 transitions.
[2020-11-25 00:48:31,221 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:48:31,285 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21659 states to 21659 states and 26590 transitions.
[2020-11-25 00:48:31,285 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4213
[2020-11-25 00:48:31,287 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4213
[2020-11-25 00:48:31,287 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21659 states and 26590 transitions.
[2020-11-25 00:48:31,303 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:48:31,303 INFO  L728         BuchiCegarLoop]: Abstraction has 21659 states and 26590 transitions.
[2020-11-25 00:48:31,311 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21659 states and 26590 transitions.
[2020-11-25 00:48:31,445 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21659 to 20253.
[2020-11-25 00:48:31,445 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20253 states.
[2020-11-25 00:48:31,477 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20253 states to 20253 states and 24770 transitions.
[2020-11-25 00:48:31,478 INFO  L751         BuchiCegarLoop]: Abstraction has 20253 states and 24770 transitions.
[2020-11-25 00:48:31,478 INFO  L631         BuchiCegarLoop]: Abstraction has 20253 states and 24770 transitions.
[2020-11-25 00:48:31,478 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 00:48:31,478 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20253 states and 24770 transitions.
[2020-11-25 00:48:31,499 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:48:31,499 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:48:31,499 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:48:31,500 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:48:31,500 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:48:31,505 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:48:31,505 INFO  L82        PathProgramCache]: Analyzing trace with hash -1849598692, now seen corresponding path program 1 times
[2020-11-25 00:48:31,506 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:48:31,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:48:31,680 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:48:31,680 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:48:31,680 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 00:48:31,681 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:48:31,681 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:48:31,681 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:48:31,681 INFO  L87              Difference]: Start difference. First operand 20253 states and 24770 transitions. cyclomatic complexity: 4602 Second operand 7 states.
[2020-11-25 00:48:31,842 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:48:31,842 INFO  L93              Difference]: Finished difference Result 20619 states and 25150 transitions.
[2020-11-25 00:48:31,842 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:48:31,842 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20619 states and 25150 transitions.
[2020-11-25 00:48:31,889 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:48:31,945 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20619 states to 20203 states and 24700 transitions.
[2020-11-25 00:48:31,945 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3815
[2020-11-25 00:48:31,947 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3815
[2020-11-25 00:48:31,947 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20203 states and 24700 transitions.
[2020-11-25 00:48:31,964 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:48:31,964 INFO  L728         BuchiCegarLoop]: Abstraction has 20203 states and 24700 transitions.
[2020-11-25 00:48:31,971 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20203 states and 24700 transitions.
[2020-11-25 00:48:32,128 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20203 to 20203.
[2020-11-25 00:48:32,128 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20203 states.
[2020-11-25 00:48:32,160 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20203 states to 20203 states and 24700 transitions.
[2020-11-25 00:48:32,161 INFO  L751         BuchiCegarLoop]: Abstraction has 20203 states and 24700 transitions.
[2020-11-25 00:48:32,161 INFO  L631         BuchiCegarLoop]: Abstraction has 20203 states and 24700 transitions.
[2020-11-25 00:48:32,161 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 00:48:32,161 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20203 states and 24700 transitions.
[2020-11-25 00:48:32,182 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:48:32,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:48:32,182 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:48:32,183 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:48:32,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:48:32,190 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:48:32,190 INFO  L82        PathProgramCache]: Analyzing trace with hash 1241972386, now seen corresponding path program 1 times
[2020-11-25 00:48:32,191 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:48:32,229 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:48:33,284 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 10 proven. 4 refuted. 0 times theorem prover too weak. 916 trivial. 0 not checked.
[2020-11-25 00:48:33,284 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:48:33,284 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 00:48:33,284 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:48:33,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 00:48:33,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=116, Invalid=1444, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 00:48:33,285 INFO  L87              Difference]: Start difference. First operand 20203 states and 24700 transitions. cyclomatic complexity: 4582 Second operand 40 states.
[2020-11-25 00:48:59,091 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:48:59,091 INFO  L93              Difference]: Finished difference Result 20845 states and 25651 transitions.
[2020-11-25 00:48:59,091 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 00:48:59,091 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20845 states and 25651 transitions.
[2020-11-25 00:48:59,142 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:48:59,200 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20845 states to 20845 states and 25651 transitions.
[2020-11-25 00:48:59,201 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3945
[2020-11-25 00:48:59,202 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3945
[2020-11-25 00:48:59,202 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20845 states and 25651 transitions.
[2020-11-25 00:48:59,217 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:48:59,218 INFO  L728         BuchiCegarLoop]: Abstraction has 20845 states and 25651 transitions.
[2020-11-25 00:48:59,224 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20845 states and 25651 transitions.
[2020-11-25 00:48:59,352 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20845 to 20728.
[2020-11-25 00:48:59,352 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20728 states.
[2020-11-25 00:48:59,385 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20728 states to 20728 states and 25475 transitions.
[2020-11-25 00:48:59,385 INFO  L751         BuchiCegarLoop]: Abstraction has 20728 states and 25475 transitions.
[2020-11-25 00:48:59,385 INFO  L631         BuchiCegarLoop]: Abstraction has 20728 states and 25475 transitions.
[2020-11-25 00:48:59,385 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 00:48:59,386 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20728 states and 25475 transitions.
[2020-11-25 00:48:59,407 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:48:59,407 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:48:59,407 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:48:59,409 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:48:59,409 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:48:59,414 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:48:59,414 INFO  L82        PathProgramCache]: Analyzing trace with hash 781097215, now seen corresponding path program 1 times
[2020-11-25 00:48:59,415 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:48:59,438 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:48:59,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 1029 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1029 trivial. 0 not checked.
[2020-11-25 00:48:59,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:48:59,709 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:48:59,710 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:48:59,710 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:48:59,710 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:48:59,710 INFO  L87              Difference]: Start difference. First operand 20728 states and 25475 transitions. cyclomatic complexity: 4847 Second operand 3 states.
[2020-11-25 00:48:59,823 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:48:59,823 INFO  L93              Difference]: Finished difference Result 20664 states and 25340 transitions.
[2020-11-25 00:48:59,823 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:48:59,823 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20664 states and 25340 transitions.
[2020-11-25 00:48:59,875 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:48:59,942 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20664 states to 20664 states and 25340 transitions.
[2020-11-25 00:48:59,942 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3914
[2020-11-25 00:48:59,944 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3914
[2020-11-25 00:48:59,944 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20664 states and 25340 transitions.
[2020-11-25 00:48:59,959 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:48:59,959 INFO  L728         BuchiCegarLoop]: Abstraction has 20664 states and 25340 transitions.
[2020-11-25 00:48:59,966 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20664 states and 25340 transitions.
[2020-11-25 00:49:00,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20664 to 20632.
[2020-11-25 00:49:00,114 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20632 states.
[2020-11-25 00:49:00,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20632 states to 20632 states and 25287 transitions.
[2020-11-25 00:49:00,148 INFO  L751         BuchiCegarLoop]: Abstraction has 20632 states and 25287 transitions.
[2020-11-25 00:49:00,148 INFO  L631         BuchiCegarLoop]: Abstraction has 20632 states and 25287 transitions.
[2020-11-25 00:49:00,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 00:49:00,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20632 states and 25287 transitions.
[2020-11-25 00:49:00,171 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:49:00,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:00,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:00,173 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:00,173 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:00,178 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:00,178 INFO  L82        PathProgramCache]: Analyzing trace with hash -1615834027, now seen corresponding path program 1 times
[2020-11-25 00:49:00,179 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:00,203 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:00,475 INFO  L134       CoverageAnalysis]: Checked inductivity of 1253 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1252 trivial. 0 not checked.
[2020-11-25 00:49:00,475 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:49:00,476 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:49:00,476 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:00,476 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:49:00,476 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:49:00,476 INFO  L87              Difference]: Start difference. First operand 20632 states and 25287 transitions. cyclomatic complexity: 4755 Second operand 4 states.
[2020-11-25 00:49:00,545 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:00,545 INFO  L93              Difference]: Finished difference Result 20647 states and 25312 transitions.
[2020-11-25 00:49:00,545 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:49:00,545 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20647 states and 25312 transitions.
[2020-11-25 00:49:00,592 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:49:00,650 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20647 states to 20647 states and 25312 transitions.
[2020-11-25 00:49:00,650 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3900
[2020-11-25 00:49:00,652 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3900
[2020-11-25 00:49:00,652 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20647 states and 25312 transitions.
[2020-11-25 00:49:00,668 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:00,668 INFO  L728         BuchiCegarLoop]: Abstraction has 20647 states and 25312 transitions.
[2020-11-25 00:49:00,675 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20647 states and 25312 transitions.
[2020-11-25 00:49:00,811 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20647 to 20632.
[2020-11-25 00:49:00,811 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20632 states.
[2020-11-25 00:49:00,844 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20632 states to 20632 states and 25272 transitions.
[2020-11-25 00:49:00,844 INFO  L751         BuchiCegarLoop]: Abstraction has 20632 states and 25272 transitions.
[2020-11-25 00:49:00,844 INFO  L631         BuchiCegarLoop]: Abstraction has 20632 states and 25272 transitions.
[2020-11-25 00:49:00,844 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 00:49:00,844 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20632 states and 25272 transitions.
[2020-11-25 00:49:00,866 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:49:00,867 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:00,867 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:00,868 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:00,868 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:00,873 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:00,873 INFO  L82        PathProgramCache]: Analyzing trace with hash -1835977242, now seen corresponding path program 1 times
[2020-11-25 00:49:00,874 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:00,897 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:01,220 INFO  L134       CoverageAnalysis]: Checked inductivity of 1253 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1253 trivial. 0 not checked.
[2020-11-25 00:49:01,221 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:49:01,221 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:49:01,221 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:01,221 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:49:01,221 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:49:01,221 INFO  L87              Difference]: Start difference. First operand 20632 states and 25272 transitions. cyclomatic complexity: 4740 Second operand 8 states.
[2020-11-25 00:49:01,382 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:01,382 INFO  L93              Difference]: Finished difference Result 21250 states and 25929 transitions.
[2020-11-25 00:49:01,382 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:49:01,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21250 states and 25929 transitions.
[2020-11-25 00:49:01,432 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:49:01,490 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21250 states to 20582 states and 25202 transitions.
[2020-11-25 00:49:01,490 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3890
[2020-11-25 00:49:01,491 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3890
[2020-11-25 00:49:01,492 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20582 states and 25202 transitions.
[2020-11-25 00:49:01,506 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:01,506 INFO  L728         BuchiCegarLoop]: Abstraction has 20582 states and 25202 transitions.
[2020-11-25 00:49:01,513 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20582 states and 25202 transitions.
[2020-11-25 00:49:01,644 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20582 to 20582.
[2020-11-25 00:49:01,644 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20582 states.
[2020-11-25 00:49:01,677 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20582 states to 20582 states and 25202 transitions.
[2020-11-25 00:49:01,678 INFO  L751         BuchiCegarLoop]: Abstraction has 20582 states and 25202 transitions.
[2020-11-25 00:49:01,678 INFO  L631         BuchiCegarLoop]: Abstraction has 20582 states and 25202 transitions.
[2020-11-25 00:49:01,678 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 00:49:01,678 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20582 states and 25202 transitions.
[2020-11-25 00:49:01,700 INFO  L131   ngComponentsAnalysis]: Automaton has 15 accepting balls. 64
[2020-11-25 00:49:01,700 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:01,700 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:01,701 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:01,701 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:01,706 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:01,706 INFO  L82        PathProgramCache]: Analyzing trace with hash -1852570855, now seen corresponding path program 1 times
[2020-11-25 00:49:01,707 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:01,728 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:02,358 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 00:49:02,358 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:49:02,358 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:49:02,358 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:02,358 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:49:02,359 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:49:02,359 INFO  L87              Difference]: Start difference. First operand 20582 states and 25202 transitions. cyclomatic complexity: 4720 Second operand 26 states.
[2020-11-25 00:49:15,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:15,242 INFO  L93              Difference]: Finished difference Result 22244 states and 27909 transitions.
[2020-11-25 00:49:15,242 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:49:15,242 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22244 states and 27909 transitions.
[2020-11-25 00:49:15,302 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:15,374 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22244 states to 22244 states and 27909 transitions.
[2020-11-25 00:49:15,374 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4453
[2020-11-25 00:49:15,376 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4453
[2020-11-25 00:49:15,376 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22244 states and 27909 transitions.
[2020-11-25 00:49:15,395 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:15,395 INFO  L728         BuchiCegarLoop]: Abstraction has 22244 states and 27909 transitions.
[2020-11-25 00:49:15,403 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22244 states and 27909 transitions.
[2020-11-25 00:49:15,562 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22244 to 21373.
[2020-11-25 00:49:15,562 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21373 states.
[2020-11-25 00:49:15,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21373 states to 21373 states and 26791 transitions.
[2020-11-25 00:49:15,601 INFO  L751         BuchiCegarLoop]: Abstraction has 21373 states and 26791 transitions.
[2020-11-25 00:49:15,601 INFO  L631         BuchiCegarLoop]: Abstraction has 21373 states and 26791 transitions.
[2020-11-25 00:49:15,601 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 00:49:15,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21373 states and 26791 transitions.
[2020-11-25 00:49:15,626 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:15,626 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:15,626 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:15,627 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:15,627 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:15,632 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:15,632 INFO  L82        PathProgramCache]: Analyzing trace with hash -1479200253, now seen corresponding path program 1 times
[2020-11-25 00:49:15,633 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:15,657 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:15,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 1 proven. 4 refuted. 0 times theorem prover too weak. 1069 trivial. 0 not checked.
[2020-11-25 00:49:15,926 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:49:15,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 00:49:15,926 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:15,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:49:15,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:49:15,927 INFO  L87              Difference]: Start difference. First operand 21373 states and 26791 transitions. cyclomatic complexity: 5543 Second operand 4 states.
[2020-11-25 00:49:16,079 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:16,079 INFO  L93              Difference]: Finished difference Result 21033 states and 26366 transitions.
[2020-11-25 00:49:16,079 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:49:16,079 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21033 states and 26366 transitions.
[2020-11-25 00:49:16,133 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:16,197 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21033 states to 20613 states and 25866 transitions.
[2020-11-25 00:49:16,197 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4147
[2020-11-25 00:49:16,199 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4147
[2020-11-25 00:49:16,199 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20613 states and 25866 transitions.
[2020-11-25 00:49:16,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:16,215 INFO  L728         BuchiCegarLoop]: Abstraction has 20613 states and 25866 transitions.
[2020-11-25 00:49:16,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20613 states and 25866 transitions.
[2020-11-25 00:49:16,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20613 to 20583.
[2020-11-25 00:49:16,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20583 states.
[2020-11-25 00:49:16,401 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20583 states to 20583 states and 25826 transitions.
[2020-11-25 00:49:16,401 INFO  L751         BuchiCegarLoop]: Abstraction has 20583 states and 25826 transitions.
[2020-11-25 00:49:16,401 INFO  L631         BuchiCegarLoop]: Abstraction has 20583 states and 25826 transitions.
[2020-11-25 00:49:16,401 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 00:49:16,401 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20583 states and 25826 transitions.
[2020-11-25 00:49:16,425 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:16,425 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:16,425 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:16,426 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:16,427 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8264]   CALL        call __var_68 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8264]   RET         call __var_68 := FreshRefGenerator__success();
[L8265]   COND FALSE  !(revert)
[L8268]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8269]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8270]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8271]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_68;
[L8272]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:16,431 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:16,432 INFO  L82        PathProgramCache]: Analyzing trace with hash -1343901436, now seen corresponding path program 1 times
[2020-11-25 00:49:16,433 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:16,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:16,736 INFO  L134       CoverageAnalysis]: Checked inductivity of 1253 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1252 trivial. 0 not checked.
[2020-11-25 00:49:16,736 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:49:16,736 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:49:16,736 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:16,736 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:49:16,736 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:49:16,736 INFO  L87              Difference]: Start difference. First operand 20583 states and 25826 transitions. cyclomatic complexity: 5368 Second operand 3 states.
[2020-11-25 00:49:16,837 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:16,837 INFO  L93              Difference]: Finished difference Result 20631 states and 25892 transitions.
[2020-11-25 00:49:16,837 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:49:16,837 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20631 states and 25892 transitions.
[2020-11-25 00:49:16,890 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:16,954 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20631 states to 20631 states and 25892 transitions.
[2020-11-25 00:49:16,954 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4147
[2020-11-25 00:49:16,956 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4147
[2020-11-25 00:49:16,956 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20631 states and 25892 transitions.
[2020-11-25 00:49:16,972 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:16,972 INFO  L728         BuchiCegarLoop]: Abstraction has 20631 states and 25892 transitions.
[2020-11-25 00:49:16,979 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20631 states and 25892 transitions.
[2020-11-25 00:49:17,122 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20631 to 20543.
[2020-11-25 00:49:17,122 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20543 states.
[2020-11-25 00:49:17,158 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20543 states to 20543 states and 25766 transitions.
[2020-11-25 00:49:17,158 INFO  L751         BuchiCegarLoop]: Abstraction has 20543 states and 25766 transitions.
[2020-11-25 00:49:17,158 INFO  L631         BuchiCegarLoop]: Abstraction has 20543 states and 25766 transitions.
[2020-11-25 00:49:17,159 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 00:49:17,159 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20543 states and 25766 transitions.
[2020-11-25 00:49:17,182 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:17,182 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:17,182 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:17,184 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:17,184 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND TRUE   choice == 16
[L12077]              gas := gas - 21000;
[L12078]  COND TRUE   gas >= 0
[L12079]              assume msgvalue_MSG == 0;
[L12080]  CALL        call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7455]   COND TRUE   DType[this] == BLY
[L7456]   CALL        call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6520]               __ret_0_ := _balances_HxERC20[this][owner_s640];
[L7456]   RET         call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7457]   COND FALSE  !(revert)
[L7463]               totalBalance_s1254 := totalBalance_s1254;
[L7464]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] == false
[L7465]   CALL        call __var_38 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7465]   RET         call __var_38 := FreshRefGenerator__success();
[L7466]   COND FALSE  !(revert)
[L7469]               assume Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7470]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] := true;
[L7471]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == zerointRefArr();
[L7472]               assume M_Ref_Ref[timelockList_BLY[this]][owner_s1254] == __var_38;
[L7473]               assume sum[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7475]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] > 0)
[L7512]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L12080]  RET         call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:17,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:17,189 INFO  L82        PathProgramCache]: Analyzing trace with hash -1060042412, now seen corresponding path program 1 times
[2020-11-25 00:49:17,190 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:17,215 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:17,545 INFO  L134       CoverageAnalysis]: Checked inductivity of 1253 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1253 trivial. 0 not checked.
[2020-11-25 00:49:17,545 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:49:17,545 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:49:17,546 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:17,546 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:49:17,546 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:49:17,546 INFO  L87              Difference]: Start difference. First operand 20543 states and 25766 transitions. cyclomatic complexity: 5348 Second operand 8 states.
[2020-11-25 00:49:17,710 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:17,711 INFO  L93              Difference]: Finished difference Result 21487 states and 26772 transitions.
[2020-11-25 00:49:17,711 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:49:17,711 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21487 states and 26772 transitions.
[2020-11-25 00:49:17,766 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:17,830 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21487 states to 20493 states and 25696 transitions.
[2020-11-25 00:49:17,830 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4137
[2020-11-25 00:49:17,832 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4137
[2020-11-25 00:49:17,832 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20493 states and 25696 transitions.
[2020-11-25 00:49:17,847 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:17,847 INFO  L728         BuchiCegarLoop]: Abstraction has 20493 states and 25696 transitions.
[2020-11-25 00:49:17,854 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20493 states and 25696 transitions.
[2020-11-25 00:49:17,995 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20493 to 20493.
[2020-11-25 00:49:17,995 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20493 states.
[2020-11-25 00:49:18,031 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20493 states to 20493 states and 25696 transitions.
[2020-11-25 00:49:18,031 INFO  L751         BuchiCegarLoop]: Abstraction has 20493 states and 25696 transitions.
[2020-11-25 00:49:18,031 INFO  L631         BuchiCegarLoop]: Abstraction has 20493 states and 25696 transitions.
[2020-11-25 00:49:18,031 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 00:49:18,031 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20493 states and 25696 transitions.
[2020-11-25 00:49:18,054 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:18,054 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:18,054 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:18,056 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:18,056 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:18,060 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:18,060 INFO  L82        PathProgramCache]: Analyzing trace with hash -1997146527, now seen corresponding path program 1 times
[2020-11-25 00:49:18,061 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:18,083 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:18,320 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1074 trivial. 0 not checked.
[2020-11-25 00:49:18,320 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:49:18,320 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 00:49:18,320 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:18,320 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 00:49:18,320 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 00:49:18,320 INFO  L87              Difference]: Start difference. First operand 20493 states and 25696 transitions. cyclomatic complexity: 5328 Second operand 6 states.
[2020-11-25 00:49:20,062 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:20,062 INFO  L93              Difference]: Finished difference Result 20882 states and 26032 transitions.
[2020-11-25 00:49:20,062 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:49:20,062 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20882 states and 26032 transitions.
[2020-11-25 00:49:20,118 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:20,182 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20882 states to 20882 states and 26032 transitions.
[2020-11-25 00:49:20,182 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4265
[2020-11-25 00:49:20,184 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4265
[2020-11-25 00:49:20,184 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20882 states and 26032 transitions.
[2020-11-25 00:49:20,200 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:20,201 INFO  L728         BuchiCegarLoop]: Abstraction has 20882 states and 26032 transitions.
[2020-11-25 00:49:20,208 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20882 states and 26032 transitions.
[2020-11-25 00:49:20,332 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20882 to 20143.
[2020-11-25 00:49:20,332 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20143 states.
[2020-11-25 00:49:20,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20143 states to 20143 states and 25107 transitions.
[2020-11-25 00:49:20,374 INFO  L751         BuchiCegarLoop]: Abstraction has 20143 states and 25107 transitions.
[2020-11-25 00:49:20,374 INFO  L631         BuchiCegarLoop]: Abstraction has 20143 states and 25107 transitions.
[2020-11-25 00:49:20,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 00:49:20,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20143 states and 25107 transitions.
[2020-11-25 00:49:20,397 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:20,397 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:20,397 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:20,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:20,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND TRUE   choice == 16
[L12077]              gas := gas - 21000;
[L12078]  COND TRUE   gas >= 0
[L12079]              assume msgvalue_MSG == 0;
[L12080]  CALL        call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7455]   COND TRUE   DType[this] == BLY
[L7456]   CALL        call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6520]               __ret_0_ := _balances_HxERC20[this][owner_s640];
[L7456]   RET         call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7457]   COND FALSE  !(revert)
[L7463]               totalBalance_s1254 := totalBalance_s1254;
[L7464]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] == false
[L7465]   CALL        call __var_38 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7465]   RET         call __var_38 := FreshRefGenerator__success();
[L7466]   COND FALSE  !(revert)
[L7469]               assume Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7470]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] := true;
[L7471]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == zerointRefArr();
[L7472]               assume M_Ref_Ref[timelockList_BLY[this]][owner_s1254] == __var_38;
[L7473]               assume sum[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7475]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] > 0)
[L7512]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L12080]  RET         call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:20,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:20,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -546499049, now seen corresponding path program 1 times
[2020-11-25 00:49:20,404 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:20,427 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:21,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 00:49:21,059 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:49:21,059 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:49:21,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:21,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:49:21,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:49:21,060 INFO  L87              Difference]: Start difference. First operand 20143 states and 25107 transitions. cyclomatic complexity: 5079 Second operand 26 states.
[2020-11-25 00:49:34,411 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:34,412 INFO  L93              Difference]: Finished difference Result 20916 states and 26467 transitions.
[2020-11-25 00:49:34,412 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:49:34,412 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20916 states and 26467 transitions.
[2020-11-25 00:49:34,470 INFO  L131   ngComponentsAnalysis]: Automaton has 27 accepting balls. 100
[2020-11-25 00:49:34,540 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20916 states to 20916 states and 26467 transitions.
[2020-11-25 00:49:34,540 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4313
[2020-11-25 00:49:34,542 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4353
[2020-11-25 00:49:34,542 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20916 states and 26467 transitions.
[2020-11-25 00:49:34,560 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:34,560 INFO  L728         BuchiCegarLoop]: Abstraction has 20916 states and 26467 transitions.
[2020-11-25 00:49:34,568 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20916 states and 26467 transitions.
[2020-11-25 00:49:34,699 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20916 to 20131.
[2020-11-25 00:49:34,699 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20131 states.
[2020-11-25 00:49:34,735 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20131 states to 20131 states and 25013 transitions.
[2020-11-25 00:49:34,735 INFO  L751         BuchiCegarLoop]: Abstraction has 20131 states and 25013 transitions.
[2020-11-25 00:49:34,735 INFO  L631         BuchiCegarLoop]: Abstraction has 20131 states and 25013 transitions.
[2020-11-25 00:49:34,735 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 00:49:34,735 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20131 states and 25013 transitions.
[2020-11-25 00:49:34,758 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:34,758 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:34,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:34,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:34,760 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7538]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8200]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8211]               idx_s1645 := 0;
[L8212]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8214]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8225]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8226]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8011]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8022]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8023]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8024]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8035]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8046]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8057]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L8057]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8058]   COND TRUE   revert
[L8226]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8227]   COND TRUE   revert
[L7538]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7539]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND FALSE  !(__tmp__DType[this] == BLY)
[L6543]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L6548]   COND TRUE   __tmp__DType[this] == HxERC20
[L6549]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND FALSE  !(!(b_s82 <= a_s82))
[L5620]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5621]               __ret_0_ := c_s82;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND FALSE  !(revert)
[L6776]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][from_s904];
[L6777]               __tmp___balances_HxERC20[this][from_s904] := __var_21;
[L6778]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][from_s904];
[L6779]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND TRUE   !(c_s106 >= a_s106)
[L5642]               revert := true;
[L6779]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L6780]   COND TRUE   revert
[L6549]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6550]   COND TRUE   revert
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:34,765 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:34,765 INFO  L82        PathProgramCache]: Analyzing trace with hash 1485562484, now seen corresponding path program 1 times
[2020-11-25 00:49:34,766 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:34,787 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:35,074 INFO  L134       CoverageAnalysis]: Checked inductivity of 1078 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1077 trivial. 0 not checked.
[2020-11-25 00:49:35,074 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:49:35,075 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 00:49:35,075 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:35,076 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:49:35,076 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:49:35,076 INFO  L87              Difference]: Start difference. First operand 20131 states and 25013 transitions. cyclomatic complexity: 4997 Second operand 8 states.
[2020-11-25 00:49:35,260 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:35,260 INFO  L93              Difference]: Finished difference Result 20493 states and 25375 transitions.
[2020-11-25 00:49:35,260 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:49:35,260 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20493 states and 25375 transitions.
[2020-11-25 00:49:35,312 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:35,375 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20493 states to 20081 states and 24943 transitions.
[2020-11-25 00:49:35,375 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4033
[2020-11-25 00:49:35,377 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4033
[2020-11-25 00:49:35,378 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20081 states and 24943 transitions.
[2020-11-25 00:49:35,394 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:35,394 INFO  L728         BuchiCegarLoop]: Abstraction has 20081 states and 24943 transitions.
[2020-11-25 00:49:35,401 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20081 states and 24943 transitions.
[2020-11-25 00:49:35,521 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20081 to 20081.
[2020-11-25 00:49:35,521 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20081 states.
[2020-11-25 00:49:35,557 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20081 states to 20081 states and 24943 transitions.
[2020-11-25 00:49:35,557 INFO  L751         BuchiCegarLoop]: Abstraction has 20081 states and 24943 transitions.
[2020-11-25 00:49:35,557 INFO  L631         BuchiCegarLoop]: Abstraction has 20081 states and 24943 transitions.
[2020-11-25 00:49:35,557 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 00:49:35,557 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20081 states and 24943 transitions.
[2020-11-25 00:49:35,580 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:35,580 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:35,580 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:35,582 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:35,582 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:35,587 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:35,587 INFO  L82        PathProgramCache]: Analyzing trace with hash 55791090, now seen corresponding path program 1 times
[2020-11-25 00:49:35,588 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:35,609 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:35,954 INFO  L134       CoverageAnalysis]: Checked inductivity of 1068 backedges. 1 proven. 96 refuted. 0 times theorem prover too weak. 971 trivial. 0 not checked.
[2020-11-25 00:49:35,954 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:49:35,954 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 00:49:35,954 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:35,954 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 00:49:35,955 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 00:49:35,955 INFO  L87              Difference]: Start difference. First operand 20081 states and 24943 transitions. cyclomatic complexity: 4977 Second operand 15 states.
[2020-11-25 00:49:40,938 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:49:40,938 INFO  L93              Difference]: Finished difference Result 20864 states and 26012 transitions.
[2020-11-25 00:49:40,939 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 00:49:40,939 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20864 states and 26012 transitions.
[2020-11-25 00:49:41,002 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:41,069 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20864 states to 20864 states and 26012 transitions.
[2020-11-25 00:49:41,069 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4363
[2020-11-25 00:49:41,071 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4363
[2020-11-25 00:49:41,071 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20864 states and 26012 transitions.
[2020-11-25 00:49:41,088 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:49:41,088 INFO  L728         BuchiCegarLoop]: Abstraction has 20864 states and 26012 transitions.
[2020-11-25 00:49:41,095 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20864 states and 26012 transitions.
[2020-11-25 00:49:41,221 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20864 to 20087.
[2020-11-25 00:49:41,221 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20087 states.
[2020-11-25 00:49:41,257 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20087 states to 20087 states and 24967 transitions.
[2020-11-25 00:49:41,257 INFO  L751         BuchiCegarLoop]: Abstraction has 20087 states and 24967 transitions.
[2020-11-25 00:49:41,257 INFO  L631         BuchiCegarLoop]: Abstraction has 20087 states and 24967 transitions.
[2020-11-25 00:49:41,257 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 00:49:41,257 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20087 states and 24967 transitions.
[2020-11-25 00:49:41,281 INFO  L131   ngComponentsAnalysis]: Automaton has 21 accepting balls. 82
[2020-11-25 00:49:41,281 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:49:41,281 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:49:41,283 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:49:41,283 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:49:41,288 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:49:41,288 INFO  L82        PathProgramCache]: Analyzing trace with hash 574770818, now seen corresponding path program 1 times
[2020-11-25 00:49:41,289 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:49:41,429 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:49:43,994 WARN  L188               SmtUtils]: Spent 161.00 ms on a formula simplification. DAG size of input: 126 DAG size of output: 55
[2020-11-25 00:49:44,553 WARN  L188               SmtUtils]: Spent 221.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 74
[2020-11-25 00:49:45,335 WARN  L188               SmtUtils]: Spent 380.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 109
[2020-11-25 00:49:46,031 WARN  L188               SmtUtils]: Spent 388.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 109
[2020-11-25 00:49:47,249 WARN  L188               SmtUtils]: Spent 691.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 114
[2020-11-25 00:49:48,388 WARN  L188               SmtUtils]: Spent 712.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 110
[2020-11-25 00:49:49,209 WARN  L188               SmtUtils]: Spent 429.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 93
[2020-11-25 00:49:50,072 WARN  L188               SmtUtils]: Spent 433.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 95
[2020-11-25 00:49:50,630 WARN  L188               SmtUtils]: Spent 181.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 59
[2020-11-25 00:49:51,404 WARN  L188               SmtUtils]: Spent 362.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 61
[2020-11-25 00:49:52,012 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification. DAG size of input: 155 DAG size of output: 70
[2020-11-25 00:49:52,837 WARN  L188               SmtUtils]: Spent 364.00 ms on a formula simplification. DAG size of input: 156 DAG size of output: 70
[2020-11-25 00:49:53,671 WARN  L188               SmtUtils]: Spent 390.00 ms on a formula simplification. DAG size of input: 156 DAG size of output: 71
[2020-11-25 00:49:59,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 1078 backedges. 22 proven. 101 refuted. 0 times theorem prover too weak. 955 trivial. 0 not checked.
[2020-11-25 00:49:59,238 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:49:59,239 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [84] total 84
[2020-11-25 00:49:59,240 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:49:59,241 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 85 interpolants.
[2020-11-25 00:49:59,242 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=270, Invalid=6870, Unknown=0, NotChecked=0, Total=7140
[2020-11-25 00:49:59,242 INFO  L87              Difference]: Start difference. First operand 20087 states and 24967 transitions. cyclomatic complexity: 4995 Second operand 85 states.
[2020-11-25 00:50:09,795 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification that was a NOOP. DAG size: 153
[2020-11-25 00:51:37,442 WARN  L188               SmtUtils]: Spent 276.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 165
[2020-11-25 00:51:40,425 WARN  L188               SmtUtils]: Spent 2.01 s on a formula simplification. DAG size of input: 288 DAG size of output: 234
[2020-11-25 00:51:43,242 WARN  L188               SmtUtils]: Spent 1.97 s on a formula simplification. DAG size of input: 288 DAG size of output: 234
[2020-11-25 00:52:07,345 WARN  L188               SmtUtils]: Spent 6.99 s on a formula simplification. DAG size of input: 363 DAG size of output: 281
[2020-11-25 00:52:14,222 WARN  L188               SmtUtils]: Spent 4.04 s on a formula simplification. DAG size of input: 354 DAG size of output: 270
[2020-11-25 00:52:16,257 WARN  L188               SmtUtils]: Spent 1.25 s on a formula simplification. DAG size of input: 257 DAG size of output: 244
[2020-11-25 00:52:18,136 WARN  L188               SmtUtils]: Spent 1.37 s on a formula simplification. DAG size of input: 257 DAG size of output: 246
[2020-11-25 00:52:20,164 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification. DAG size of input: 165 DAG size of output: 164
[2020-11-25 00:52:20,598 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification that was a NOOP. DAG size: 171
[2020-11-25 00:52:21,202 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification. DAG size of input: 174 DAG size of output: 173
[2020-11-25 00:54:18,104 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:54:18,105 INFO  L93              Difference]: Finished difference Result 22989 states and 30964 transitions.
[2020-11-25 00:54:18,105 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 76 states. 
[2020-11-25 00:54:18,105 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22989 states and 30964 transitions.
[2020-11-25 00:54:18,184 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 140
[2020-11-25 00:54:18,285 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22989 states to 22989 states and 30964 transitions.
[2020-11-25 00:54:18,285 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4875
[2020-11-25 00:54:18,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4875
[2020-11-25 00:54:18,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22989 states and 30964 transitions.
[2020-11-25 00:54:18,311 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:54:18,311 INFO  L728         BuchiCegarLoop]: Abstraction has 22989 states and 30964 transitions.
[2020-11-25 00:54:18,319 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22989 states and 30964 transitions.
[2020-11-25 00:54:18,474 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22989 to 22079.
[2020-11-25 00:54:18,474 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22079 states.
[2020-11-25 00:54:18,529 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22079 states to 22079 states and 29262 transitions.
[2020-11-25 00:54:18,530 INFO  L751         BuchiCegarLoop]: Abstraction has 22079 states and 29262 transitions.
[2020-11-25 00:54:18,530 INFO  L631         BuchiCegarLoop]: Abstraction has 22079 states and 29262 transitions.
[2020-11-25 00:54:18,530 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 00:54:18,530 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22079 states and 29262 transitions.
[2020-11-25 00:54:18,558 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 134
[2020-11-25 00:54:18,558 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:54:18,558 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:54:18,560 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:54:18,560 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7538]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8200]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8211]               idx_s1645 := 0;
[L8212]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8214]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8225]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8226]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8011]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8022]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8023]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8024]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8035]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8046]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8057]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L8057]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8058]   COND TRUE   revert
[L8226]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8227]   COND TRUE   revert
[L7538]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7539]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND TRUE   DType[this] == ERC20Pausable
[L6663]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6663]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6664]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:54:18,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:54:18,566 INFO  L82        PathProgramCache]: Analyzing trace with hash -2072442899, now seen corresponding path program 1 times
[2020-11-25 00:54:18,566 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:54:18,591 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:54:18,818 INFO  L134       CoverageAnalysis]: Checked inductivity of 1120 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1119 trivial. 0 not checked.
[2020-11-25 00:54:18,819 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:54:18,819 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:54:18,819 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:54:18,819 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:54:18,819 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:54:18,819 INFO  L87              Difference]: Start difference. First operand 22079 states and 29262 transitions. cyclomatic complexity: 7333 Second operand 3 states.
[2020-11-25 00:54:18,941 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:54:18,941 INFO  L93              Difference]: Finished difference Result 22023 states and 29179 transitions.
[2020-11-25 00:54:18,942 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:54:18,942 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22023 states and 29179 transitions.
[2020-11-25 00:54:19,015 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 134
[2020-11-25 00:54:19,109 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22023 states to 22023 states and 29179 transitions.
[2020-11-25 00:54:19,109 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4704
[2020-11-25 00:54:19,111 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4704
[2020-11-25 00:54:19,112 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22023 states and 29179 transitions.
[2020-11-25 00:54:19,133 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:54:19,133 INFO  L728         BuchiCegarLoop]: Abstraction has 22023 states and 29179 transitions.
[2020-11-25 00:54:19,141 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22023 states and 29179 transitions.
[2020-11-25 00:54:19,289 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22023 to 21995.
[2020-11-25 00:54:19,289 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21995 states.
[2020-11-25 00:54:19,343 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21995 states to 21995 states and 29147 transitions.
[2020-11-25 00:54:19,344 INFO  L751         BuchiCegarLoop]: Abstraction has 21995 states and 29147 transitions.
[2020-11-25 00:54:19,344 INFO  L631         BuchiCegarLoop]: Abstraction has 21995 states and 29147 transitions.
[2020-11-25 00:54:19,344 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 00:54:19,344 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21995 states and 29147 transitions.
[2020-11-25 00:54:19,372 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 134
[2020-11-25 00:54:19,372 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:54:19,372 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:54:19,374 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:54:19,374 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7538]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8200]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8211]               idx_s1645 := 0;
[L8212]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8214]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8225]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8226]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8011]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8022]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8023]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8024]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8035]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8046]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8057]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5616]   COND TRUE   !(b_s82 <= a_s82)
[L5617]               revert := true;
[L8057]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8058]   COND TRUE   revert
[L8226]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8227]   COND TRUE   revert
[L7538]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7539]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND FALSE  !(!(b_s82 <= a_s82))
[L5620]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5621]               __ret_0_ := c_s82;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND FALSE  !(revert)
[L6776]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][from_s904];
[L6777]               __tmp___balances_HxERC20[this][from_s904] := __var_21;
[L6778]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][from_s904];
[L6779]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND TRUE   !(c_s106 >= a_s106)
[L5642]               revert := true;
[L6779]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L6780]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:54:19,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:54:19,378 INFO  L82        PathProgramCache]: Analyzing trace with hash -1563970868, now seen corresponding path program 1 times
[2020-11-25 00:54:19,379 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:54:19,400 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:54:19,661 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1082 trivial. 0 not checked.
[2020-11-25 00:54:19,661 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:54:19,661 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:54:19,661 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:54:19,661 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:54:19,661 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:54:19,662 INFO  L87              Difference]: Start difference. First operand 21995 states and 29147 transitions. cyclomatic complexity: 7302 Second operand 7 states.
[2020-11-25 00:54:21,946 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:54:21,947 INFO  L93              Difference]: Finished difference Result 22227 states and 29475 transitions.
[2020-11-25 00:54:21,947 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:54:21,947 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22227 states and 29475 transitions.
[2020-11-25 00:54:22,025 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 134
[2020-11-25 00:54:22,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22227 states to 22227 states and 29475 transitions.
[2020-11-25 00:54:22,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4746
[2020-11-25 00:54:22,130 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4760
[2020-11-25 00:54:22,130 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22227 states and 29475 transitions.
[2020-11-25 00:54:22,154 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:54:22,154 INFO  L728         BuchiCegarLoop]: Abstraction has 22227 states and 29475 transitions.
[2020-11-25 00:54:22,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22227 states and 29475 transitions.
[2020-11-25 00:54:22,313 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22227 to 22071.
[2020-11-25 00:54:22,314 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22071 states.
[2020-11-25 00:54:22,368 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22071 states to 22071 states and 29285 transitions.
[2020-11-25 00:54:22,368 INFO  L751         BuchiCegarLoop]: Abstraction has 22071 states and 29285 transitions.
[2020-11-25 00:54:22,368 INFO  L631         BuchiCegarLoop]: Abstraction has 22071 states and 29285 transitions.
[2020-11-25 00:54:22,368 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-11-25 00:54:22,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22071 states and 29285 transitions.
[2020-11-25 00:54:22,396 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 134
[2020-11-25 00:54:22,397 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:54:22,397 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:54:22,398 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:54:22,398 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND FALSE  !(DType[this] == BLY)
[L7134]   COND TRUE   DType[this] == ERC20Pausable
[L7135]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND TRUE   DType[this] == ERC20Pausable
[L6663]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6663]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6664]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7135]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7136]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:54:22,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:54:22,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -73356972, now seen corresponding path program 1 times
[2020-11-25 00:54:22,403 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:54:22,423 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:54:22,653 INFO  L134       CoverageAnalysis]: Checked inductivity of 1078 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1077 trivial. 0 not checked.
[2020-11-25 00:54:22,653 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:54:22,653 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:54:22,654 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:54:22,654 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:54:22,654 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:54:22,654 INFO  L87              Difference]: Start difference. First operand 22071 states and 29285 transitions. cyclomatic complexity: 7366 Second operand 7 states.
[2020-11-25 00:54:22,860 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:54:22,860 INFO  L93              Difference]: Finished difference Result 22413 states and 29622 transitions.
[2020-11-25 00:54:22,860 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:54:22,860 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22413 states and 29622 transitions.
[2020-11-25 00:54:22,936 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 134
[2020-11-25 00:54:23,030 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22413 states to 22021 states and 29215 transitions.
[2020-11-25 00:54:23,030 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4709
[2020-11-25 00:54:23,033 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4709
[2020-11-25 00:54:23,033 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22021 states and 29215 transitions.
[2020-11-25 00:54:23,055 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:54:23,055 INFO  L728         BuchiCegarLoop]: Abstraction has 22021 states and 29215 transitions.
[2020-11-25 00:54:23,063 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22021 states and 29215 transitions.
[2020-11-25 00:54:23,213 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22021 to 22021.
[2020-11-25 00:54:23,213 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22021 states.
[2020-11-25 00:54:23,274 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22021 states to 22021 states and 29215 transitions.
[2020-11-25 00:54:23,274 INFO  L751         BuchiCegarLoop]: Abstraction has 22021 states and 29215 transitions.
[2020-11-25 00:54:23,274 INFO  L631         BuchiCegarLoop]: Abstraction has 22021 states and 29215 transitions.
[2020-11-25 00:54:23,274 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-11-25 00:54:23,274 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22021 states and 29215 transitions.
[2020-11-25 00:54:23,302 INFO  L131   ngComponentsAnalysis]: Automaton has 36 accepting balls. 134
[2020-11-25 00:54:23,302 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:54:23,302 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:54:23,304 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:54:23,304 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false)
[L7537]   COND TRUE   __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0
[L7538]   CALL        call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8200]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8211]               idx_s1645 := 0;
[L8212]   COND TRUE   idx_s1645 < __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]]
[L8214]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1645] == false)
[L8225]   COND TRUE   __tmp___releaseTime_BLY.LockInfo[__tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= __tmp__now
[L8226]   CALL        call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8011]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8022]               lockinfo_s1600 := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8023]               releaseAmount_s1600 := __tmp___amount_BLY.LockInfo[lockinfo_s1600];
[L8024]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8035]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8046]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8057]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L5616]   COND FALSE  !(!(b_s82 <= a_s82))
[L5620]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5621]               __ret_0_ := c_s82;
[L8057]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]], 1);
[L8058]   COND FALSE  !(revert)
[L8061]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8072]               __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][idx_s1600] := __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]][__var_62];
[L8073]   COND FALSE  !(__tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][holder_s1600] == false)
[L8084]               __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]] := (__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8085]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND TRUE   !(c_s106 >= a_s106)
[L5642]               revert := true;
[L8085]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8086]   COND TRUE   revert
[L8226]   RET         call __var_69 := _unlock~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8227]   COND TRUE   revert
[L7538]   RET         call __var_42 := _autoUnlock~address_BLY__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7539]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND FALSE  !(DType[this] == Pausable)
[L10726]  COND TRUE   DType[this] == PauserRole
[L10727]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10727]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10728]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false)
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:54:23,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:54:23,309 INFO  L82        PathProgramCache]: Analyzing trace with hash -1818085363, now seen corresponding path program 1 times
[2020-11-25 00:54:23,309 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:54:23,332 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:54:23,997 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 105 proven. 1 refuted. 0 times theorem prover too weak. 976 trivial. 0 not checked.
[2020-11-25 00:54:23,998 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:54:23,998 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 00:54:23,998 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:54:23,998 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 00:54:23,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=85, Invalid=907, Unknown=0, NotChecked=0, Total=992
[2020-11-25 00:54:23,999 INFO  L87              Difference]: Start difference. First operand 22021 states and 29215 transitions. cyclomatic complexity: 7346 Second operand 32 states.
[2020-11-25 00:54:46,335 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:54:46,336 INFO  L93              Difference]: Finished difference Result 23368 states and 32435 transitions.
[2020-11-25 00:54:46,336 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-11-25 00:54:46,336 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23368 states and 32435 transitions.
[2020-11-25 00:54:46,423 INFO  L131   ngComponentsAnalysis]: Automaton has 40 accepting balls. 146
[2020-11-25 00:54:46,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23368 states to 23354 states and 32421 transitions.
[2020-11-25 00:54:46,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5231
[2020-11-25 00:54:46,536 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5236
[2020-11-25 00:54:46,536 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23354 states and 32421 transitions.
[2020-11-25 00:54:46,561 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:54:46,561 INFO  L728         BuchiCegarLoop]: Abstraction has 23354 states and 32421 transitions.
[2020-11-25 00:54:46,569 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23354 states and 32421 transitions.
[2020-11-25 00:54:46,738 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23354 to 22265.
[2020-11-25 00:54:46,738 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22265 states.
[2020-11-25 00:54:46,794 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22265 states to 22265 states and 30035 transitions.
[2020-11-25 00:54:46,794 INFO  L751         BuchiCegarLoop]: Abstraction has 22265 states and 30035 transitions.
[2020-11-25 00:54:46,794 INFO  L631         BuchiCegarLoop]: Abstraction has 22265 states and 30035 transitions.
[2020-11-25 00:54:46,794 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-11-25 00:54:46,795 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22265 states and 30035 transitions.
[2020-11-25 00:54:46,824 INFO  L131   ngComponentsAnalysis]: Automaton has 40 accepting balls. 146
[2020-11-25 00:54:46,824 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:54:46,824 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:54:46,826 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:54:46,826 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND FALSE  !(!!__tmp___paused_Pausable[this])
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND FALSE  !(revert)
[L7054]   COND TRUE   __tmp__DType[this] == BLY
[L7055]   CALL        call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6538]   COND TRUE   __tmp__DType[this] == BLY
[L6539]   CALL        call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6767]               __var_20 := null;
[L6768]   COND FALSE  !(!(to_s904 != null))
[L6772]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L5616]   COND FALSE  !(!(b_s82 <= a_s82))
[L5620]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5621]               __ret_0_ := c_s82;
[L6772]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][from_s904], value_s904);
[L6773]   COND FALSE  !(revert)
[L6776]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][from_s904];
[L6777]               __tmp___balances_HxERC20[this][from_s904] := __var_21;
[L6778]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][from_s904];
[L6779]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND TRUE   !(c_s106 >= a_s106)
[L5642]               revert := true;
[L6779]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][to_s904], value_s904);
[L6780]   COND TRUE   revert
[L6539]   RET         call _transfer~address~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6540]   COND TRUE   revert
[L7055]   RET         call __var_30 := transfer~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7056]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:54:46,830 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:54:46,830 INFO  L82        PathProgramCache]: Analyzing trace with hash 802124388, now seen corresponding path program 1 times
[2020-11-25 00:54:46,832 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:54:46,870 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:54:47,222 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1082 trivial. 0 not checked.
[2020-11-25 00:54:47,222 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:54:47,222 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 00:54:47,223 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:54:47,223 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 00:54:47,223 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=32, Invalid=208, Unknown=0, NotChecked=0, Total=240
[2020-11-25 00:54:47,223 INFO  L87              Difference]: Start difference. First operand 22265 states and 30035 transitions. cyclomatic complexity: 7928 Second operand 16 states.
[2020-11-25 00:54:56,526 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:54:56,526 INFO  L93              Difference]: Finished difference Result 22430 states and 29831 transitions.
[2020-11-25 00:54:56,526 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 00:54:56,526 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22430 states and 29831 transitions.
[2020-11-25 00:54:56,603 INFO  L131   ngComponentsAnalysis]: Automaton has 39 accepting balls. 144
[2020-11-25 00:54:56,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22430 states to 22430 states and 29831 transitions.
[2020-11-25 00:54:56,702 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4867
[2020-11-25 00:54:56,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4867
[2020-11-25 00:54:56,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22430 states and 29831 transitions.
[2020-11-25 00:54:56,727 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:54:56,727 INFO  L728         BuchiCegarLoop]: Abstraction has 22430 states and 29831 transitions.
[2020-11-25 00:54:56,735 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22430 states and 29831 transitions.
[2020-11-25 00:54:56,885 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22430 to 22160.
[2020-11-25 00:54:56,885 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22160 states.
[2020-11-25 00:54:56,941 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22160 states to 22160 states and 29475 transitions.
[2020-11-25 00:54:56,942 INFO  L751         BuchiCegarLoop]: Abstraction has 22160 states and 29475 transitions.
[2020-11-25 00:54:56,942 INFO  L631         BuchiCegarLoop]: Abstraction has 22160 states and 29475 transitions.
[2020-11-25 00:54:56,942 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-11-25 00:54:56,942 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22160 states and 29475 transitions.
[2020-11-25 00:54:56,970 INFO  L131   ngComponentsAnalysis]: Automaton has 39 accepting balls. 144
[2020-11-25 00:54:56,970 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:54:56,970 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:54:56,972 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:54:56,972 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:54:56,977 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:54:56,977 INFO  L82        PathProgramCache]: Analyzing trace with hash -2143848529, now seen corresponding path program 1 times
[2020-11-25 00:54:56,978 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:54:57,101 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:54:58,821 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 76
[2020-11-25 00:54:59,258 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification. DAG size of input: 187 DAG size of output: 81
[2020-11-25 00:54:59,458 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 74
[2020-11-25 00:55:00,367 WARN  L188               SmtUtils]: Spent 766.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 97
[2020-11-25 00:55:01,199 WARN  L188               SmtUtils]: Spent 371.00 ms on a formula simplification. DAG size of input: 220 DAG size of output: 103
[2020-11-25 00:55:02,112 WARN  L188               SmtUtils]: Spent 438.00 ms on a formula simplification. DAG size of input: 230 DAG size of output: 103
[2020-11-25 00:55:02,696 WARN  L188               SmtUtils]: Spent 437.00 ms on a formula simplification. DAG size of input: 223 DAG size of output: 106
[2020-11-25 00:55:03,513 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 86
[2020-11-25 00:55:03,887 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 36
[2020-11-25 00:55:05,255 WARN  L188               SmtUtils]: Spent 232.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 50
[2020-11-25 00:55:06,448 WARN  L188               SmtUtils]: Spent 237.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 53
[2020-11-25 00:55:07,405 WARN  L188               SmtUtils]: Spent 282.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 54
[2020-11-25 00:55:08,399 WARN  L188               SmtUtils]: Spent 336.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 54
[2020-11-25 00:55:08,979 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 60
[2020-11-25 00:55:10,283 WARN  L188               SmtUtils]: Spent 258.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 60
[2020-11-25 00:55:11,050 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 50
[2020-11-25 00:55:12,235 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 44
[2020-11-25 00:55:13,227 WARN  L188               SmtUtils]: Spent 112.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 44
[2020-11-25 00:55:15,471 INFO  L134       CoverageAnalysis]: Checked inductivity of 1078 backedges. 14 proven. 109 refuted. 0 times theorem prover too weak. 955 trivial. 0 not checked.
[2020-11-25 00:55:15,471 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:55:15,471 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [71] total 71
[2020-11-25 00:55:15,472 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:55:15,472 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 72 interpolants.
[2020-11-25 00:55:15,472 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=298, Invalid=4814, Unknown=0, NotChecked=0, Total=5112
[2020-11-25 00:55:15,472 INFO  L87              Difference]: Start difference. First operand 22160 states and 29475 transitions. cyclomatic complexity: 7472 Second operand 72 states.
[2020-11-25 00:55:54,124 WARN  L188               SmtUtils]: Spent 369.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 125
[2020-11-25 00:55:54,577 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 102
[2020-11-25 00:56:32,810 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:56:32,810 INFO  L93              Difference]: Finished difference Result 23096 states and 36126 transitions.
[2020-11-25 00:56:32,810 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 62 states. 
[2020-11-25 00:56:32,810 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23096 states and 36126 transitions.
[2020-11-25 00:56:33,021 INFO  L131   ngComponentsAnalysis]: Automaton has 80 accepting balls. 304
[2020-11-25 00:56:33,179 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23096 states to 23096 states and 36126 transitions.
[2020-11-25 00:56:33,179 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4987
[2020-11-25 00:56:33,182 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4987
[2020-11-25 00:56:33,182 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23096 states and 36126 transitions.
[2020-11-25 00:56:33,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:56:33,219 INFO  L728         BuchiCegarLoop]: Abstraction has 23096 states and 36126 transitions.
[2020-11-25 00:56:33,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23096 states and 36126 transitions.
[2020-11-25 00:56:33,440 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23096 to 22514.
[2020-11-25 00:56:33,440 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22514 states.
[2020-11-25 00:56:33,511 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22514 states to 22514 states and 32435 transitions.
[2020-11-25 00:56:33,511 INFO  L751         BuchiCegarLoop]: Abstraction has 22514 states and 32435 transitions.
[2020-11-25 00:56:33,511 INFO  L631         BuchiCegarLoop]: Abstraction has 22514 states and 32435 transitions.
[2020-11-25 00:56:33,511 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-11-25 00:56:33,511 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22514 states and 32435 transitions.
[2020-11-25 00:56:33,544 INFO  L131   ngComponentsAnalysis]: Automaton has 56 accepting balls. 214
[2020-11-25 00:56:33,544 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:56:33,544 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:56:33,546 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:56:33,546 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND TRUE   DType[this] == ERC20Pausable
[L6663]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6663]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6664]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:56:33,582 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:56:33,583 INFO  L82        PathProgramCache]: Analyzing trace with hash 1565550122, now seen corresponding path program 1 times
[2020-11-25 00:56:33,583 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:56:33,603 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:56:33,854 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1088 trivial. 0 not checked.
[2020-11-25 00:56:33,854 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:56:33,854 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 00:56:33,854 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:56:33,854 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:56:33,854 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:56:33,854 INFO  L87              Difference]: Start difference. First operand 22514 states and 32435 transitions. cyclomatic complexity: 10146 Second operand 8 states.
[2020-11-25 00:56:34,100 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:56:34,100 INFO  L93              Difference]: Finished difference Result 22940 states and 32856 transitions.
[2020-11-25 00:56:34,100 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:56:34,100 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22940 states and 32856 transitions.
[2020-11-25 00:56:34,199 INFO  L131   ngComponentsAnalysis]: Automaton has 56 accepting balls. 214
[2020-11-25 00:56:34,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22940 states to 22464 states and 32365 transitions.
[2020-11-25 00:56:34,327 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4817
[2020-11-25 00:56:34,329 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4817
[2020-11-25 00:56:34,330 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22464 states and 32365 transitions.
[2020-11-25 00:56:34,359 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:56:34,359 INFO  L728         BuchiCegarLoop]: Abstraction has 22464 states and 32365 transitions.
[2020-11-25 00:56:34,368 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22464 states and 32365 transitions.
[2020-11-25 00:56:34,552 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22464 to 22464.
[2020-11-25 00:56:34,552 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22464 states.
[2020-11-25 00:56:34,623 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22464 states to 22464 states and 32365 transitions.
[2020-11-25 00:56:34,623 INFO  L751         BuchiCegarLoop]: Abstraction has 22464 states and 32365 transitions.
[2020-11-25 00:56:34,623 INFO  L631         BuchiCegarLoop]: Abstraction has 22464 states and 32365 transitions.
[2020-11-25 00:56:34,623 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-11-25 00:56:34,623 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22464 states and 32365 transitions.
[2020-11-25 00:56:34,655 INFO  L131   ngComponentsAnalysis]: Automaton has 56 accepting balls. 214
[2020-11-25 00:56:34,655 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:56:34,655 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:56:34,657 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:56:34,657 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:56:34,661 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:56:34,662 INFO  L82        PathProgramCache]: Analyzing trace with hash 1460334407, now seen corresponding path program 1 times
[2020-11-25 00:56:34,662 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:56:34,686 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:56:35,329 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 987 trivial. 0 not checked.
[2020-11-25 00:56:35,329 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:56:35,329 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:56:35,330 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:56:35,330 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:56:35,330 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:56:35,330 INFO  L87              Difference]: Start difference. First operand 22464 states and 32365 transitions. cyclomatic complexity: 10126 Second operand 26 states.
[2020-11-25 00:56:52,876 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:56:52,876 INFO  L93              Difference]: Finished difference Result 23275 states and 34364 transitions.
[2020-11-25 00:56:52,876 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:56:52,876 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23275 states and 34364 transitions.
[2020-11-25 00:56:52,981 INFO  L131   ngComponentsAnalysis]: Automaton has 64 accepting balls. 238
[2020-11-25 00:56:53,121 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23275 states to 23275 states and 34364 transitions.
[2020-11-25 00:56:53,121 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5133
[2020-11-25 00:56:53,125 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5133
[2020-11-25 00:56:53,125 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23275 states and 34364 transitions.
[2020-11-25 00:56:53,157 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:56:53,158 INFO  L728         BuchiCegarLoop]: Abstraction has 23275 states and 34364 transitions.
[2020-11-25 00:56:53,166 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23275 states and 34364 transitions.
[2020-11-25 00:56:53,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23275 to 22464.
[2020-11-25 00:56:53,361 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22464 states.
[2020-11-25 00:56:53,431 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22464 states to 22464 states and 32347 transitions.
[2020-11-25 00:56:53,431 INFO  L751         BuchiCegarLoop]: Abstraction has 22464 states and 32347 transitions.
[2020-11-25 00:56:53,431 INFO  L631         BuchiCegarLoop]: Abstraction has 22464 states and 32347 transitions.
[2020-11-25 00:56:53,431 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-11-25 00:56:53,431 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22464 states and 32347 transitions.
[2020-11-25 00:56:53,463 INFO  L131   ngComponentsAnalysis]: Automaton has 56 accepting balls. 214
[2020-11-25 00:56:53,464 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:56:53,464 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:56:53,465 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:56:53,465 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:56:53,470 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:56:53,470 INFO  L82        PathProgramCache]: Analyzing trace with hash -1213009990, now seen corresponding path program 1 times
[2020-11-25 00:56:53,471 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:56:53,494 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:56:54,140 INFO  L134       CoverageAnalysis]: Checked inductivity of 1093 backedges. 105 proven. 6 refuted. 0 times theorem prover too weak. 982 trivial. 0 not checked.
[2020-11-25 00:56:54,140 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:56:54,141 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:56:54,141 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:56:54,141 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:56:54,141 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:56:54,141 INFO  L87              Difference]: Start difference. First operand 22464 states and 32347 transitions. cyclomatic complexity: 10108 Second operand 26 states.
[2020-11-25 00:57:14,869 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:57:14,869 INFO  L93              Difference]: Finished difference Result 23217 states and 33603 transitions.
[2020-11-25 00:57:14,869 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:57:14,869 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23217 states and 33603 transitions.
[2020-11-25 00:57:14,970 INFO  L131   ngComponentsAnalysis]: Automaton has 56 accepting balls. 214
[2020-11-25 00:57:15,102 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23217 states to 23217 states and 33603 transitions.
[2020-11-25 00:57:15,102 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 5107
[2020-11-25 00:57:15,106 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 5107
[2020-11-25 00:57:15,106 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 23217 states and 33603 transitions.
[2020-11-25 00:57:15,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:57:15,137 INFO  L728         BuchiCegarLoop]: Abstraction has 23217 states and 33603 transitions.
[2020-11-25 00:57:15,146 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 23217 states and 33603 transitions.
[2020-11-25 00:57:15,373 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 23217 to 22464.
[2020-11-25 00:57:15,373 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22464 states.
[2020-11-25 00:57:15,442 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22464 states to 22464 states and 32291 transitions.
[2020-11-25 00:57:15,442 INFO  L751         BuchiCegarLoop]: Abstraction has 22464 states and 32291 transitions.
[2020-11-25 00:57:15,442 INFO  L631         BuchiCegarLoop]: Abstraction has 22464 states and 32291 transitions.
[2020-11-25 00:57:15,442 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-11-25 00:57:15,442 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22464 states and 32291 transitions.
[2020-11-25 00:57:15,474 INFO  L131   ngComponentsAnalysis]: Automaton has 56 accepting balls. 214
[2020-11-25 00:57:15,474 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:57:15,475 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:57:15,476 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:57:15,476 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:57:15,521 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:15,521 INFO  L82        PathProgramCache]: Analyzing trace with hash 273321436, now seen corresponding path program 1 times
[2020-11-25 00:57:15,522 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:15,591 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:57:16,200 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 115 proven. 8 refuted. 0 times theorem prover too weak. 959 trivial. 0 not checked.
[2020-11-25 00:57:16,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:57:16,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 00:57:16,201 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:57:16,201 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 00:57:16,201 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=83, Invalid=847, Unknown=0, NotChecked=0, Total=930
[2020-11-25 00:57:16,202 INFO  L87              Difference]: Start difference. First operand 22464 states and 32291 transitions. cyclomatic complexity: 10052 Second operand 31 states.
[2020-11-25 00:57:38,891 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:57:38,892 INFO  L93              Difference]: Finished difference Result 22485 states and 31803 transitions.
[2020-11-25 00:57:38,892 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 00:57:38,892 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22485 states and 31803 transitions.
[2020-11-25 00:57:38,983 INFO  L131   ngComponentsAnalysis]: Automaton has 49 accepting balls. 200
[2020-11-25 00:57:39,104 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22485 states to 22435 states and 31753 transitions.
[2020-11-25 00:57:39,104 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4688
[2020-11-25 00:57:39,107 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4688
[2020-11-25 00:57:39,107 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22435 states and 31753 transitions.
[2020-11-25 00:57:39,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:57:39,137 INFO  L728         BuchiCegarLoop]: Abstraction has 22435 states and 31753 transitions.
[2020-11-25 00:57:39,145 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22435 states and 31753 transitions.
[2020-11-25 00:57:39,319 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22435 to 21019.
[2020-11-25 00:57:39,319 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21019 states.
[2020-11-25 00:57:39,366 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21019 states to 21019 states and 26793 transitions.
[2020-11-25 00:57:39,366 INFO  L751         BuchiCegarLoop]: Abstraction has 21019 states and 26793 transitions.
[2020-11-25 00:57:39,366 INFO  L631         BuchiCegarLoop]: Abstraction has 21019 states and 26793 transitions.
[2020-11-25 00:57:39,366 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-11-25 00:57:39,366 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21019 states and 26793 transitions.
[2020-11-25 00:57:39,391 INFO  L131   ngComponentsAnalysis]: Automaton has 26 accepting balls. 100
[2020-11-25 00:57:39,391 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:57:39,391 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:57:39,393 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:57:39,393 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND TRUE   DType[this] == Pausable
[L10722]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10722]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10723]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:57:39,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:39,398 INFO  L82        PathProgramCache]: Analyzing trace with hash 1382668039, now seen corresponding path program 1 times
[2020-11-25 00:57:39,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:39,423 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:57:39,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 1237 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 1232 trivial. 0 not checked.
[2020-11-25 00:57:39,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:57:39,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:57:39,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:57:39,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:57:39,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:57:39,811 INFO  L87              Difference]: Start difference. First operand 21019 states and 26793 transitions. cyclomatic complexity: 5905 Second operand 3 states.
[2020-11-25 00:57:40,016 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:57:40,016 INFO  L93              Difference]: Finished difference Result 21059 states and 26903 transitions.
[2020-11-25 00:57:40,016 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:57:40,016 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21059 states and 26903 transitions.
[2020-11-25 00:57:40,080 INFO  L131   ngComponentsAnalysis]: Automaton has 26 accepting balls. 100
[2020-11-25 00:57:40,159 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21059 states to 21059 states and 26903 transitions.
[2020-11-25 00:57:40,159 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4441
[2020-11-25 00:57:40,162 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4441
[2020-11-25 00:57:40,162 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21059 states and 26903 transitions.
[2020-11-25 00:57:40,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:57:40,182 INFO  L728         BuchiCegarLoop]: Abstraction has 21059 states and 26903 transitions.
[2020-11-25 00:57:40,190 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21059 states and 26903 transitions.
[2020-11-25 00:57:40,322 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21059 to 21029.
[2020-11-25 00:57:40,322 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21029 states.
[2020-11-25 00:57:40,369 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21029 states to 21029 states and 26803 transitions.
[2020-11-25 00:57:40,369 INFO  L751         BuchiCegarLoop]: Abstraction has 21029 states and 26803 transitions.
[2020-11-25 00:57:40,369 INFO  L631         BuchiCegarLoop]: Abstraction has 21029 states and 26803 transitions.
[2020-11-25 00:57:40,369 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-11-25 00:57:40,369 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21029 states and 26803 transitions.
[2020-11-25 00:57:40,394 INFO  L131   ngComponentsAnalysis]: Automaton has 26 accepting balls. 100
[2020-11-25 00:57:40,395 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:57:40,395 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:57:40,396 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:57:40,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND TRUE   choice == 6
[L12140]              gas := gas - 21000;
[L12141]  COND TRUE   gas >= 0
[L12142]              assume msgvalue_MSG == 0;
[L12143]  CALL        call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((((((__ret_0_ == true && _totalSupply_HxERC20[this] == old(_totalSupply_HxERC20[this])) && _balances_HxERC20[this] == old(_balances_HxERC20[this])) && _allowed_HxERC20[this] == old(_allowed_HxERC20[this])) && implementation_BLY[this] == old(implementation_BLY[this])) && M_Ref_Ref[timelockList_BLY[this]] == old(M_Ref_Ref[timelockList_BLY[this]])) && frozenAccount_BLY[this] == old(frozenAccount_BLY[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && owner_HxOwnable[this] == old(owner_HxOwnable[this])) && newOwner_HxOwnable[this] == old(newOwner_HxOwnable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:57:40,401 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:40,402 INFO  L82        PathProgramCache]: Analyzing trace with hash -648331830, now seen corresponding path program 1 times
[2020-11-25 00:57:40,402 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:40,428 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:57:40,850 INFO  L134       CoverageAnalysis]: Checked inductivity of 1237 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 1236 trivial. 0 not checked.
[2020-11-25 00:57:40,851 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:57:40,851 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 00:57:40,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:57:40,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 00:57:40,851 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 00:57:40,851 INFO  L87              Difference]: Start difference. First operand 21029 states and 26803 transitions. cyclomatic complexity: 5905 Second operand 12 states.
[2020-11-25 00:57:46,721 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:57:46,721 INFO  L93              Difference]: Finished difference Result 22166 states and 28699 transitions.
[2020-11-25 00:57:46,721 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 00:57:46,721 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 22166 states and 28699 transitions.
[2020-11-25 00:57:46,831 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:57:46,907 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 22166 states to 21826 states and 28289 transitions.
[2020-11-25 00:57:46,908 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4804
[2020-11-25 00:57:46,910 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4804
[2020-11-25 00:57:46,910 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21826 states and 28289 transitions.
[2020-11-25 00:57:46,930 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:57:46,931 INFO  L728         BuchiCegarLoop]: Abstraction has 21826 states and 28289 transitions.
[2020-11-25 00:57:46,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21826 states and 28289 transitions.
[2020-11-25 00:57:47,080 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21826 to 21651.
[2020-11-25 00:57:47,080 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21651 states.
[2020-11-25 00:57:47,132 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21651 states to 21651 states and 28066 transitions.
[2020-11-25 00:57:47,132 INFO  L751         BuchiCegarLoop]: Abstraction has 21651 states and 28066 transitions.
[2020-11-25 00:57:47,132 INFO  L631         BuchiCegarLoop]: Abstraction has 21651 states and 28066 transitions.
[2020-11-25 00:57:47,132 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-11-25 00:57:47,132 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21651 states and 28066 transitions.
[2020-11-25 00:57:47,159 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:57:47,159 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:57:47,159 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:57:47,160 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:57:47,160 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND TRUE   choice == 21
[L12044]              gas := gas - 21000;
[L12045]  COND TRUE   gas >= 0
[L12046]              assume msgvalue_MSG == 0;
[L12047]  CALL        call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L1449]               havoc __exception;
[L1450]               revert := false;
[L1451]   COND FALSE  !(__exception)
[L1487]   CALL        call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6406]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L6406]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND FALSE  !(revert)
[L6410]   CALL        call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10766]  COND FALSE  !(!_paused_Pausable[this])
[L6410]   RET         call whenPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6411]   COND FALSE  !(revert)
[L6414]               _paused_Pausable[this] := false;
[L6415]               assert { :EventEmitted "Unpaused_Pausable" } true;
[L1487]   RET         call unpause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L1488]               assume !revert && gas >= 0;
[L12047]  RET         call unpause_Pausable(this, msgsender_MSG, msgvalue_MSG);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10743]              revert := true;
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND FALSE  !(!!__tmp__frozenAccount_BLY[this][_holder_s1185])
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND FALSE  !(revert)
[L7526]   COND TRUE   __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] == false
[L7527]   CALL        call __var_41 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7527]   RET         call __var_41 := FreshRefGenerator__fail();
[L7528]   COND FALSE  !(revert)
[L7531]               assume __tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7532]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]][msgsender_MSG] := true;
[L7533]               assume __tmp__M_int_Ref[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7534]               assume __tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7535]               assume __tmp__sum[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7537]   COND FALSE  !(__tmp__Length[__tmp__M_Ref_Ref[__tmp__timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7543]   COND TRUE   __tmp__DType[this] == BLY
[L7544]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7050]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10742]  COND TRUE   !!__tmp___paused_Pausable[this]
[L10743]              revert := true;
[L7050]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L7051]   COND TRUE   revert
[L7544]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7545]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:57:47,188 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:47,188 INFO  L82        PathProgramCache]: Analyzing trace with hash 1687806416, now seen corresponding path program 1 times
[2020-11-25 00:57:47,189 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:47,207 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:57:47,435 INFO  L134       CoverageAnalysis]: Checked inductivity of 1046 backedges. 7 proven. 95 refuted. 0 times theorem prover too weak. 944 trivial. 0 not checked.
[2020-11-25 00:57:47,435 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:57:47,435 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-11-25 00:57:47,435 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:57:47,435 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 00:57:47,435 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 00:57:47,436 INFO  L87              Difference]: Start difference. First operand 21651 states and 28066 transitions. cyclomatic complexity: 6562 Second operand 14 states.
[2020-11-25 00:57:53,074 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:57:53,075 INFO  L93              Difference]: Finished difference Result 21669 states and 28181 transitions.
[2020-11-25 00:57:53,075 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 00:57:53,075 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21669 states and 28181 transitions.
[2020-11-25 00:57:53,187 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:57:53,269 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21669 states to 21669 states and 28181 transitions.
[2020-11-25 00:57:53,269 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4711
[2020-11-25 00:57:53,271 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4711
[2020-11-25 00:57:53,272 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21669 states and 28181 transitions.
[2020-11-25 00:57:53,294 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:57:53,294 INFO  L728         BuchiCegarLoop]: Abstraction has 21669 states and 28181 transitions.
[2020-11-25 00:57:53,302 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21669 states and 28181 transitions.
[2020-11-25 00:57:53,445 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21669 to 21669.
[2020-11-25 00:57:53,445 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21669 states.
[2020-11-25 00:57:53,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21669 states to 21669 states and 28181 transitions.
[2020-11-25 00:57:53,499 INFO  L751         BuchiCegarLoop]: Abstraction has 21669 states and 28181 transitions.
[2020-11-25 00:57:53,499 INFO  L631         BuchiCegarLoop]: Abstraction has 21669 states and 28181 transitions.
[2020-11-25 00:57:53,499 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-11-25 00:57:53,499 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21669 states and 28181 transitions.
[2020-11-25 00:57:53,526 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:57:53,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:57:53,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:57:53,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:57:53,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND TRUE   choice == 5
[L12146]              gas := gas - 21000;
[L12147]  COND TRUE   gas >= 0
[L12148]              assume msgvalue_MSG == 0;
[L12149]  CALL        call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3432]               havoc __exception;
[L3433]               revert := false;
[L3434]   COND FALSE  !(__exception)
[L3470]   CALL        call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L7720]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7720]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7721]   COND FALSE  !(revert)
[L7724]   COND FALSE  !(!frozenAccount_BLY[this][holder_s1379])
[L7728]               frozenAccount_BLY[this][holder_s1379] := false;
[L7729]               assert { :EventEmitted "Unfreeze_BLY" } true;
[L7730]               __ret_0_ := true;
[L3470]   RET         call __ret_0_ := unfreezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L3471]               assume !revert && gas >= 0;
[L12149]  RET         call __ret_0_unfreezeAccount := unfreezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1379);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:57:53,543 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:53,544 INFO  L82        PathProgramCache]: Analyzing trace with hash 1803035924, now seen corresponding path program 1 times
[2020-11-25 00:57:53,544 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:53,562 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:57:53,786 INFO  L134       CoverageAnalysis]: Checked inductivity of 1047 backedges. 1 proven. 96 refuted. 0 times theorem prover too weak. 950 trivial. 0 not checked.
[2020-11-25 00:57:53,786 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:57:53,786 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 00:57:53,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:57:53,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 00:57:53,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-11-25 00:57:53,786 INFO  L87              Difference]: Start difference. First operand 21669 states and 28181 transitions. cyclomatic complexity: 6659 Second operand 11 states.
[2020-11-25 00:57:57,645 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:57:57,645 INFO  L93              Difference]: Finished difference Result 21687 states and 28258 transitions.
[2020-11-25 00:57:57,645 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 00:57:57,645 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21687 states and 28258 transitions.
[2020-11-25 00:57:57,720 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:57:57,812 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21687 states to 21687 states and 28258 transitions.
[2020-11-25 00:57:57,812 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4723
[2020-11-25 00:57:57,815 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4723
[2020-11-25 00:57:57,815 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21687 states and 28258 transitions.
[2020-11-25 00:57:57,836 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:57:57,836 INFO  L728         BuchiCegarLoop]: Abstraction has 21687 states and 28258 transitions.
[2020-11-25 00:57:57,845 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21687 states and 28258 transitions.
[2020-11-25 00:57:57,982 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21687 to 21687.
[2020-11-25 00:57:57,982 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21687 states.
[2020-11-25 00:57:58,035 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21687 states to 21687 states and 28258 transitions.
[2020-11-25 00:57:58,035 INFO  L751         BuchiCegarLoop]: Abstraction has 21687 states and 28258 transitions.
[2020-11-25 00:57:58,035 INFO  L631         BuchiCegarLoop]: Abstraction has 21687 states and 28258 transitions.
[2020-11-25 00:57:58,035 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-11-25 00:57:58,035 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21687 states and 28258 transitions.
[2020-11-25 00:57:58,062 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:57:58,062 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:57:58,062 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:57:58,064 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:57:58,064 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND TRUE   choice == 6
[L12140]              gas := gas - 21000;
[L12141]  COND TRUE   gas >= 0
[L12142]              assume msgvalue_MSG == 0;
[L12143]  CALL        call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:57:58,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:58,068 INFO  L82        PathProgramCache]: Analyzing trace with hash -957195066, now seen corresponding path program 1 times
[2020-11-25 00:57:58,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:58,090 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:57:58,115 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:57:58,288 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:58,288 INFO  L82        PathProgramCache]: Analyzing trace with hash -375721242, now seen corresponding path program 1 times
[2020-11-25 00:57:58,288 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:58,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:57:58,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:57:58,340 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:57:58,340 INFO  L82        PathProgramCache]: Analyzing trace with hash -1779781717, now seen corresponding path program 1 times
[2020-11-25 00:57:58,341 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:57:58,370 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:57:58,863 INFO  L134       CoverageAnalysis]: Checked inductivity of 1070 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 1067 trivial. 0 not checked.
[2020-11-25 00:57:58,863 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:57:58,863 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 00:57:58,864 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 00:57:58,864 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 00:57:58,864 INFO  L87              Difference]: Start difference. First operand 21687 states and 28258 transitions. cyclomatic complexity: 6718 Second operand 12 states.
[2020-11-25 00:58:04,558 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:04,558 INFO  L93              Difference]: Finished difference Result 21916 states and 28520 transitions.
[2020-11-25 00:58:04,558 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 00:58:04,558 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21916 states and 28520 transitions.
[2020-11-25 00:58:04,656 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:58:04,768 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21916 states to 21916 states and 28520 transitions.
[2020-11-25 00:58:04,769 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4850
[2020-11-25 00:58:04,771 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 4850
[2020-11-25 00:58:04,771 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21916 states and 28520 transitions.
[2020-11-25 00:58:04,797 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:04,797 INFO  L728         BuchiCegarLoop]: Abstraction has 21916 states and 28520 transitions.
[2020-11-25 00:58:04,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21916 states and 28520 transitions.
[2020-11-25 00:58:04,991 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21916 to 21583.
[2020-11-25 00:58:04,991 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 21583 states.
[2020-11-25 00:58:05,043 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 21583 states to 21583 states and 28011 transitions.
[2020-11-25 00:58:05,043 INFO  L751         BuchiCegarLoop]: Abstraction has 21583 states and 28011 transitions.
[2020-11-25 00:58:05,043 INFO  L631         BuchiCegarLoop]: Abstraction has 21583 states and 28011 transitions.
[2020-11-25 00:58:05,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-11-25 00:58:05,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 21583 states and 28011 transitions.
[2020-11-25 00:58:05,069 INFO  L131   ngComponentsAnalysis]: Automaton has 30 accepting balls. 124
[2020-11-25 00:58:05,070 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:05,070 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:05,071 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:05,071 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND TRUE   choice == 6
[L12140]              gas := gas - 21000;
[L12141]  COND TRUE   gas >= 0
[L12142]              assume msgvalue_MSG == 0;
[L12143]  CALL        call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND TRUE   __exception
[L3185]               __tmp__Balance := Balance;
[L3186]               __tmp__DType := DType;
[L3187]               __tmp__Alloc := Alloc;
[L3188]               __tmp__balance_ADDR := balance_ADDR;
[L3189]               __tmp__M_Ref_bool := M_Ref_bool;
[L3190]               __tmp__sum := sum;
[L3191]               __tmp__M_Ref_int := M_Ref_int;
[L3192]               __tmp__sum__balances0 := sum__balances0;
[L3193]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]               __tmp__sum__allowed1 := sum__allowed1;
[L3196]               __tmp__M_int_Ref := M_int_Ref;
[L3197]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]               __tmp__Length := Length;
[L3200]               __tmp__now := now;
[L3201]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]               __tmp___paused_Pausable := _paused_Pausable;
[L3206]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]               __tmp__implementation_BLY := implementation_BLY;
[L3215]               __tmp__timelockList_BLY := timelockList_BLY;
[L3216]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE   !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]              revert := true;
[L7522]   RET         call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE   revert
[L3217]   RET         call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]               assume revert || gas < 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND TRUE   choice == 29
[L11996]              gas := gas - 21000;
[L11997]  COND TRUE   gas >= 0
[L11998]              assume msgvalue_MSG == 0;
[L11999]  CALL        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L452]                havoc __exception;
[L453]                revert := false;
[L454]    COND TRUE   __exception
[L455]                __tmp__Balance := Balance;
[L456]                __tmp__DType := DType;
[L457]                __tmp__Alloc := Alloc;
[L458]                __tmp__balance_ADDR := balance_ADDR;
[L459]                __tmp__M_Ref_bool := M_Ref_bool;
[L460]                __tmp__sum := sum;
[L461]                __tmp__M_Ref_int := M_Ref_int;
[L462]                __tmp__sum__balances0 := sum__balances0;
[L463]                __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]                __tmp__sum__allowed1 := sum__allowed1;
[L466]                __tmp__M_int_Ref := M_int_Ref;
[L467]                __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]                __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]                __tmp__Length := Length;
[L470]                __tmp__now := now;
[L471]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]                __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]                __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]                __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]                __tmp___paused_Pausable := _paused_Pausable;
[L476]                __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]                __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]                __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]                __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]                __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]                __tmp__implementation_BLY := implementation_BLY;
[L485]                __tmp__timelockList_BLY := timelockList_BLY;
[L486]                __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE   !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]              revert := true;
[L5888]   RET         call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE   revert
[L487]    RET         call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]                assume revert || gas < 0;
[L11999]  RET         call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:05,084 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:05,085 INFO  L82        PathProgramCache]: Analyzing trace with hash -957195066, now seen corresponding path program 2 times
[2020-11-25 00:58:05,085 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:05,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:58:05,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:58:05,250 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:05,250 INFO  L82        PathProgramCache]: Analyzing trace with hash 29036967, now seen corresponding path program 1 times
[2020-11-25 00:58:05,251 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:05,256 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:58:05,262 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:58:05,275 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:05,275 INFO  L82        PathProgramCache]: Analyzing trace with hash -1953297940, now seen corresponding path program 1 times
[2020-11-25 00:58:05,276 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:05,317 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:58:05,360 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3517 to 7027
[2020-11-25 00:58:05,747 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 285 DAG size of output: 275
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 00:58:05,893 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification that was a NOOP. DAG size: 414
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 10513 to 21023
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-25 00:58:06,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 00:58:06,895 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 00:58:08,930 WARN  L188               SmtUtils]: Spent 1.73 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9883 to 19763
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 00:58:09,106 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-11-25 00:58:09,368 WARN  L188               SmtUtils]: Spent 178.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 00:58:09,702 WARN  L188               SmtUtils]: Spent 279.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 8053 to 16103
[2020-11-25 00:58:10,031 WARN  L188               SmtUtils]: Spent 324.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-11-25 00:58:10,324 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 337 DAG size of output: 256
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 00:58:10,465 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification that was a NOOP. DAG size: 408
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 10513 to 21023
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 00:58:10,827 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 345
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-25 00:58:11,029 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification that was a NOOP. DAG size: 273
[2020-11-25 00:58:11,606 WARN  L188               SmtUtils]: Spent 573.00 ms on a formula simplification. DAG size of input: 368 DAG size of output: 329
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 00:58:11,744 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 187
[2020-11-25 00:58:11,962 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 441
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 00:58:12,173 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification that was a NOOP. DAG size: 352
[2020-11-25 00:58:15,528 WARN  L188               SmtUtils]: Spent 3.35 s on a formula simplification. DAG size of input: 956 DAG size of output: 942
Garbage collection #1: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #2: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #3: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #4: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #5: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #6: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #7: 25073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25073 to 50131
Garbage collection #8: 50131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 50131 to 100129
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 00:58:16,074 WARN  L188               SmtUtils]: Spent 506.00 ms on a formula simplification. DAG size of input: 347 DAG size of output: 344
[2020-11-25 00:58:16,614 WARN  L188               SmtUtils]: Spent 507.00 ms on a formula simplification that was a NOOP. DAG size: 501
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 10559 to 21107
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 00:58:16,880 WARN  L188               SmtUtils]: Spent 257.00 ms on a formula simplification that was a NOOP. DAG size: 344
[2020-11-25 00:58:17,865 WARN  L188               SmtUtils]: Spent 983.00 ms on a formula simplification. DAG size of input: 503 DAG size of output: 502
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
[2020-11-25 00:58:18,353 WARN  L188               SmtUtils]: Spent 483.00 ms on a formula simplification that was a NOOP. DAG size: 498
[2020-11-25 00:58:18,381 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:58:18,418 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 00:58:18,429 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:58:18 BasicIcfg
[2020-11-25 00:58:18,429 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 00:58:18,429 INFO  L168              Benchmark]: Toolchain (without parser) took 666872.13 ms. Allocated memory was 1.0 GB in the beginning and 4.5 GB in the end (delta: 3.4 GB). Free memory was 919.1 MB in the beginning and 2.5 GB in the end (delta: -1.6 GB). Peak memory consumption was 4.5 GB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,430 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,430 INFO  L168              Benchmark]: Boogie Preprocessor took 159.99 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,430 INFO  L168              Benchmark]: UtopiaSpecLang took 87.01 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,430 INFO  L168              Benchmark]: Boogie Printer took 28.07 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,430 INFO  L168              Benchmark]: RCFGBuilder took 1427.27 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 870.8 MB in the beginning and 754.7 MB in the end (delta: 116.1 MB). Peak memory consumption was 181.6 MB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,431 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.37 ms. Allocated memory is still 1.1 GB. Free memory was 754.7 MB in the beginning and 751.2 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,431 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3349.77 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 455.1 MB). Free memory was 751.2 MB in the beginning and 816.3 MB in the end (delta: -65.1 MB). Peak memory consumption was 390.0 MB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,431 INFO  L168              Benchmark]: BlockEncodingV2 took 312.61 ms. Allocated memory is still 1.5 GB. Free memory was 816.3 MB in the beginning and 674.0 MB in the end (delta: 142.3 MB). Peak memory consumption was 142.3 MB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,431 INFO  L168              Benchmark]: BuchiAutomizer took 661468.17 ms. Allocated memory was 1.5 GB in the beginning and 4.5 GB in the end (delta: 2.9 GB). Free memory was 674.0 MB in the beginning and 2.5 GB in the end (delta: -1.8 GB). Peak memory consumption was 3.7 GB. Max. memory is 15.3 GB.
[2020-11-25 00:58:18,434 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11434 locations, 20718 edges
  - StatisticsResult: Encoded RCFG
    11292 locations, 20327 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 159.99 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 892.2 MB in the end (delta: 26.9 MB). Peak memory consumption was 26.9 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 87.01 ms. Allocated memory is still 1.0 GB. Free memory was 892.2 MB in the beginning and 881.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.07 ms. Allocated memory is still 1.0 GB. Free memory was 881.5 MB in the beginning and 870.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1427.27 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 65.5 MB). Free memory was 870.8 MB in the beginning and 754.7 MB in the end (delta: 116.1 MB). Peak memory consumption was 181.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.37 ms. Allocated memory is still 1.1 GB. Free memory was 754.7 MB in the beginning and 751.2 MB in the end (delta: 3.5 MB). Peak memory consumption was 3.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3349.77 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 455.1 MB). Free memory was 751.2 MB in the beginning and 816.3 MB in the end (delta: -65.1 MB). Peak memory consumption was 390.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 312.61 ms. Allocated memory is still 1.5 GB. Free memory was 816.3 MB in the beginning and 674.0 MB in the end (delta: 142.3 MB). Peak memory consumption was 142.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 661468.17 ms. Allocated memory was 1.5 GB in the beginning and 4.5 GB in the end (delta: 2.9 GB). Free memory was 674.0 MB in the beginning and 2.5 GB in the end (delta: -1.8 GB). Peak memory consumption was 3.7 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4605 locations, 6368 edges
  - StatisticsResult: BuchiProgram size
    11434 locations, 20718 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 53 terminating modules (53 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.53 modules have a trivial ranking function, the largest among these consists of 85 locations. The remainder module has 21583 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 661.3s and 54 iterations.  TraceHistogramMax:8. Analysis of lassos took 67.4s. Construction of modules took 474.5s. BÃ¼chi inclusion checks took 100.3s. Highest rank in rank-based complementation 0. Minimization of det autom 53. Minimization of nondet autom 0. Automata minimization 9.4s AutomataMinimizationTime, 53 MinimizatonAttempts, 26686 StatesRemovedByMinimization, 39 NontrivialMinimizations. Non-live state removal took 6.9s Buchi closure took 0.1s. Biggest automaton had 22848 states and ocurred in iteration 21.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 363620 SDtfs, 336831 SDslu, 1188845 SDs, 0 SdLazy, 2263285 SolverSat, 63978 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 474.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc1 concLT0 SILN0 SILU52 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000000022) = (new BLY)({from : 1000000000000000000000000002});
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
BLY(1000000000000000000000000022).freezeAccount~address.gas(3979002)({from : 1000000000000000000000000002, holder : 1000000000000000000000000026});
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
BLY(1000000000000000000000000022).transfer~address~uint256.gas(3979003)({from : 1000000000000000000000000026, to : 1000000000000000000000000026, value : 0});
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s1288 && value_s1288 <= _balances_HxERC20[this][msgsender_MSG]) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_BLY0 := true;
[L2]                 call_transfer_BLY0 := false;
[L2]                 revert := revert_hold;
[L3182]              havoc __exception;
[L3183]              revert := false;
[L3184]   COND TRUE  __exception
[L3185]              __tmp__Balance := Balance;
[L3186]              __tmp__DType := DType;
[L3187]              __tmp__Alloc := Alloc;
[L3188]              __tmp__balance_ADDR := balance_ADDR;
[L3189]              __tmp__M_Ref_bool := M_Ref_bool;
[L3190]              __tmp__sum := sum;
[L3191]              __tmp__M_Ref_int := M_Ref_int;
[L3192]              __tmp__sum__balances0 := sum__balances0;
[L3193]              __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3194]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L3195]              __tmp__sum__allowed1 := sum__allowed1;
[L3196]              __tmp__M_int_Ref := M_int_Ref;
[L3197]              __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3198]              __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3199]              __tmp__Length := Length;
[L3200]              __tmp__now := now;
[L3201]              __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3202]              __tmp__owner_HxOwnable := owner_HxOwnable;
[L3203]              __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3204]              __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3205]              __tmp___paused_Pausable := _paused_Pausable;
[L3206]              __tmp___balances_HxERC20 := _balances_HxERC20;
[L3207]              __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3208]              __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3209]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3210]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3211]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3212]              __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3213]              __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3214]              __tmp__implementation_BLY := implementation_BLY;
[L3215]              __tmp__timelockList_BLY := timelockList_BLY;
[L3216]              __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3217]   CALL       call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7522]   CALL       call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10774]  COND TRUE  !!__tmp__frozenAccount_BLY[this][_holder_s1185]
[L10775]             revert := true;
[L7522]   RET        call notFrozen_pre__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7523]   COND TRUE  revert
[L3217]   RET        call __ret_0_ := transfer~address~uint256_BLY__fail(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3218]              assume revert || gas < 0;
[L12054]  RET        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

Loop:
HxOwnable(1000000000000000000000000022).transferOwnership~address.gas(3979001)({from : 1000000000000000000000000019, _newOwner : 1000000000000000000000000016});
[L452]               havoc __exception;
[L453]               revert := false;
[L454]    COND TRUE  __exception
[L455]               __tmp__Balance := Balance;
[L456]               __tmp__DType := DType;
[L457]               __tmp__Alloc := Alloc;
[L458]               __tmp__balance_ADDR := balance_ADDR;
[L459]               __tmp__M_Ref_bool := M_Ref_bool;
[L460]               __tmp__sum := sum;
[L461]               __tmp__M_Ref_int := M_Ref_int;
[L462]               __tmp__sum__balances0 := sum__balances0;
[L463]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L464]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L465]               __tmp__sum__allowed1 := sum__allowed1;
[L466]               __tmp__M_int_Ref := M_int_Ref;
[L467]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L468]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L469]               __tmp__Length := Length;
[L470]               __tmp__now := now;
[L471]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L472]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L473]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L474]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L475]               __tmp___paused_Pausable := _paused_Pausable;
[L476]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L477]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L478]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L479]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L480]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L481]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L482]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L483]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L484]               __tmp__implementation_BLY := implementation_BLY;
[L485]               __tmp__timelockList_BLY := timelockList_BLY;
[L486]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L487]    CALL       call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L5888]   CALL       call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L10586]  COND TRUE  !(msgsender_MSG == __tmp__owner_HxOwnable[this])
[L10587]             revert := true;
[L5888]   RET        call onlyOwner_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L5889]   COND TRUE  revert
[L487]    RET        call transferOwnership~address_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);
[L488]               assume revert || gas < 0;
[L11999]  RET        call transferOwnership~address_HxOwnable(this, msgsender_MSG, msgvalue_MSG, _newOwner_s313);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
