This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:17:22,908 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:17:22,909 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:17:22,919 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:17:22,920 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:17:22,920 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:17:22,921 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:17:22,923 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:17:22,924 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:17:22,925 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:17:22,925 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:17:22,926 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:17:22,926 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:17:22,927 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:17:22,928 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:17:22,928 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:17:22,929 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:17:22,930 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:17:22,931 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:17:22,932 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:17:22,933 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:17:22,934 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:17:22,935 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:17:22,936 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:17:22,936 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:17:22,936 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:17:22,937 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:17:22,937 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:17:22,937 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:17:22,938 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:17:22,938 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:17:22,939 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:17:22,939 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:17:22,940 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:17:22,940 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:17:22,940 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:17:22,941 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:17:22,941 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:17:22,941 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:17:22,942 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:17:22,942 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:17:22,942 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:17:22,950 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:17:22,950 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:17:22,951 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:17:22,951 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:17:22,951 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:17:22,951 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:17:22,951 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:17:22,951 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:17:22,952 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:17:22,952 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:17:22,952 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:17:22,953 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:17:22,953 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:17:22,953 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:17:22,953 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:17:22,953 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:17:22,953 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:17:22,953 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:17:22,953 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:17:22,977 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:17:22,990 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:17:22,993 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:17:22,994 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:17:22,994 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:17:22,995 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl
[2020-11-25 14:17:22,995 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl'
[2020-11-25 14:17:23,099 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:17:23,100 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:17:23,100 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:17:23,100 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:17:23,101 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:17:23,117 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,119 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,155 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,156 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,184 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,198 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,210 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,225 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:17:23,225 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:17:23,225 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:17:23,227 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:17:23,231 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/1) ...
[2020-11-25 14:17:23,252 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DkargoToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:17:23,257 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DkargoToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:17:23,264 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DkargoToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:17:23,274 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s1311!=to_s1311 && ( ( value_s1311>_balances_ERC20[this][from_s1311] || value_s1311>_allowances_ERC20[this][from_s1311][msg.sender] ) || ( _balances_ERC20[this][to_s1311] + value_s1311 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s1311>=0 ) && value_s1311<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1311]>=0 ) && _balances_ERC20[this][to_s1311]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s1311]>=0 ) && _balances_ERC20[this][from_s1311]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s1311][msg.sender]>=0 ) && _allowances_ERC20[this][from_s1311][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]],BinaryExpression[LOGICOR,BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:17:23,281 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DkargoToken.transferFrom(from, to, value), from != to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender] || _balances_ERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:17:23,281 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_DkargoToken0) ==> ( <>AP(fail_transferFrom_DkargoToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:17:23,299 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:17:23 PropertyContainer
[2020-11-25 14:17:23,300 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:17:23,300 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:17:23,300 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:17:23,301 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:17:23,302 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/2) ...
[2020-11-25 14:17:23,303 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:17:23,303 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:17:23,323 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:17:23" (2/2) ...
[2020-11-25 14:17:23,323 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:17:23,323 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:17:23,323 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:17:23,323 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:17:23,324 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/2) ...
[2020-11-25 14:17:23,377 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:17:23,377 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:17:23,377 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:17:23,378 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:17:23,378 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:17:23,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:17:23,378 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:17:23,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:17:23,378 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:17:23,378 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:17:23,378 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 14:17:23,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 14:17:23,379 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 14:17:23,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 14:17:23,379 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 14:17:23,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 14:17:23,379 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 14:17:23,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 14:17:23,379 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:17:23,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 14:17:23,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 14:17:23,380 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 14:17:23,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 14:17:23,381 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 14:17:23,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 14:17:23,381 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 14:17:23,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 14:17:23,381 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 14:17:23,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 14:17:23,381 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 14:17:23,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 14:17:23,381 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 14:17:23,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 14:17:23,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 14:17:23,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 14:17:23,382 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:17:23,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 14:17:23,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 14:17:23,383 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 14:17:23,384 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 14:17:23,384 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:17:23,384 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 14:17:23,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 14:17:23,384 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 14:17:23,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 14:17:23,384 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 14:17:23,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 14:17:23,384 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:17:23,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:17:23,385 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 14:17:23,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 14:17:23,385 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 14:17:23,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 14:17:23,385 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 14:17:23,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 14:17:23,385 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:17:23,385 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:17:23,385 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:17:23,385 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:17:23,386 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:17:23,386 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:17:23,386 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:17:23,386 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 14:17:23,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 14:17:23,387 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 14:17:23,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 14:17:23,387 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:17:23,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:17:23,387 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:17:23,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:17:23,387 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 14:17:23,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 14:17:23,387 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 14:17:23,387 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 14:17:23,388 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 14:17:23,388 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 14:17:23,389 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:17:23,390 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:17:23,391 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,392 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 14:17:23,393 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:17:23,394 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 14:17:23,395 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:17:23,396 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:17:23,397 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 14:17:23,398 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 14:17:23,399 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 14:17:23,399 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:17:23,399 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:17:23,399 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:17:23,399 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:17:23,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:17:23,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:17:23,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:17:23,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:17:23,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:17:23,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:17:23,399 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 14:17:23,400 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:17:23,401 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 14:17:23,402 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 14:17:23,403 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 14:17:23,404 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 14:17:23,405 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:17:23,406 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:17:23,407 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:17:23,408 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:17:23,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 14:17:23,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:17:23,411 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:17:23,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:17:23,809 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:17:23,809 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:17:24,450 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:17:24,450 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 14:17:24,456 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:17:24 BoogieIcfgContainer
[2020-11-25 14:17:24,456 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:17:23" (2/2) ...
[2020-11-25 14:17:24,456 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:17:24,456 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@64938f30 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:17:24, skipping insertion in model container
[2020-11-25 14:17:24,456 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:17:24,456 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:17:24,456 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:17:24,458 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:17:24,458 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/3) ...
[2020-11-25 14:17:24,458 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1f29d336 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:17:24, skipping insertion in model container
[2020-11-25 14:17:24,458 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:17:23" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:17:24,492 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:17:24 NWAContainer
[2020-11-25 14:17:24,492 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:17:24,492 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:17:24,492 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:17:24,493 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:17:24,494 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:17:24" (3/4) ...
[2020-11-25 14:17:24,494 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@719fddfe and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:17:24, skipping insertion in model container
[2020-11-25 14:17:24,495 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:17:24" (4/4) ...
[2020-11-25 14:17:24,497 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:17:24,503 INFO  L110   BuchiProductObserver]: Initial RCFG 3093 locations, 4210 edges
[2020-11-25 14:17:24,503 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:17:24,516 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:17:26,914 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:17:26,924 INFO  L110   BuchiProductObserver]: BuchiProgram size 7632 locations, 13663 edges
[2020-11-25 14:17:26,924 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:17:26 BoogieIcfgContainer
[2020-11-25 14:17:26,924 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:17:26,925 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:17:26,925 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:17:26,926 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:17:26,926 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:17:26" (1/1) ...
[2020-11-25 14:17:27,057 INFO  L313           BlockEncoder]: Initial Icfg 7632 locations, 13663 edges
[2020-11-25 14:17:27,058 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:17:27,058 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:17:27,058 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:17:27,059 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:17:27,075 INFO  L70    emoveInfeasibleEdges]: Removed 288 edges and 23 locations because of local infeasibility
[2020-11-25 14:17:27,091 INFO  L70        RemoveSinkStates]: Removed 262 edges and 164 locations by removing sink states
[2020-11-25 14:17:27,107 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:17:27,112 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:17:27,117 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:17:27,117 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:17:27,122 INFO  L313           BlockEncoder]: Encoded RCFG 7409 locations, 13060 edges
[2020-11-25 14:17:27,122 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:17:27 BasicIcfg
[2020-11-25 14:17:27,122 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:17:27,123 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:17:27,123 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:17:27,124 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:17:27,125 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:17:27,125 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:17:23" (1/6) ...
[2020-11-25 14:17:27,126 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@33f94224 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:17:27, skipping insertion in model container
[2020-11-25 14:17:27,126 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:17:27,126 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:17:23" (2/6) ...
[2020-11-25 14:17:27,126 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@33f94224 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:17:27, skipping insertion in model container
[2020-11-25 14:17:27,127 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:17:27,127 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:17:24" (3/6) ...
[2020-11-25 14:17:27,127 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@33f94224 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:17:27, skipping insertion in model container
[2020-11-25 14:17:27,127 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:17:27,127 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:17:24" (4/6) ...
[2020-11-25 14:17:27,128 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@33f94224 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:17:27, skipping insertion in model container
[2020-11-25 14:17:27,128 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:17:27,128 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:17:26" (5/6) ...
[2020-11-25 14:17:27,128 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@33f94224 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:17:27, skipping insertion in model container
[2020-11-25 14:17:27,128 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:17:27,129 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:17:27" (6/6) ...
[2020-11-25 14:17:27,130 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-fail.bpl_BEv2
[2020-11-25 14:17:27,163 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:17:27,163 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:17:27,163 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:17:27,163 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:17:27,163 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:17:27,163 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:17:27,163 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:17:27,164 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:17:27,164 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:17:27,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7409 states.
[2020-11-25 14:17:27,287 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:27,287 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:27,287 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:27,295 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:27,295 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:27,295 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:17:27,295 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7409 states.
[2020-11-25 14:17:27,325 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:27,326 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:27,326 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:27,327 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:27,327 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:27,341 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:27,341 INFO  L82        PathProgramCache]: Analyzing trace with hash 719126576, now seen corresponding path program 1 times
[2020-11-25 14:17:27,347 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:27,366 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:27,413 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:17:27,415 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:27,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:17:27,779 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:27,791 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:17:27,792 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:17:27,793 INFO  L87              Difference]: Start difference. First operand 7409 states. Second operand 4 states.
[2020-11-25 14:17:28,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:28,556 INFO  L93              Difference]: Finished difference Result 4623 states and 5386 transitions.
[2020-11-25 14:17:28,557 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:17:28,558 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4623 states and 5386 transitions.
[2020-11-25 14:17:28,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:28,612 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4623 states to 4623 states and 5386 transitions.
[2020-11-25 14:17:28,613 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 14:17:28,615 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1041
[2020-11-25 14:17:28,616 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4623 states and 5386 transitions.
[2020-11-25 14:17:28,626 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:28,626 INFO  L728         BuchiCegarLoop]: Abstraction has 4623 states and 5386 transitions.
[2020-11-25 14:17:28,644 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4623 states and 5386 transitions.
[2020-11-25 14:17:28,712 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4623 to 4623.
[2020-11-25 14:17:28,712 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4623 states.
[2020-11-25 14:17:28,719 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4623 states to 4623 states and 5386 transitions.
[2020-11-25 14:17:28,720 INFO  L751         BuchiCegarLoop]: Abstraction has 4623 states and 5386 transitions.
[2020-11-25 14:17:28,720 INFO  L631         BuchiCegarLoop]: Abstraction has 4623 states and 5386 transitions.
[2020-11-25 14:17:28,720 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:17:28,720 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4623 states and 5386 transitions.
[2020-11-25 14:17:28,730 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:28,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:28,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:28,733 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:28,733 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:28,739 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:28,739 INFO  L82        PathProgramCache]: Analyzing trace with hash -2114083457, now seen corresponding path program 1 times
[2020-11-25 14:17:28,741 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:28,755 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:28,785 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:17:28,785 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:28,785 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:17:28,786 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:28,786 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:17:28,786 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:17:28,787 INFO  L87              Difference]: Start difference. First operand 4623 states and 5386 transitions. cyclomatic complexity: 765 Second operand 3 states.
[2020-11-25 14:17:28,906 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:28,906 INFO  L93              Difference]: Finished difference Result 5750 states and 6664 transitions.
[2020-11-25 14:17:28,906 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:17:28,907 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5750 states and 6664 transitions.
[2020-11-25 14:17:28,924 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:28,947 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5750 states to 5750 states and 6664 transitions.
[2020-11-25 14:17:28,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1304
[2020-11-25 14:17:28,948 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1304
[2020-11-25 14:17:28,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5750 states and 6664 transitions.
[2020-11-25 14:17:28,957 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:28,957 INFO  L728         BuchiCegarLoop]: Abstraction has 5750 states and 6664 transitions.
[2020-11-25 14:17:28,964 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5750 states and 6664 transitions.
[2020-11-25 14:17:29,013 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5750 to 5249.
[2020-11-25 14:17:29,013 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5249 states.
[2020-11-25 14:17:29,021 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5249 states to 5249 states and 6054 transitions.
[2020-11-25 14:17:29,021 INFO  L751         BuchiCegarLoop]: Abstraction has 5249 states and 6054 transitions.
[2020-11-25 14:17:29,021 INFO  L631         BuchiCegarLoop]: Abstraction has 5249 states and 6054 transitions.
[2020-11-25 14:17:29,021 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:17:29,021 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5249 states and 6054 transitions.
[2020-11-25 14:17:29,028 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:29,028 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:29,028 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:29,030 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:29,030 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND TRUE   !(account_s999 != null)
[L5284]              revert := true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:29,033 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:29,033 INFO  L82        PathProgramCache]: Analyzing trace with hash 1647543297, now seen corresponding path program 1 times
[2020-11-25 14:17:29,034 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:29,042 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:29,085 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:17:29,085 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:29,085 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:17:29,085 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:29,085 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:17:29,085 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:17:29,086 INFO  L87              Difference]: Start difference. First operand 5249 states and 6054 transitions. cyclomatic complexity: 807 Second operand 8 states.
[2020-11-25 14:17:29,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:29,182 INFO  L93              Difference]: Finished difference Result 5269 states and 6078 transitions.
[2020-11-25 14:17:29,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:17:29,183 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5269 states and 6078 transitions.
[2020-11-25 14:17:29,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:29,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5269 states to 5248 states and 6052 transitions.
[2020-11-25 14:17:29,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1200
[2020-11-25 14:17:29,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1200
[2020-11-25 14:17:29,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5248 states and 6052 transitions.
[2020-11-25 14:17:29,224 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:29,224 INFO  L728         BuchiCegarLoop]: Abstraction has 5248 states and 6052 transitions.
[2020-11-25 14:17:29,229 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5248 states and 6052 transitions.
[2020-11-25 14:17:29,277 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5248 to 5248.
[2020-11-25 14:17:29,278 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5248 states.
[2020-11-25 14:17:29,285 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5248 states to 5248 states and 6052 transitions.
[2020-11-25 14:17:29,285 INFO  L751         BuchiCegarLoop]: Abstraction has 5248 states and 6052 transitions.
[2020-11-25 14:17:29,285 INFO  L631         BuchiCegarLoop]: Abstraction has 5248 states and 6052 transitions.
[2020-11-25 14:17:29,285 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:17:29,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5248 states and 6052 transitions.
[2020-11-25 14:17:29,295 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:29,295 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:29,295 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:29,297 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:29,297 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND TRUE   !(c_s130 >= a_s130)
[L4214]              revert := true;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND TRUE   revert
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:29,301 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:29,301 INFO  L82        PathProgramCache]: Analyzing trace with hash 1946526543, now seen corresponding path program 1 times
[2020-11-25 14:17:29,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:29,313 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:29,379 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:17:29,380 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:29,380 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:17:29,380 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:29,380 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:17:29,380 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:17:29,380 INFO  L87              Difference]: Start difference. First operand 5248 states and 6052 transitions. cyclomatic complexity: 806 Second operand 3 states.
[2020-11-25 14:17:29,471 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:29,472 INFO  L93              Difference]: Finished difference Result 5750 states and 6490 transitions.
[2020-11-25 14:17:29,472 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:17:29,473 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5750 states and 6490 transitions.
[2020-11-25 14:17:29,490 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:29,510 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5750 states to 5383 states and 6046 transitions.
[2020-11-25 14:17:29,510 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1232
[2020-11-25 14:17:29,511 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1266
[2020-11-25 14:17:29,511 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5383 states and 6046 transitions.
[2020-11-25 14:17:29,518 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:29,518 INFO  L728         BuchiCegarLoop]: Abstraction has 5383 states and 6046 transitions.
[2020-11-25 14:17:29,522 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5383 states and 6046 transitions.
[2020-11-25 14:17:29,558 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5383 to 4953.
[2020-11-25 14:17:29,558 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4953 states.
[2020-11-25 14:17:29,563 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4953 states to 4953 states and 5507 transitions.
[2020-11-25 14:17:29,564 INFO  L751         BuchiCegarLoop]: Abstraction has 4953 states and 5507 transitions.
[2020-11-25 14:17:29,564 INFO  L631         BuchiCegarLoop]: Abstraction has 4953 states and 5507 transitions.
[2020-11-25 14:17:29,564 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:17:29,564 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4953 states and 5507 transitions.
[2020-11-25 14:17:29,570 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:29,570 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:29,570 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:29,572 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:29,572 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND FALSE  !(DType[this] == DkargoToken)
[L5096]  COND TRUE   DType[this] == ERC20Safe
[L5097]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5097]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5098]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND FALSE  !(DType[this] == DkargoToken)
[L5096]  COND TRUE   DType[this] == ERC20Safe
[L5097]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5097]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5098]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:29,578 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:29,578 INFO  L82        PathProgramCache]: Analyzing trace with hash 905670896, now seen corresponding path program 1 times
[2020-11-25 14:17:29,579 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:29,598 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:29,680 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 14:17:29,680 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:29,680 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:17:29,680 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:29,681 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:17:29,681 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:17:29,681 INFO  L87              Difference]: Start difference. First operand 4953 states and 5507 transitions. cyclomatic complexity: 556 Second operand 4 states.
[2020-11-25 14:17:29,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:29,703 INFO  L93              Difference]: Finished difference Result 4967 states and 5535 transitions.
[2020-11-25 14:17:29,703 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:17:29,703 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4967 states and 5535 transitions.
[2020-11-25 14:17:29,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:29,723 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4967 states to 4957 states and 5523 transitions.
[2020-11-25 14:17:29,723 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1190
[2020-11-25 14:17:29,723 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 14:17:29,723 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4957 states and 5523 transitions.
[2020-11-25 14:17:29,727 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:29,728 INFO  L728         BuchiCegarLoop]: Abstraction has 4957 states and 5523 transitions.
[2020-11-25 14:17:29,732 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4957 states and 5523 transitions.
[2020-11-25 14:17:29,757 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4957 to 4957.
[2020-11-25 14:17:29,757 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4957 states.
[2020-11-25 14:17:29,761 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4957 states to 4957 states and 5523 transitions.
[2020-11-25 14:17:29,761 INFO  L751         BuchiCegarLoop]: Abstraction has 4957 states and 5523 transitions.
[2020-11-25 14:17:29,761 INFO  L631         BuchiCegarLoop]: Abstraction has 4957 states and 5523 transitions.
[2020-11-25 14:17:29,762 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:17:29,762 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4957 states and 5523 transitions.
[2020-11-25 14:17:29,767 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:29,767 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:29,767 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:29,769 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:29,769 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:29,774 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:29,775 INFO  L82        PathProgramCache]: Analyzing trace with hash 1161578351, now seen corresponding path program 1 times
[2020-11-25 14:17:29,775 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:29,794 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:29,906 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 14:17:29,906 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:29,906 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 14:17:29,907 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:29,907 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 14:17:29,907 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 14:17:29,907 INFO  L87              Difference]: Start difference. First operand 4957 states and 5523 transitions. cyclomatic complexity: 568 Second operand 6 states.
[2020-11-25 14:17:30,001 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:30,001 INFO  L93              Difference]: Finished difference Result 5092 states and 5686 transitions.
[2020-11-25 14:17:30,001 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:17:30,002 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5092 states and 5686 transitions.
[2020-11-25 14:17:30,012 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:30,027 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5092 states to 5092 states and 5686 transitions.
[2020-11-25 14:17:30,027 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1206
[2020-11-25 14:17:30,028 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1206
[2020-11-25 14:17:30,028 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5092 states and 5686 transitions.
[2020-11-25 14:17:30,032 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:30,032 INFO  L728         BuchiCegarLoop]: Abstraction has 5092 states and 5686 transitions.
[2020-11-25 14:17:30,036 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5092 states and 5686 transitions.
[2020-11-25 14:17:30,069 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5092 to 5017.
[2020-11-25 14:17:30,069 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5017 states.
[2020-11-25 14:17:30,074 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5017 states to 5017 states and 5600 transitions.
[2020-11-25 14:17:30,074 INFO  L751         BuchiCegarLoop]: Abstraction has 5017 states and 5600 transitions.
[2020-11-25 14:17:30,074 INFO  L631         BuchiCegarLoop]: Abstraction has 5017 states and 5600 transitions.
[2020-11-25 14:17:30,074 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:17:30,074 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5017 states and 5600 transitions.
[2020-11-25 14:17:30,079 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:30,079 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:30,079 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:30,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:30,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:30,087 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:30,087 INFO  L82        PathProgramCache]: Analyzing trace with hash 2059251708, now seen corresponding path program 1 times
[2020-11-25 14:17:30,088 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:30,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:30,667 INFO  L134       CoverageAnalysis]: Checked inductivity of 76 backedges. 4 proven. 2 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 14:17:30,668 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:17:30,668 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 14:17:30,668 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:30,668 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 14:17:30,669 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=640, Unknown=0, NotChecked=0, Total=702
[2020-11-25 14:17:30,669 INFO  L87              Difference]: Start difference. First operand 5017 states and 5600 transitions. cyclomatic complexity: 585 Second operand 27 states.
[2020-11-25 14:17:39,188 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:39,188 INFO  L93              Difference]: Finished difference Result 5319 states and 6006 transitions.
[2020-11-25 14:17:39,188 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 14:17:39,188 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5319 states and 6006 transitions.
[2020-11-25 14:17:39,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:17:39,210 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5319 states to 5319 states and 6006 transitions.
[2020-11-25 14:17:39,210 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1252
[2020-11-25 14:17:39,211 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1252
[2020-11-25 14:17:39,211 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5319 states and 6006 transitions.
[2020-11-25 14:17:39,215 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:39,215 INFO  L728         BuchiCegarLoop]: Abstraction has 5319 states and 6006 transitions.
[2020-11-25 14:17:39,220 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5319 states and 6006 transitions.
[2020-11-25 14:17:39,250 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5319 to 4918.
[2020-11-25 14:17:39,250 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4918 states.
[2020-11-25 14:17:39,255 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4918 states to 4918 states and 5472 transitions.
[2020-11-25 14:17:39,255 INFO  L751         BuchiCegarLoop]: Abstraction has 4918 states and 5472 transitions.
[2020-11-25 14:17:39,255 INFO  L631         BuchiCegarLoop]: Abstraction has 4918 states and 5472 transitions.
[2020-11-25 14:17:39,255 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:17:39,255 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4918 states and 5472 transitions.
[2020-11-25 14:17:39,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:39,260 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:39,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:39,262 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:39,262 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND FALSE  !(DType[this] == DkargoToken)
[L5096]  COND TRUE   DType[this] == ERC20Safe
[L5097]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5097]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5098]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND FALSE  !(DType[this] == DkargoToken)
[L5096]  COND TRUE   DType[this] == ERC20Safe
[L5097]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5097]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5098]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:39,267 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:39,267 INFO  L82        PathProgramCache]: Analyzing trace with hash 1399749607, now seen corresponding path program 1 times
[2020-11-25 14:17:39,268 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:39,283 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:39,397 INFO  L134       CoverageAnalysis]: Checked inductivity of 76 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 76 trivial. 0 not checked.
[2020-11-25 14:17:39,397 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:39,397 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:17:39,398 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:39,398 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:17:39,398 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:17:39,398 INFO  L87              Difference]: Start difference. First operand 4918 states and 5472 transitions. cyclomatic complexity: 557 Second operand 3 states.
[2020-11-25 14:17:39,439 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:39,439 INFO  L93              Difference]: Finished difference Result 4932 states and 5488 transitions.
[2020-11-25 14:17:39,439 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:17:39,439 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4932 states and 5488 transitions.
[2020-11-25 14:17:39,447 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:39,456 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4932 states to 4932 states and 5488 transitions.
[2020-11-25 14:17:39,456 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1135
[2020-11-25 14:17:39,457 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1135
[2020-11-25 14:17:39,457 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4932 states and 5488 transitions.
[2020-11-25 14:17:39,460 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:39,460 INFO  L728         BuchiCegarLoop]: Abstraction has 4932 states and 5488 transitions.
[2020-11-25 14:17:39,464 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4932 states and 5488 transitions.
[2020-11-25 14:17:39,489 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4932 to 4926.
[2020-11-25 14:17:39,489 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4926 states.
[2020-11-25 14:17:39,494 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4926 states to 4926 states and 5482 transitions.
[2020-11-25 14:17:39,494 INFO  L751         BuchiCegarLoop]: Abstraction has 4926 states and 5482 transitions.
[2020-11-25 14:17:39,494 INFO  L631         BuchiCegarLoop]: Abstraction has 4926 states and 5482 transitions.
[2020-11-25 14:17:39,494 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:17:39,494 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4926 states and 5482 transitions.
[2020-11-25 14:17:39,499 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:39,499 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:39,499 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:39,500 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:39,501 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:39,505 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:39,505 INFO  L82        PathProgramCache]: Analyzing trace with hash -1261755396, now seen corresponding path program 2 times
[2020-11-25 14:17:39,506 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:39,522 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:39,691 INFO  L134       CoverageAnalysis]: Checked inductivity of 76 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-11-25 14:17:39,691 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:39,691 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 14:17:39,691 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:39,692 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 14:17:39,692 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-25 14:17:39,692 INFO  L87              Difference]: Start difference. First operand 4926 states and 5482 transitions. cyclomatic complexity: 559 Second operand 15 states.
[2020-11-25 14:17:42,927 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:42,927 INFO  L93              Difference]: Finished difference Result 4992 states and 5559 transitions.
[2020-11-25 14:17:42,927 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 14:17:42,927 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4992 states and 5559 transitions.
[2020-11-25 14:17:42,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:42,947 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4992 states to 4992 states and 5559 transitions.
[2020-11-25 14:17:42,947 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1149
[2020-11-25 14:17:42,947 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1149
[2020-11-25 14:17:42,948 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4992 states and 5559 transitions.
[2020-11-25 14:17:42,950 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:42,950 INFO  L728         BuchiCegarLoop]: Abstraction has 4992 states and 5559 transitions.
[2020-11-25 14:17:42,954 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4992 states and 5559 transitions.
[2020-11-25 14:17:42,976 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4992 to 4874.
[2020-11-25 14:17:42,976 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4874 states.
[2020-11-25 14:17:42,981 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4874 states to 4874 states and 5413 transitions.
[2020-11-25 14:17:42,981 INFO  L751         BuchiCegarLoop]: Abstraction has 4874 states and 5413 transitions.
[2020-11-25 14:17:42,981 INFO  L631         BuchiCegarLoop]: Abstraction has 4874 states and 5413 transitions.
[2020-11-25 14:17:42,981 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:17:42,981 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4874 states and 5413 transitions.
[2020-11-25 14:17:42,986 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:42,986 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:42,986 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:42,988 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:42,988 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND TRUE   choice == 11
[L8359]              gas := gas - 21000;
[L8360]  COND TRUE   gas >= 0
[L8361]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8362]              assume msgvalue_MSG == 0;
[L8363]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2145]              havoc __exception;
[L2146]              revert := false;
[L2147]  COND FALSE  !(__exception)
[L2180]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5435]  COND TRUE   DType[this] == DkargoToken
[L5436]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5145]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5436]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5437]  COND FALSE  !(revert)
[L5448]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5452]  COND TRUE   DType[this] == DkargoToken
[L5453]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4949]  COND TRUE   DType[this] == DkargoToken
[L4950]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L4950]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4951]  COND FALSE  !(revert)
[L4967]              __ret_0_ := true;
[L5453]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5454]  COND FALSE  !(revert)
[L5465]              __ret_0_ := __var_31;
[L2180]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2181]              assume !revert && gas >= 0;
[L8363]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:42,993 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:42,993 INFO  L82        PathProgramCache]: Analyzing trace with hash -641173868, now seen corresponding path program 1 times
[2020-11-25 14:17:42,994 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:43,015 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:43,820 INFO  L134       CoverageAnalysis]: Checked inductivity of 156 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 154 trivial. 0 not checked.
[2020-11-25 14:17:43,820 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:17:43,820 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 14:17:43,820 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:43,821 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 14:17:43,821 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=79, Invalid=791, Unknown=0, NotChecked=0, Total=870
[2020-11-25 14:17:43,821 INFO  L87              Difference]: Start difference. First operand 4874 states and 5413 transitions. cyclomatic complexity: 542 Second operand 30 states.
[2020-11-25 14:17:55,251 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:17:55,251 INFO  L93              Difference]: Finished difference Result 5108 states and 5726 transitions.
[2020-11-25 14:17:55,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 14:17:55,252 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5108 states and 5726 transitions.
[2020-11-25 14:17:55,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:55,271 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5108 states to 5108 states and 5726 transitions.
[2020-11-25 14:17:55,271 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1164
[2020-11-25 14:17:55,271 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1164
[2020-11-25 14:17:55,271 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5108 states and 5726 transitions.
[2020-11-25 14:17:55,274 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:17:55,274 INFO  L728         BuchiCegarLoop]: Abstraction has 5108 states and 5726 transitions.
[2020-11-25 14:17:55,278 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5108 states and 5726 transitions.
[2020-11-25 14:17:55,302 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5108 to 4942.
[2020-11-25 14:17:55,303 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4942 states.
[2020-11-25 14:17:55,308 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4942 states to 4942 states and 5509 transitions.
[2020-11-25 14:17:55,308 INFO  L751         BuchiCegarLoop]: Abstraction has 4942 states and 5509 transitions.
[2020-11-25 14:17:55,308 INFO  L631         BuchiCegarLoop]: Abstraction has 4942 states and 5509 transitions.
[2020-11-25 14:17:55,308 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:17:55,308 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4942 states and 5509 transitions.
[2020-11-25 14:17:55,313 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:17:55,313 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:17:55,313 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:17:55,316 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:17:55,316 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND TRUE   choice == 11
[L8359]              gas := gas - 21000;
[L8360]  COND TRUE   gas >= 0
[L8361]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8362]              assume msgvalue_MSG == 0;
[L8363]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2145]              havoc __exception;
[L2146]              revert := false;
[L2147]  COND FALSE  !(__exception)
[L2180]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5435]  COND TRUE   DType[this] == DkargoToken
[L5436]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5145]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5436]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5437]  COND FALSE  !(revert)
[L5448]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5452]  COND TRUE   DType[this] == DkargoToken
[L5453]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4949]  COND TRUE   DType[this] == DkargoToken
[L4950]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L4950]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4951]  COND FALSE  !(revert)
[L4967]              __ret_0_ := true;
[L5453]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5454]  COND FALSE  !(revert)
[L5465]              __ret_0_ := __var_31;
[L2180]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2181]              assume !revert && gas >= 0;
[L8363]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:17:55,321 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:17:55,321 INFO  L82        PathProgramCache]: Analyzing trace with hash 332786324, now seen corresponding path program 2 times
[2020-11-25 14:17:55,322 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:17:55,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:17:55,803 INFO  L134       CoverageAnalysis]: Checked inductivity of 156 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 150 trivial. 0 not checked.
[2020-11-25 14:17:55,803 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:17:55,803 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [28] imperfect sequences [] total 28
[2020-11-25 14:17:55,803 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:17:55,804 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 14:17:55,804 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=740, Unknown=0, NotChecked=0, Total=812
[2020-11-25 14:17:55,804 INFO  L87              Difference]: Start difference. First operand 4942 states and 5509 transitions. cyclomatic complexity: 572 Second operand 29 states.
[2020-11-25 14:18:05,869 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:05,869 INFO  L93              Difference]: Finished difference Result 5204 states and 5854 transitions.
[2020-11-25 14:18:05,869 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 14:18:05,869 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5204 states and 5854 transitions.
[2020-11-25 14:18:05,878 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:05,889 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5204 states to 5204 states and 5854 transitions.
[2020-11-25 14:18:05,889 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1194
[2020-11-25 14:18:05,889 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1194
[2020-11-25 14:18:05,889 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5204 states and 5854 transitions.
[2020-11-25 14:18:05,892 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:05,892 INFO  L728         BuchiCegarLoop]: Abstraction has 5204 states and 5854 transitions.
[2020-11-25 14:18:05,896 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5204 states and 5854 transitions.
[2020-11-25 14:18:05,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5204 to 4984.
[2020-11-25 14:18:05,919 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4984 states.
[2020-11-25 14:18:05,924 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4984 states to 4984 states and 5565 transitions.
[2020-11-25 14:18:05,924 INFO  L751         BuchiCegarLoop]: Abstraction has 4984 states and 5565 transitions.
[2020-11-25 14:18:05,924 INFO  L631         BuchiCegarLoop]: Abstraction has 4984 states and 5565 transitions.
[2020-11-25 14:18:05,924 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 14:18:05,924 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4984 states and 5565 transitions.
[2020-11-25 14:18:05,929 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:05,929 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:05,929 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:05,931 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:05,931 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND TRUE   choice == 11
[L8359]              gas := gas - 21000;
[L8360]  COND TRUE   gas >= 0
[L8361]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8362]              assume msgvalue_MSG == 0;
[L8363]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2145]              havoc __exception;
[L2146]              revert := false;
[L2147]  COND FALSE  !(__exception)
[L2180]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5435]  COND TRUE   DType[this] == DkargoToken
[L5436]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5145]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5436]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5437]  COND FALSE  !(revert)
[L5448]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5452]  COND TRUE   DType[this] == DkargoToken
[L5453]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4949]  COND TRUE   DType[this] == DkargoToken
[L4950]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L4950]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4951]  COND FALSE  !(revert)
[L4967]              __ret_0_ := true;
[L5453]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5454]  COND FALSE  !(revert)
[L5465]              __ret_0_ := __var_31;
[L2180]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2181]              assume !revert && gas >= 0;
[L8363]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:05,936 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:05,936 INFO  L82        PathProgramCache]: Analyzing trace with hash 159063521, now seen corresponding path program 1 times
[2020-11-25 14:18:05,937 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:05,956 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:06,310 INFO  L134       CoverageAnalysis]: Checked inductivity of 159 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 159 trivial. 0 not checked.
[2020-11-25 14:18:06,310 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:18:06,310 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 14:18:06,311 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:06,311 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 14:18:06,311 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=52, Invalid=410, Unknown=0, NotChecked=0, Total=462
[2020-11-25 14:18:06,312 INFO  L87              Difference]: Start difference. First operand 4984 states and 5565 transitions. cyclomatic complexity: 586 Second operand 22 states.
[2020-11-25 14:18:13,486 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:13,487 INFO  L93              Difference]: Finished difference Result 5046 states and 5642 transitions.
[2020-11-25 14:18:13,487 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 14:18:13,487 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5046 states and 5642 transitions.
[2020-11-25 14:18:13,496 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:13,506 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5046 states to 5046 states and 5642 transitions.
[2020-11-25 14:18:13,506 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1155
[2020-11-25 14:18:13,507 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1155
[2020-11-25 14:18:13,507 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5046 states and 5642 transitions.
[2020-11-25 14:18:13,509 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:13,509 INFO  L728         BuchiCegarLoop]: Abstraction has 5046 states and 5642 transitions.
[2020-11-25 14:18:13,513 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5046 states and 5642 transitions.
[2020-11-25 14:18:13,564 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5046 to 4888.
[2020-11-25 14:18:13,564 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4888 states.
[2020-11-25 14:18:13,571 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4888 states to 4888 states and 5437 transitions.
[2020-11-25 14:18:13,571 INFO  L751         BuchiCegarLoop]: Abstraction has 4888 states and 5437 transitions.
[2020-11-25 14:18:13,571 INFO  L631         BuchiCegarLoop]: Abstraction has 4888 states and 5437 transitions.
[2020-11-25 14:18:13,571 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 14:18:13,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4888 states and 5437 transitions.
[2020-11-25 14:18:13,578 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:13,578 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:13,578 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:13,580 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:13,580 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND TRUE   __exception
[L2406]              __tmp__Balance := Balance;
[L2407]              __tmp__DType := DType;
[L2408]              __tmp__Alloc := Alloc;
[L2409]              __tmp__balance_ADDR := balance_ADDR;
[L2410]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2411]              __tmp__sum := sum;
[L2412]              __tmp__M_int_bool := M_int_bool;
[L2413]              __tmp__sum__infcs0 := sum__infcs0;
[L2414]              __tmp__M_Ref_int := M_Ref_int;
[L2415]              __tmp__sum__balances1 := sum__balances1;
[L2416]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2417]              __tmp__sum__allowances2 := sum__allowances2;
[L2418]              __tmp__Length := Length;
[L2419]              __tmp__now := now;
[L2420]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2421]              __tmp___owner_Ownership := _owner_Ownership;
[L2422]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2423]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2424]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2425]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2426]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2427]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2428]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2429]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2430]              __tmp___supply_ERC20 := _supply_ERC20;
[L2431]              __tmp___balances_ERC20 := _balances_ERC20;
[L2432]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2433]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2434]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2435]  CALL        call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5712]  CALL        call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L4096]  CALL        call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4076]              assume msgsender_MSG != null;
[L4077]              __tmp__Balance[this] := 0;
[L4078]              __tmp___owner_Ownership[this] := null;
[L4080]              __tmp___owner_Ownership[this] := msgsender_MSG;
[L4096]  RET         call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4097]  COND FALSE  !(revert)
[L5712]  RET         call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L5713]  COND FALSE  !(revert)
[L5716]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L5716]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5717]  COND FALSE  !(revert)
[L5720]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4900]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L4900]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]  COND FALSE  !(revert)
[L4904]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4835]              assume msgsender_MSG != null;
[L4836]              __tmp__Balance[this] := 0;
[L4837]              __tmp___supply_ERC20[this] := 0;
[L4838]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4839]              __tmp__sum__balances1[this] := 0;
[L4840]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4841]              __tmp__sum__allowances2[this] := 0;
[L4843]              pebs_s747 := supply_s747;
[L4844]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4845]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5258]              __var_24 := null;
[L5259]  COND FALSE  !(!(account_s999 != null))
[L5263]  CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5263]  RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L5264]  COND FALSE  !(revert)
[L5267]              __tmp___supply_ERC20[this] := __var_25;
[L5268]  CALL        call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L5268]  RET         call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L5269]  COND FALSE  !(revert)
[L5272]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][account_s999];
[L5273]              __tmp___balances_ERC20[this][account_s999] := __var_26;
[L5274]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][account_s999];
[L4845]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4846]  COND FALSE  !(revert)
[L4904]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4905]  COND FALSE  !(revert)
[L5720]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5721]  COND FALSE  !(revert)
[L5724]  CALL        call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5369]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4817]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4802]              assume msgsender_MSG != null;
[L4803]              __tmp__Balance[this] := 0;
[L4817]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  COND FALSE  !(revert)
[L5369]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5370]  COND FALSE  !(revert)
[L5373]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5354]              assume msgsender_MSG != null;
[L5355]              __tmp__Balance[this] := 0;
[L5373]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5374]  COND FALSE  !(revert)
[L5724]  RET         call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5725]  COND FALSE  !(revert)
[L5728]  CALL        call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L4353]  CALL        call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4325]              assume msgsender_MSG != null;
[L4326]              __tmp__Balance[this] := 0;
[L4328]  CALL        call __var_3 := FreshRefGenerator__fail();
[L3975]              havoc newRef;
[L3976]              assume __tmp__Alloc[newRef] == false;
[L3977]              __tmp__Alloc[newRef] := true;
[L3978]              assume newRef != null;
[L4328]  RET         call __var_3 := FreshRefGenerator__fail();
[L4329]  COND FALSE  !(revert)
[L4332]              __tmp___slist_AddressChain[this] := __var_3;
[L4353]  RET         call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4354]  COND FALSE  !(revert)
[L5728]  RET         call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L5729]  COND FALSE  !(revert)
[L5732]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4666]              assume msgsender_MSG != null;
[L4667]              __tmp__Balance[this] := 0;
[L4681]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  COND FALSE  !(revert)
[L5732]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5733]  COND FALSE  !(revert)
[L5736]  CALL        call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4746]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4681]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4666]              assume msgsender_MSG != null;
[L4667]              __tmp__Balance[this] := 0;
[L4681]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  COND FALSE  !(revert)
[L4746]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4747]  COND FALSE  !(revert)
[L4750]  CALL        call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4699]              assume msgsender_MSG != null;
[L4700]              __tmp__Balance[this] := 0;
[L4701]              __tmp___infcs_ERC165[this] := zerointboolArr();
[L4703]              __var_16 := 33540519;
[L4704]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4705]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4783]  COND FALSE  !(!(infcid_s644 != -1))
[L4787]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L4705]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4706]  COND FALSE  !(revert)
[L4750]  RET         call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4751]  COND FALSE  !(revert)
[L5736]  RET         call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5737]  COND FALSE  !(revert)
[L5740]  CALL        call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L4037]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4020]              assume msgsender_MSG != null;
[L4021]              __tmp__Balance[this] := 0;
[L4022]              __tmp___dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4037]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4038]  COND FALSE  !(revert)
[L5740]  RET         call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L5741]  COND FALSE  !(revert)
[L5744]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5637]              assume msgsender_MSG != null;
[L5638]              __tmp__Balance[this] := 0;
[L5639]              __tmp___name_DkargoToken[this] := -1676636045;
[L5640]              __tmp___symbol_DkargoToken[this] := -1676636045;
[L5642]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5643]  CALL        call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4065]              __tmp___dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5643]  RET         call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5644]  COND FALSE  !(revert)
[L5650]              __var_39 := -1804674067;
[L5651]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5652]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4783]  COND FALSE  !(!(infcid_s644 != -1))
[L4787]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L5652]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5653]  COND FALSE  !(revert)
[L5659]              __tmp___name_DkargoToken[this] := name_s1191;
[L5660]              __tmp___symbol_DkargoToken[this] := symbol_s1191;
[L5661]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5662]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4462]              __var_6 := null;
[L4463]  COND FALSE  !(!(node_s455 != null))
[L4467]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4468]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4431]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4432]              __ret_0_ := true;
[L4468]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4469]  COND FALSE  !(revert)
[L4480]  COND FALSE  !(!!__var_7)
[L4484]  COND TRUE   __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 0
[L4485]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4486]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4492]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4200]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4201]  COND FALSE  !(!(c_s130 >= a_s130))
[L4205]              __ret_0_ := c_s130;
[L4492]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4493]  COND FALSE  !(revert)
[L4496]              __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := __var_8;
[L5662]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5663]  COND FALSE  !(revert)
[L5744]  RET         call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5745]  COND FALSE  !(revert)
[L2435]  RET         call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2436]              assume revert || gas < 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:13,594 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:13,594 INFO  L82        PathProgramCache]: Analyzing trace with hash 1394360107, now seen corresponding path program 1 times
[2020-11-25 14:18:13,595 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:13,614 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:13,739 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 14:18:13,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:18:13,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:18:13,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:13,740 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:18:13,740 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:18:13,740 INFO  L87              Difference]: Start difference. First operand 4888 states and 5437 transitions. cyclomatic complexity: 554 Second operand 4 states.
[2020-11-25 14:18:13,904 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:13,904 INFO  L93              Difference]: Finished difference Result 5853 states and 6704 transitions.
[2020-11-25 14:18:13,904 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 14:18:13,904 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5853 states and 6704 transitions.
[2020-11-25 14:18:13,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 14:18:13,931 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5853 states to 5592 states and 6430 transitions.
[2020-11-25 14:18:13,931 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1353
[2020-11-25 14:18:13,932 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1353
[2020-11-25 14:18:13,932 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5592 states and 6430 transitions.
[2020-11-25 14:18:13,935 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:13,935 INFO  L728         BuchiCegarLoop]: Abstraction has 5592 states and 6430 transitions.
[2020-11-25 14:18:13,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5592 states and 6430 transitions.
[2020-11-25 14:18:13,962 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5592 to 4627.
[2020-11-25 14:18:13,962 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4627 states.
[2020-11-25 14:18:13,966 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4627 states to 4627 states and 5162 transitions.
[2020-11-25 14:18:13,966 INFO  L751         BuchiCegarLoop]: Abstraction has 4627 states and 5162 transitions.
[2020-11-25 14:18:13,966 INFO  L631         BuchiCegarLoop]: Abstraction has 4627 states and 5162 transitions.
[2020-11-25 14:18:13,966 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 14:18:13,966 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4627 states and 5162 transitions.
[2020-11-25 14:18:13,971 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:13,971 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:13,971 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:13,972 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:13,973 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND FALSE  !(DType[this] == DkargoToken)
[L5074]  COND FALSE  !(DType[this] == ERC20Safe)
[L5079]  COND TRUE   DType[this] == ERC20
[L5080]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5080]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5081]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND FALSE  !(DType[this] == DkargoToken)
[L5096]  COND FALSE  !(DType[this] == ERC20Safe)
[L5101]  COND TRUE   DType[this] == ERC20
[L5102]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5102]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5103]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:13,977 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:13,977 INFO  L82        PathProgramCache]: Analyzing trace with hash -299646941, now seen corresponding path program 1 times
[2020-11-25 14:18:13,978 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:13,993 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:14,144 INFO  L134       CoverageAnalysis]: Checked inductivity of 199 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 198 trivial. 0 not checked.
[2020-11-25 14:18:14,144 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:18:14,144 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:18:14,145 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:14,145 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:18:14,145 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:18:14,145 INFO  L87              Difference]: Start difference. First operand 4627 states and 5162 transitions. cyclomatic complexity: 540 Second operand 7 states.
[2020-11-25 14:18:14,243 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:14,243 INFO  L93              Difference]: Finished difference Result 4653 states and 5188 transitions.
[2020-11-25 14:18:14,243 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 14:18:14,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4653 states and 5188 transitions.
[2020-11-25 14:18:14,251 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:14,260 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4653 states to 4607 states and 5134 transitions.
[2020-11-25 14:18:14,260 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1124
[2020-11-25 14:18:14,260 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1124
[2020-11-25 14:18:14,260 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4607 states and 5134 transitions.
[2020-11-25 14:18:14,262 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:14,262 INFO  L728         BuchiCegarLoop]: Abstraction has 4607 states and 5134 transitions.
[2020-11-25 14:18:14,265 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4607 states and 5134 transitions.
[2020-11-25 14:18:14,282 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4607 to 4607.
[2020-11-25 14:18:14,283 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4607 states.
[2020-11-25 14:18:14,287 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4607 states to 4607 states and 5134 transitions.
[2020-11-25 14:18:14,287 INFO  L751         BuchiCegarLoop]: Abstraction has 4607 states and 5134 transitions.
[2020-11-25 14:18:14,287 INFO  L631         BuchiCegarLoop]: Abstraction has 4607 states and 5134 transitions.
[2020-11-25 14:18:14,287 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 14:18:14,287 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4607 states and 5134 transitions.
[2020-11-25 14:18:14,291 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:14,291 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:14,291 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:14,293 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:14,293 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:14,297 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:14,297 INFO  L82        PathProgramCache]: Analyzing trace with hash -12745219, now seen corresponding path program 1 times
[2020-11-25 14:18:14,298 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:14,318 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:15,263 INFO  L134       CoverageAnalysis]: Checked inductivity of 199 backedges. 4 proven. 92 refuted. 0 times theorem prover too weak. 103 trivial. 0 not checked.
[2020-11-25 14:18:15,263 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:18:15,263 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 14:18:15,263 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:15,264 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 14:18:15,264 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=130, Invalid=1592, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 14:18:15,264 INFO  L87              Difference]: Start difference. First operand 4607 states and 5134 transitions. cyclomatic complexity: 532 Second operand 42 states.
[2020-11-25 14:18:26,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:26,182 INFO  L93              Difference]: Finished difference Result 5011 states and 5674 transitions.
[2020-11-25 14:18:26,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 14:18:26,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5011 states and 5674 transitions.
[2020-11-25 14:18:26,191 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:26,201 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5011 states to 5011 states and 5674 transitions.
[2020-11-25 14:18:26,201 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1193
[2020-11-25 14:18:26,201 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1193
[2020-11-25 14:18:26,201 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5011 states and 5674 transitions.
[2020-11-25 14:18:26,204 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:26,204 INFO  L728         BuchiCegarLoop]: Abstraction has 5011 states and 5674 transitions.
[2020-11-25 14:18:26,207 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5011 states and 5674 transitions.
[2020-11-25 14:18:26,226 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5011 to 4730.
[2020-11-25 14:18:26,226 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4730 states.
[2020-11-25 14:18:26,231 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4730 states to 4730 states and 5309 transitions.
[2020-11-25 14:18:26,231 INFO  L751         BuchiCegarLoop]: Abstraction has 4730 states and 5309 transitions.
[2020-11-25 14:18:26,231 INFO  L631         BuchiCegarLoop]: Abstraction has 4730 states and 5309 transitions.
[2020-11-25 14:18:26,231 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 14:18:26,231 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4730 states and 5309 transitions.
[2020-11-25 14:18:26,236 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:26,236 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:26,236 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:26,237 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:26,237 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:26,242 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:26,242 INFO  L82        PathProgramCache]: Analyzing trace with hash 961214973, now seen corresponding path program 2 times
[2020-11-25 14:18:26,243 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:26,263 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:26,810 INFO  L134       CoverageAnalysis]: Checked inductivity of 199 backedges. 8 proven. 93 refuted. 0 times theorem prover too weak. 98 trivial. 0 not checked.
[2020-11-25 14:18:26,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:18:26,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 14:18:26,811 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:26,811 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 14:18:26,811 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=91, Invalid=839, Unknown=0, NotChecked=0, Total=930
[2020-11-25 14:18:26,811 INFO  L87              Difference]: Start difference. First operand 4730 states and 5309 transitions. cyclomatic complexity: 587 Second operand 31 states.
[2020-11-25 14:18:35,472 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:35,472 INFO  L93              Difference]: Finished difference Result 5244 states and 6031 transitions.
[2020-11-25 14:18:35,472 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 14:18:35,472 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5244 states and 6031 transitions.
[2020-11-25 14:18:35,482 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:35,493 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5244 states to 5244 states and 6031 transitions.
[2020-11-25 14:18:35,493 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1245
[2020-11-25 14:18:35,494 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1245
[2020-11-25 14:18:35,494 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5244 states and 6031 transitions.
[2020-11-25 14:18:35,497 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:35,497 INFO  L728         BuchiCegarLoop]: Abstraction has 5244 states and 6031 transitions.
[2020-11-25 14:18:35,500 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5244 states and 6031 transitions.
[2020-11-25 14:18:35,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5244 to 4929.
[2020-11-25 14:18:35,523 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4929 states.
[2020-11-25 14:18:35,529 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4929 states to 4929 states and 5609 transitions.
[2020-11-25 14:18:35,529 INFO  L751         BuchiCegarLoop]: Abstraction has 4929 states and 5609 transitions.
[2020-11-25 14:18:35,529 INFO  L631         BuchiCegarLoop]: Abstraction has 4929 states and 5609 transitions.
[2020-11-25 14:18:35,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 14:18:35,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4929 states and 5609 transitions.
[2020-11-25 14:18:35,534 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:35,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:35,534 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:35,536 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:35,536 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND FALSE  !(DType[this] == DkargoToken)
[L5074]  COND TRUE   DType[this] == ERC20Safe
[L5075]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5075]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5076]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND FALSE  !(DType[this] == DkargoToken)
[L5096]  COND TRUE   DType[this] == ERC20Safe
[L5097]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5097]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5098]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:35,540 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:35,541 INFO  L82        PathProgramCache]: Analyzing trace with hash -1773482465, now seen corresponding path program 1 times
[2020-11-25 14:18:35,541 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:35,555 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:35,708 INFO  L134       CoverageAnalysis]: Checked inductivity of 202 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 201 trivial. 0 not checked.
[2020-11-25 14:18:35,708 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:18:35,708 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:18:35,708 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:35,709 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:18:35,709 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:18:35,709 INFO  L87              Difference]: Start difference. First operand 4929 states and 5609 transitions. cyclomatic complexity: 691 Second operand 7 states.
[2020-11-25 14:18:35,797 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:35,798 INFO  L93              Difference]: Finished difference Result 4943 states and 5619 transitions.
[2020-11-25 14:18:35,798 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 14:18:35,798 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4943 states and 5619 transitions.
[2020-11-25 14:18:35,807 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:35,816 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4943 states to 4901 states and 5571 transitions.
[2020-11-25 14:18:35,816 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1160
[2020-11-25 14:18:35,817 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1160
[2020-11-25 14:18:35,817 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4901 states and 5571 transitions.
[2020-11-25 14:18:35,820 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:35,820 INFO  L728         BuchiCegarLoop]: Abstraction has 4901 states and 5571 transitions.
[2020-11-25 14:18:35,823 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4901 states and 5571 transitions.
[2020-11-25 14:18:35,843 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4901 to 4901.
[2020-11-25 14:18:35,843 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4901 states.
[2020-11-25 14:18:35,848 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4901 states to 4901 states and 5571 transitions.
[2020-11-25 14:18:35,848 INFO  L751         BuchiCegarLoop]: Abstraction has 4901 states and 5571 transitions.
[2020-11-25 14:18:35,848 INFO  L631         BuchiCegarLoop]: Abstraction has 4901 states and 5571 transitions.
[2020-11-25 14:18:35,848 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 14:18:35,848 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4901 states and 5571 transitions.
[2020-11-25 14:18:35,853 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:35,853 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:35,853 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:35,855 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:35,855 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:35,859 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:35,859 INFO  L82        PathProgramCache]: Analyzing trace with hash -1511393526, now seen corresponding path program 1 times
[2020-11-25 14:18:35,860 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:35,882 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:37,046 INFO  L134       CoverageAnalysis]: Checked inductivity of 202 backedges. 97 proven. 9 refuted. 0 times theorem prover too weak. 96 trivial. 0 not checked.
[2020-11-25 14:18:37,046 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:18:37,047 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 14:18:37,047 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:37,047 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 14:18:37,047 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=137, Invalid=1669, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 14:18:37,048 INFO  L87              Difference]: Start difference. First operand 4901 states and 5571 transitions. cyclomatic complexity: 681 Second operand 43 states.
[2020-11-25 14:18:58,532 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:18:58,533 INFO  L93              Difference]: Finished difference Result 5171 states and 5955 transitions.
[2020-11-25 14:18:58,533 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 14:18:58,533 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5171 states and 5955 transitions.
[2020-11-25 14:18:58,543 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:58,553 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5171 states to 5171 states and 5955 transitions.
[2020-11-25 14:18:58,553 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1216
[2020-11-25 14:18:58,554 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1216
[2020-11-25 14:18:58,554 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5171 states and 5955 transitions.
[2020-11-25 14:18:58,557 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:18:58,557 INFO  L728         BuchiCegarLoop]: Abstraction has 5171 states and 5955 transitions.
[2020-11-25 14:18:58,560 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5171 states and 5955 transitions.
[2020-11-25 14:18:58,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5171 to 4910.
[2020-11-25 14:18:58,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4910 states.
[2020-11-25 14:18:58,586 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4910 states to 4910 states and 5598 transitions.
[2020-11-25 14:18:58,586 INFO  L751         BuchiCegarLoop]: Abstraction has 4910 states and 5598 transitions.
[2020-11-25 14:18:58,586 INFO  L631         BuchiCegarLoop]: Abstraction has 4910 states and 5598 transitions.
[2020-11-25 14:18:58,586 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 14:18:58,586 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4910 states and 5598 transitions.
[2020-11-25 14:18:58,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:18:58,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:18:58,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:18:58,592 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:18:58,592 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 != to_s1311 && ((value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG]) || _balances_ERC20[this][to_s1311] + value_s1311 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:18:58,597 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:18:58,597 INFO  L82        PathProgramCache]: Analyzing trace with hash -2125800345, now seen corresponding path program 3 times
[2020-11-25 14:18:58,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:18:58,626 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:18:58,959 INFO  L134       CoverageAnalysis]: Checked inductivity of 201 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 201 trivial. 0 not checked.
[2020-11-25 14:18:58,959 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:18:58,959 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 14:18:58,960 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:18:58,960 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 14:18:58,960 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=204, Unknown=0, NotChecked=0, Total=240
[2020-11-25 14:18:58,960 INFO  L87              Difference]: Start difference. First operand 4910 states and 5598 transitions. cyclomatic complexity: 700 Second operand 16 states.
[2020-11-25 14:19:03,452 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:03,452 INFO  L93              Difference]: Finished difference Result 3034 states and 3492 transitions.
[2020-11-25 14:19:03,452 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 14:19:03,452 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3034 states and 3492 transitions.
[2020-11-25 14:19:03,458 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:19:03,458 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3034 states to 0 states and 0 transitions.
[2020-11-25 14:19:03,458 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 14:19:03,458 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 14:19:03,458 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 14:19:03,459 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:03,459 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:19:03,459 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:19:03,459 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:19:03,459 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 14:19:03,459 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 14:19:03,459 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:19:03,459 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 14:19:03,462 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:19:03 BasicIcfg
[2020-11-25 14:19:03,462 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:19:03,462 INFO  L168              Benchmark]: Toolchain (without parser) took 100363.08 ms. Allocated memory was 1.0 GB in the beginning and 3.8 GB in the end (delta: 2.7 GB). Free memory was 929.8 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.7 GB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,463 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,463 INFO  L168              Benchmark]: Boogie Preprocessor took 124.59 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,464 INFO  L168              Benchmark]: UtopiaSpecLang took 74.70 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,464 INFO  L168              Benchmark]: Boogie Printer took 22.73 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,464 INFO  L168              Benchmark]: RCFGBuilder took 1133.03 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 51.9 MB). Free memory was 897.6 MB in the beginning and 919.2 MB in the end (delta: -21.7 MB). Peak memory consumption was 184.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,464 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.73 ms. Allocated memory is still 1.1 GB. Free memory was 919.2 MB in the beginning and 906.6 MB in the end (delta: 12.6 MB). Peak memory consumption was 12.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,465 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2432.08 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 201.3 MB). Free memory was 906.6 MB in the beginning and 1.0 GB in the end (delta: -113.8 MB). Peak memory consumption was 479.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,465 INFO  L168              Benchmark]: BlockEncodingV2 took 197.70 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 918.9 MB in the end (delta: 101.5 MB). Peak memory consumption was 101.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,465 INFO  L168              Benchmark]: BuchiAutomizer took 96339.48 ms. Allocated memory was 1.3 GB in the beginning and 3.8 GB in the end (delta: 2.5 GB). Free memory was 918.9 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 14:19:03,467 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7632 locations, 13663 edges
  - StatisticsResult: Encoded RCFG
    7409 locations, 13060 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 124.59 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.70 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.8 MB). Peak memory consumption was 10.8 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.73 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1133.03 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 51.9 MB). Free memory was 897.6 MB in the beginning and 919.2 MB in the end (delta: -21.7 MB). Peak memory consumption was 184.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.73 ms. Allocated memory is still 1.1 GB. Free memory was 919.2 MB in the beginning and 906.6 MB in the end (delta: 12.6 MB). Peak memory consumption was 12.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2432.08 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 201.3 MB). Free memory was 906.6 MB in the beginning and 1.0 GB in the end (delta: -113.8 MB). Peak memory consumption was 479.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 197.70 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 918.9 MB in the end (delta: 101.5 MB). Peak memory consumption was 101.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 96339.48 ms. Allocated memory was 1.3 GB in the beginning and 3.8 GB in the end (delta: 2.5 GB). Free memory was 918.9 MB in the beginning and 2.0 GB in the end (delta: -1.0 GB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3093 locations, 4210 edges
  - StatisticsResult: BuchiProgram size
    7632 locations, 13663 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 19 terminating modules (19 trivial, 0 deterministic, 0 nondeterministic). 19 modules have a trivial ranking function, the largest among these consists of 43 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 96.3s and 20 iterations.  TraceHistogramMax:4. Analysis of lassos took 7.1s. Construction of modules took 69.4s. BÃ¼chi inclusion checks took 18.1s. Highest rank in rank-based complementation 0. Minimization of det autom 19. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 18 MinimizatonAttempts, 3897 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 5249 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 90744 SDtfs, 121050 SDslu, 269848 SDs, 0 SdLazy, 697603 SolverSat, 21292 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 69.4s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_DkargoToken0) ==> ( <>(fail_transferFrom_DkargoToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
