This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:34:31,655 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:34:31,656 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:34:31,666 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:34:31,666 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:34:31,666 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:34:31,667 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:34:31,669 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:34:31,670 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:34:31,671 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:34:31,671 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:34:31,672 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:34:31,672 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:34:31,673 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:34:31,674 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:34:31,674 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:34:31,675 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:34:31,676 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:34:31,677 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:34:31,678 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:34:31,679 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:34:31,680 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:34:31,682 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:34:31,682 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:34:31,682 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:34:31,682 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:34:31,683 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:34:31,683 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:34:31,683 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:34:31,684 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:34:31,684 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:34:31,685 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:34:31,685 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:34:31,685 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:34:31,686 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:34:31,686 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:34:31,687 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:34:31,687 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:34:31,687 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:34:31,688 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:34:31,688 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:34:31,688 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:34:31,696 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:34:31,696 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:34:31,696 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:34:31,697 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:34:31,697 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:34:31,697 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:34:31,697 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:34:31,697 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:34:31,697 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:34:31,697 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:34:31,698 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:34:31,698 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:34:31,699 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:34:31,699 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:34:31,699 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:34:31,699 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:34:31,699 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:34:31,699 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:34:31,699 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:34:31,719 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:34:31,730 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:34:31,732 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:34:31,733 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:34:31,734 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:34:31,734 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl
[2020-11-24 20:34:31,734 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl'
[2020-11-24 20:34:31,825 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:34:31,826 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:34:31,827 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:34:31,828 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:34:31,828 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:34:31,844 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,845 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,872 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,873 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,895 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,904 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,911 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,920 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:34:31,921 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:34:31,921 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:34:31,923 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:34:31,927 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/1) ...
[2020-11-24 20:34:31,942 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Litecoin_SV.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_Litecoin_SV[this][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][msg.sender] >= 0 &&  balances_Litecoin_SV[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transfer(to, value), return == true && balances_Litecoin_SV[this][msg.sender] == old(balances_Litecoin_SV[this][msg.sender]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:34:31,948 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Litecoin_SV.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_Litecoin_SV[this][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][msg.sender] >= 0 &&  balances_Litecoin_SV[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transfer(to, value), return == true && balances_Litecoin_SV[this][msg.sender] == old(balances_Litecoin_SV[this][msg.sender]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:34:31,955 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Litecoin_SV.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_Litecoin_SV[this][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][msg.sender] >= 0 &&  balances_Litecoin_SV[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transfer(to, value), return == true && balances_Litecoin_SV[this][msg.sender] == old(balances_Litecoin_SV[this][msg.sender]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:34:31,965 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( p1!=msg.sender && p1!=to_s383 ) && msg.sender!=to_s383 ) && tokens_s383<=balances_Litecoin_SV[this][msg.sender] ) && ( balances_Litecoin_SV[this][to_s383] + tokens_s383 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s383>=0 ) && tokens_s383<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Litecoin_SV[this][to_s383]>=0 ) && balances_Litecoin_SV[this][to_s383]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Litecoin_SV[this][msg.sender]>=0 ) && balances_Litecoin_SV[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>],IdentifierExpression[to_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],IdentifierExpression[tokens_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:34:31,970 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( success_s383==true && balances_Litecoin_SV[this][msg.sender]==( ( old(balances_Litecoin_SV[this][msg.sender]) ) - tokens_s383 ) ) && balances_Litecoin_SV[this][to_s383]==( ( old(balances_Litecoin_SV[this][to_s383]) ) + tokens_s383 ) ) && _totalSupply_Litecoin_SV[this]==( old(_totalSupply_Litecoin_SV[this]) ) ) && allowed_Litecoin_SV[this]==( old(allowed_Litecoin_SV[this]) ) ) && balances_Litecoin_SV[this][p1]==( old(balances_Litecoin_SV[this][p1]) ) ) && businessName_Litecoin_SV[this]==( old(businessName_Litecoin_SV[this]) ) ) && businessCountry_Litecoin_SV[this]==( old(businessCountry_Litecoin_SV[this]) ) ) && symbol_Litecoin_SV[this]==( old(symbol_Litecoin_SV[this]) ) ) && name_Litecoin_SV[this]==( old(name_Litecoin_SV[this]) ) ) && decimals_Litecoin_SV[this]==( old(decimals_Litecoin_SV[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s383,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_Litecoin_SV>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]],IdentifierExpression[tokens_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]],IdentifierExpression[tokens_s383,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[businessName_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[businessName_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[businessCountry_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[businessCountry_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_Litecoin_SV>]]]]]]
[2020-11-24 20:34:31,975 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Litecoin_SV.transfer(to, value), p1 != msg.sender && p1 != to && msg.sender != to && value <= balances_Litecoin_SV[this][msg.sender] && balances_Litecoin_SV[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][msg.sender] >= 0 &&  balances_Litecoin_SV[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transfer(to, value), return == true && balances_Litecoin_SV[this][msg.sender] == old(balances_Litecoin_SV[this][msg.sender]) - value && balances_Litecoin_SV[this][to] == old(balances_Litecoin_SV[this][to]) + value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this]) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:34:31,975 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_Litecoin_SV0) ==> ( <>AP(success_transfer_Litecoin_SV0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:34:31,984 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:34:31 PropertyContainer
[2020-11-24 20:34:31,984 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:34:31,985 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:34:31,985 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:34:31,985 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:34:31,987 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/2) ...
[2020-11-24 20:34:31,988 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:34:31,988 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:34:32,007 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:34:31" (2/2) ...
[2020-11-24 20:34:32,008 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:34:32,008 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:34:32,008 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:34:32,008 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:34:32,009 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/2) ...
[2020-11-24 20:34:32,063 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:34:32,063 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:34:32,063 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:34:32,063 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:34:32,063 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 20:34:32,063 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 20:34:32,064 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 20:34:32,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 20:34:32,064 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-24 20:34:32,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-24 20:34:32,064 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-24 20:34:32,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-24 20:34:32,064 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 20:34:32,064 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-24 20:34:32,064 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 20:34:32,065 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 20:34:32,065 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 20:34:32,066 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-24 20:34:32,066 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 20:34:32,066 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-24 20:34:32,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-24 20:34:32,066 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-24 20:34:32,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-24 20:34:32,066 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-24 20:34:32,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-24 20:34:32,066 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-24 20:34:32,066 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-24 20:34:32,066 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-24 20:34:32,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-24 20:34:32,067 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__success
[2020-11-24 20:34:32,067 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV
[2020-11-24 20:34:32,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV
[2020-11-24 20:34:32,067 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV
[2020-11-24 20:34:32,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV
[2020-11-24 20:34:32,067 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV
[2020-11-24 20:34:32,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV
[2020-11-24 20:34:32,067 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,067 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Litecoin_SV__success
[2020-11-24 20:34:32,068 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,068 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV
[2020-11-24 20:34:32,069 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV
[2020-11-24 20:34:32,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-24 20:34:32,070 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Litecoin_SV
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:34:32,071 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 20:34:32,072 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-24 20:34:32,073 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__fail
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV__success
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV__fail
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV__success
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV__fail
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV__success
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV__fail
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,074 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV__success
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV__fail
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__success
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__fail
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Litecoin_SV__fail
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV__success
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV__fail
[2020-11-24 20:34:32,075 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV__success
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV__fail
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV__success
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV__fail
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV__success
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV__fail
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV__success
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV__fail
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV__success
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV__fail
[2020-11-24 20:34:32,076 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:34:32,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:34:32,077 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:34:32,077 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,077 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 20:34:32,078 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-24 20:34:32,079 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__fail
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__success
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV__fail
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV__success
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV__fail
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV__success
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV__fail
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV__success
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,080 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV__fail
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV__success
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__fail
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__success
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Litecoin_SV__fail
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Litecoin_SV__success
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__fail
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__success
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV__fail
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV__success
[2020-11-24 20:34:32,081 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV__fail
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV__success
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV__fail
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV__success
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV__fail
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV__success
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV__fail
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV__success
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV__fail
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV__success
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:34:32,082 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 20:34:32,083 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-24 20:34:32,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-24 20:34:32,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Litecoin_SV
[2020-11-24 20:34:32,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:34:32,084 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:34:32,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:34:32,379 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:34:32,379 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:34:32,380 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:34:32,520 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:34:32,738 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:34:32,738 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-24 20:34:32,740 INFO  L202        PluginConnector]: Adding new model Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:34:32 BoogieIcfgContainer
[2020-11-24 20:34:32,740 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:34:31" (2/2) ...
[2020-11-24 20:34:32,740 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:34:32,741 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2d34d984 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:34:32, skipping insertion in model container
[2020-11-24 20:34:32,741 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:34:32,741 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:34:32,741 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:34:32,742 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:34:32,743 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/3) ...
[2020-11-24 20:34:32,743 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5ac11b and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:34:32, skipping insertion in model container
[2020-11-24 20:34:32,743 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:34:31" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:34:32,778 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:34:32 NWAContainer
[2020-11-24 20:34:32,778 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:34:32,778 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:34:32,778 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:34:32,779 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:34:32,780 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:34:32" (3/4) ...
[2020-11-24 20:34:32,780 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@d45ad4d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:34:32, skipping insertion in model container
[2020-11-24 20:34:32,780 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:34:32" (4/4) ...
[2020-11-24 20:34:32,783 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:34:32,787 INFO  L110   BuchiProductObserver]: Initial RCFG 1706 locations, 2138 edges
[2020-11-24 20:34:32,787 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:34:32,798 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:34:34,074 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:34:34,079 INFO  L110   BuchiProductObserver]: BuchiProgram size 4036 locations, 6912 edges
[2020-11-24 20:34:34,080 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:34:34 BoogieIcfgContainer
[2020-11-24 20:34:34,080 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:34:34,080 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:34:34,080 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:34:34,082 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:34:34,082 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:34:34" (1/1) ...
[2020-11-24 20:34:34,166 INFO  L313           BlockEncoder]: Initial Icfg 4036 locations, 6912 edges
[2020-11-24 20:34:34,166 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:34:34,167 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:34:34,167 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:34:34,167 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:34:34,179 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-24 20:34:34,187 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-24 20:34:34,198 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:34:34,202 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:34:34,205 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:34:34,206 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:34:34,210 INFO  L313           BlockEncoder]: Encoded RCFG 3976 locations, 6752 edges
[2020-11-24 20:34:34,210 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:34:34 BasicIcfg
[2020-11-24 20:34:34,210 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:34:34,211 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:34:34,211 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:34:34,213 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:34:34,213 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:34:34,213 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:34:31" (1/6) ...
[2020-11-24 20:34:34,215 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8282a18 and model type Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:34:34, skipping insertion in model container
[2020-11-24 20:34:34,215 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:34:34,215 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:34:31" (2/6) ...
[2020-11-24 20:34:34,215 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8282a18 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:34:34, skipping insertion in model container
[2020-11-24 20:34:34,215 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:34:34,215 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:34:32" (3/6) ...
[2020-11-24 20:34:34,215 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8282a18 and model type Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:34:34, skipping insertion in model container
[2020-11-24 20:34:34,215 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:34:34,215 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:34:32" (4/6) ...
[2020-11-24 20:34:34,215 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8282a18 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:34:34, skipping insertion in model container
[2020-11-24 20:34:34,215 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:34:34,215 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:34:34" (5/6) ...
[2020-11-24 20:34:34,215 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8282a18 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:34:34, skipping insertion in model container
[2020-11-24 20:34:34,216 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:34:34,216 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:34:34" (6/6) ...
[2020-11-24 20:34:34,217 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transfer-normal.bpl_BEv2
[2020-11-24 20:34:34,244 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:34:34,244 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:34:34,245 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:34:34,245 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:34:34,245 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:34:34,245 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:34:34,245 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:34:34,245 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:34:34,245 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:34:34,293 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3976 states.
[2020-11-24 20:34:34,351 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:34,352 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:34,352 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:34,361 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:34,361 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:34,361 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:34:34,361 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3976 states.
[2020-11-24 20:34:34,385 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:34,385 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:34,385 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:34,387 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:34,387 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_Litecoin_SV0 := false;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND TRUE   revert
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:34:34,403 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:34:34,403 INFO  L82        PathProgramCache]: Analyzing trace with hash -385114021, now seen corresponding path program 1 times
[2020-11-24 20:34:34,406 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:34:34,430 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:34:34,465 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:34:34,467 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:34:34,467 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:34:34,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:34:34,687 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:34:34,688 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:34:34,689 INFO  L87              Difference]: Start difference. First operand 3976 states. Second operand 4 states.
[2020-11-24 20:34:35,008 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:34:35,008 INFO  L93              Difference]: Finished difference Result 2797 states and 3038 transitions.
[2020-11-24 20:34:35,008 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:34:35,010 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2797 states and 3038 transitions.
[2020-11-24 20:34:35,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:35,040 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2797 states to 2797 states and 3038 transitions.
[2020-11-24 20:34:35,041 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:34:35,043 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 980
[2020-11-24 20:34:35,043 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2797 states and 3038 transitions.
[2020-11-24 20:34:35,050 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:34:35,050 INFO  L728         BuchiCegarLoop]: Abstraction has 2797 states and 3038 transitions.
[2020-11-24 20:34:35,066 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2797 states and 3038 transitions.
[2020-11-24 20:34:35,108 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2797 to 2797.
[2020-11-24 20:34:35,108 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2797 states.
[2020-11-24 20:34:35,117 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2797 states to 2797 states and 3038 transitions.
[2020-11-24 20:34:35,119 INFO  L751         BuchiCegarLoop]: Abstraction has 2797 states and 3038 transitions.
[2020-11-24 20:34:35,119 INFO  L631         BuchiCegarLoop]: Abstraction has 2797 states and 3038 transitions.
[2020-11-24 20:34:35,119 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:34:35,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2797 states and 3038 transitions.
[2020-11-24 20:34:35,132 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:35,132 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:35,132 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:35,134 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:35,134 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_Litecoin_SV0 := false;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND TRUE   revert
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND TRUE   !(b_s45 <= a_s45)
[L2248]              revert := true;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND TRUE   revert
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s383 == true && balances_Litecoin_SV[this][msgsender_MSG] == old(balances_Litecoin_SV[this][msgsender_MSG]) - tokens_s383) && balances_Litecoin_SV[this][to_s383] == old(balances_Litecoin_SV[this][to_s383]) + tokens_s383) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND TRUE   !(b_s45 <= a_s45)
[L2248]              revert := true;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND TRUE   revert
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s383 == true && balances_Litecoin_SV[this][msgsender_MSG] == old(balances_Litecoin_SV[this][msgsender_MSG]) - tokens_s383) && balances_Litecoin_SV[this][to_s383] == old(balances_Litecoin_SV[this][to_s383]) + tokens_s383) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:34:35,138 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:34:35,138 INFO  L82        PathProgramCache]: Analyzing trace with hash 483832112, now seen corresponding path program 1 times
[2020-11-24 20:34:35,139 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:34:35,146 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:34:35,165 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:34:35,165 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:34:35,165 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:34:35,167 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:34:35,167 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:34:35,167 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:34:35,167 INFO  L87              Difference]: Start difference. First operand 2797 states and 3038 transitions. cyclomatic complexity: 243 Second operand 4 states.
[2020-11-24 20:34:35,772 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:34:35,772 INFO  L93              Difference]: Finished difference Result 4089 states and 4626 transitions.
[2020-11-24 20:34:35,772 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:34:35,773 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4089 states and 4626 transitions.
[2020-11-24 20:34:35,790 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:34:35,808 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4089 states to 3969 states and 4498 transitions.
[2020-11-24 20:34:35,808 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1330
[2020-11-24 20:34:35,809 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1340
[2020-11-24 20:34:35,809 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3969 states and 4498 transitions.
[2020-11-24 20:34:35,816 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:34:35,816 INFO  L728         BuchiCegarLoop]: Abstraction has 3969 states and 4498 transitions.
[2020-11-24 20:34:35,819 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3969 states and 4498 transitions.
[2020-11-24 20:34:35,847 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3969 to 2833.
[2020-11-24 20:34:35,847 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2833 states.
[2020-11-24 20:34:35,850 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2833 states to 2833 states and 3030 transitions.
[2020-11-24 20:34:35,850 INFO  L751         BuchiCegarLoop]: Abstraction has 2833 states and 3030 transitions.
[2020-11-24 20:34:35,851 INFO  L631         BuchiCegarLoop]: Abstraction has 2833 states and 3030 transitions.
[2020-11-24 20:34:35,851 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:34:35,851 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2833 states and 3030 transitions.
[2020-11-24 20:34:35,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:35,857 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:35,857 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:35,859 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:35,859 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_Litecoin_SV0 := false;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND TRUE   __exception
[L1004]              __tmp__Balance := Balance;
[L1005]              __tmp__DType := DType;
[L1006]              __tmp__Alloc := Alloc;
[L1007]              __tmp__balance_ADDR := balance_ADDR;
[L1008]              __tmp__M_Ref_int := M_Ref_int;
[L1009]              __tmp__sum_balances0 := sum_balances0;
[L1010]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1011]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1012]              __tmp__sum_allowed1 := sum_allowed1;
[L1013]              __tmp__Length := Length;
[L1014]              __tmp__now := now;
[L1015]              __tmp__owner_Owned := owner_Owned;
[L1016]              __tmp__newOwner_Owned := newOwner_Owned;
[L1017]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1018]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1019]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1020]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1021]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1022]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1023]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1024]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1025]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2586]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2587]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2587]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2588]  COND TRUE   revert
[L1025]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1026]              assume revert || gas < 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND TRUE   __exception
[L1004]              __tmp__Balance := Balance;
[L1005]              __tmp__DType := DType;
[L1006]              __tmp__Alloc := Alloc;
[L1007]              __tmp__balance_ADDR := balance_ADDR;
[L1008]              __tmp__M_Ref_int := M_Ref_int;
[L1009]              __tmp__sum_balances0 := sum_balances0;
[L1010]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1011]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1012]              __tmp__sum_allowed1 := sum_allowed1;
[L1013]              __tmp__Length := Length;
[L1014]              __tmp__now := now;
[L1015]              __tmp__owner_Owned := owner_Owned;
[L1016]              __tmp__newOwner_Owned := newOwner_Owned;
[L1017]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1018]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1019]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1020]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1021]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1022]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1023]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1024]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1025]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2586]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2587]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2587]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2588]  COND TRUE   revert
[L1025]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1026]              assume revert || gas < 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:34:35,863 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:34:35,863 INFO  L82        PathProgramCache]: Analyzing trace with hash -1026059290, now seen corresponding path program 1 times
[2020-11-24 20:34:35,864 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:34:35,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:34:35,960 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:34:35,960 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:34:35,961 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:34:35,961 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:34:35,961 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:34:35,961 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:34:35,961 INFO  L87              Difference]: Start difference. First operand 2833 states and 3030 transitions. cyclomatic complexity: 199 Second operand 7 states.
[2020-11-24 20:34:36,666 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:34:36,666 INFO  L93              Difference]: Finished difference Result 3057 states and 3272 transitions.
[2020-11-24 20:34:36,666 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:34:36,666 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3057 states and 3272 transitions.
[2020-11-24 20:34:36,674 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:34:36,682 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3057 states to 3057 states and 3272 transitions.
[2020-11-24 20:34:36,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1086
[2020-11-24 20:34:36,683 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1086
[2020-11-24 20:34:36,683 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3057 states and 3272 transitions.
[2020-11-24 20:34:36,685 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:34:36,685 INFO  L728         BuchiCegarLoop]: Abstraction has 3057 states and 3272 transitions.
[2020-11-24 20:34:36,687 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3057 states and 3272 transitions.
[2020-11-24 20:34:36,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3057 to 2893.
[2020-11-24 20:34:36,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2893 states.
[2020-11-24 20:34:36,712 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2893 states to 2893 states and 3098 transitions.
[2020-11-24 20:34:36,712 INFO  L751         BuchiCegarLoop]: Abstraction has 2893 states and 3098 transitions.
[2020-11-24 20:34:36,712 INFO  L631         BuchiCegarLoop]: Abstraction has 2893 states and 3098 transitions.
[2020-11-24 20:34:36,712 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:34:36,712 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2893 states and 3098 transitions.
[2020-11-24 20:34:36,716 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:36,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:36,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:36,718 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:36,718 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_Litecoin_SV0 := false;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s383 == true && balances_Litecoin_SV[this][msgsender_MSG] == old(balances_Litecoin_SV[this][msgsender_MSG]) - tokens_s383) && balances_Litecoin_SV[this][to_s383] == old(balances_Litecoin_SV[this][to_s383]) + tokens_s383) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s383 == true && balances_Litecoin_SV[this][msgsender_MSG] == old(balances_Litecoin_SV[this][msgsender_MSG]) - tokens_s383) && balances_Litecoin_SV[this][to_s383] == old(balances_Litecoin_SV[this][to_s383]) + tokens_s383) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:34:36,721 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:34:36,721 INFO  L82        PathProgramCache]: Analyzing trace with hash -2134223171, now seen corresponding path program 1 times
[2020-11-24 20:34:36,721 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:34:36,777 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:34:37,060 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:34:37,061 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:34:37,061 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:34:37,061 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:34:37,062 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:34:37,062 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=152, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:34:37,062 INFO  L87              Difference]: Start difference. First operand 2893 states and 3098 transitions. cyclomatic complexity: 207 Second operand 14 states.
[2020-11-24 20:34:39,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:34:39,969 INFO  L93              Difference]: Finished difference Result 2952 states and 3163 transitions.
[2020-11-24 20:34:39,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 20:34:39,970 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2952 states and 3163 transitions.
[2020-11-24 20:34:39,979 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:34:39,986 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2952 states to 2946 states and 3156 transitions.
[2020-11-24 20:34:39,986 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1027
[2020-11-24 20:34:39,987 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1027
[2020-11-24 20:34:39,987 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2946 states and 3156 transitions.
[2020-11-24 20:34:39,989 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:34:39,989 INFO  L728         BuchiCegarLoop]: Abstraction has 2946 states and 3156 transitions.
[2020-11-24 20:34:39,992 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2946 states and 3156 transitions.
[2020-11-24 20:34:40,010 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2946 to 2915.
[2020-11-24 20:34:40,010 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2915 states.
[2020-11-24 20:34:40,013 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2915 states to 2915 states and 3120 transitions.
[2020-11-24 20:34:40,013 INFO  L751         BuchiCegarLoop]: Abstraction has 2915 states and 3120 transitions.
[2020-11-24 20:34:40,013 INFO  L631         BuchiCegarLoop]: Abstraction has 2915 states and 3120 transitions.
[2020-11-24 20:34:40,013 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:34:40,013 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2915 states and 3120 transitions.
[2020-11-24 20:34:40,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:40,016 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:40,016 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:40,018 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:40,018 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_Litecoin_SV0 := false;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND TRUE   __exception
[L1004]              __tmp__Balance := Balance;
[L1005]              __tmp__DType := DType;
[L1006]              __tmp__Alloc := Alloc;
[L1007]              __tmp__balance_ADDR := balance_ADDR;
[L1008]              __tmp__M_Ref_int := M_Ref_int;
[L1009]              __tmp__sum_balances0 := sum_balances0;
[L1010]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1011]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1012]              __tmp__sum_allowed1 := sum_allowed1;
[L1013]              __tmp__Length := Length;
[L1014]              __tmp__now := now;
[L1015]              __tmp__owner_Owned := owner_Owned;
[L1016]              __tmp__newOwner_Owned := newOwner_Owned;
[L1017]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1018]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1019]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1020]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1021]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1022]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1023]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1024]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1025]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2586]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2587]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2587]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2588]  COND FALSE  !(revert)
[L2594]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][msgsender_MSG];
[L2595]              __tmp__balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2596]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][msgsender_MSG];
[L2597]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2598]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND TRUE   !(c_s23 >= a_s23)
[L2222]              revert := true;
[L2598]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2599]  COND TRUE   revert
[L1025]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1026]              assume revert || gas < 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s383 == true && balances_Litecoin_SV[this][msgsender_MSG] == old(balances_Litecoin_SV[this][msgsender_MSG]) - tokens_s383) && balances_Litecoin_SV[this][to_s383] == old(balances_Litecoin_SV[this][to_s383]) + tokens_s383) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:34:40,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:34:40,022 INFO  L82        PathProgramCache]: Analyzing trace with hash 1704684948, now seen corresponding path program 1 times
[2020-11-24 20:34:40,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:34:40,031 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:34:40,169 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:34:40,169 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:34:40,169 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-24 20:34:40,170 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:34:40,170 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-24 20:34:40,170 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=36, Invalid=270, Unknown=0, NotChecked=0, Total=306
[2020-11-24 20:34:40,170 INFO  L87              Difference]: Start difference. First operand 2915 states and 3120 transitions. cyclomatic complexity: 207 Second operand 18 states.
[2020-11-24 20:34:42,828 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:34:42,828 INFO  L93              Difference]: Finished difference Result 3103 states and 3337 transitions.
[2020-11-24 20:34:42,828 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-24 20:34:42,828 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3103 states and 3337 transitions.
[2020-11-24 20:34:42,834 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:34:42,841 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3103 states to 3103 states and 3337 transitions.
[2020-11-24 20:34:42,841 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1105
[2020-11-24 20:34:42,842 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1105
[2020-11-24 20:34:42,842 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3103 states and 3337 transitions.
[2020-11-24 20:34:42,844 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:34:42,844 INFO  L728         BuchiCegarLoop]: Abstraction has 3103 states and 3337 transitions.
[2020-11-24 20:34:42,846 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3103 states and 3337 transitions.
[2020-11-24 20:34:42,864 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3103 to 3015.
[2020-11-24 20:34:42,865 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3015 states.
[2020-11-24 20:34:42,867 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3015 states to 3015 states and 3228 transitions.
[2020-11-24 20:34:42,867 INFO  L751         BuchiCegarLoop]: Abstraction has 3015 states and 3228 transitions.
[2020-11-24 20:34:42,867 INFO  L631         BuchiCegarLoop]: Abstraction has 3015 states and 3228 transitions.
[2020-11-24 20:34:42,867 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:34:42,867 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3015 states and 3228 transitions.
[2020-11-24 20:34:42,871 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:34:42,871 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:42,871 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:42,872 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:42,872 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_Litecoin_SV0 := false;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND TRUE   __exception
[L1004]              __tmp__Balance := Balance;
[L1005]              __tmp__DType := DType;
[L1006]              __tmp__Alloc := Alloc;
[L1007]              __tmp__balance_ADDR := balance_ADDR;
[L1008]              __tmp__M_Ref_int := M_Ref_int;
[L1009]              __tmp__sum_balances0 := sum_balances0;
[L1010]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1011]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1012]              __tmp__sum_allowed1 := sum_allowed1;
[L1013]              __tmp__Length := Length;
[L1014]              __tmp__now := now;
[L1015]              __tmp__owner_Owned := owner_Owned;
[L1016]              __tmp__newOwner_Owned := newOwner_Owned;
[L1017]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1018]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1019]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1020]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1021]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1022]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1023]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1024]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1025]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2586]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2587]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2587]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2588]  COND FALSE  !(revert)
[L2594]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][msgsender_MSG];
[L2595]              __tmp__balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2596]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][msgsender_MSG];
[L2597]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2598]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND FALSE  !(!(c_s23 >= a_s23))
[L2598]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2599]  COND FALSE  !(revert)
[L2605]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][to_s383];
[L2606]              __tmp__balances_Litecoin_SV[this][to_s383] := __var_4;
[L2607]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][to_s383];
[L2608]              success_s383 := true;
[L1025]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1026]              assume revert || gas < 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:34:42,874 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:34:42,874 INFO  L82        PathProgramCache]: Analyzing trace with hash 903224239, now seen corresponding path program 1 times
[2020-11-24 20:34:42,875 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:34:42,882 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:34:42,906 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:34:42,906 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:34:42,906 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:34:42,906 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:34:42,906 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:34:42,906 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:34:42,906 INFO  L87              Difference]: Start difference. First operand 3015 states and 3228 transitions. cyclomatic complexity: 217 Second operand 5 states.
[2020-11-24 20:34:43,247 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:34:43,247 INFO  L93              Difference]: Finished difference Result 3787 states and 4159 transitions.
[2020-11-24 20:34:43,247 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:34:43,247 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3787 states and 4159 transitions.
[2020-11-24 20:34:43,256 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 20:34:43,263 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3787 states to 2816 states and 3185 transitions.
[2020-11-24 20:34:43,263 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 797
[2020-11-24 20:34:43,263 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 797
[2020-11-24 20:34:43,263 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2816 states and 3185 transitions.
[2020-11-24 20:34:43,266 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:34:43,266 INFO  L728         BuchiCegarLoop]: Abstraction has 2816 states and 3185 transitions.
[2020-11-24 20:34:43,268 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2816 states and 3185 transitions.
[2020-11-24 20:34:43,279 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2816 to 2022.
[2020-11-24 20:34:43,279 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2022 states.
[2020-11-24 20:34:43,281 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2022 states to 2022 states and 2180 transitions.
[2020-11-24 20:34:43,281 INFO  L751         BuchiCegarLoop]: Abstraction has 2022 states and 2180 transitions.
[2020-11-24 20:34:43,281 INFO  L631         BuchiCegarLoop]: Abstraction has 2022 states and 2180 transitions.
[2020-11-24 20:34:43,281 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:34:43,281 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2022 states and 2180 transitions.
[2020-11-24 20:34:43,283 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:34:43,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:34:43,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:34:43,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:34:43,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transfer_Litecoin_SV0 := false;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((success_s383 == true && balances_Litecoin_SV[this][msgsender_MSG] == old(balances_Litecoin_SV[this][msgsender_MSG]) - tokens_s383) && balances_Litecoin_SV[this][to_s383] == old(balances_Litecoin_SV[this][to_s383]) + tokens_s383) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && allowed_Litecoin_SV[this] == old(allowed_Litecoin_SV[this])) && balances_Litecoin_SV[this][p1] == old(balances_Litecoin_SV[this][p1])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((p1 != msgsender_MSG && p1 != to_s383) && msgsender_MSG != to_s383) && tokens_s383 <= balances_Litecoin_SV[this][msgsender_MSG]) && balances_Litecoin_SV[this][to_s383] + tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s383 >= 0) && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s383] >= 0) && balances_Litecoin_SV[this][to_s383] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][msgsender_MSG] >= 0) && balances_Litecoin_SV[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transfer_Litecoin_SV0 := true;
[L3]                 call_transfer_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND TRUE   __exception
[L1004]              __tmp__Balance := Balance;
[L1005]              __tmp__DType := DType;
[L1006]              __tmp__Alloc := Alloc;
[L1007]              __tmp__balance_ADDR := balance_ADDR;
[L1008]              __tmp__M_Ref_int := M_Ref_int;
[L1009]              __tmp__sum_balances0 := sum_balances0;
[L1010]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1011]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1012]              __tmp__sum_allowed1 := sum_allowed1;
[L1013]              __tmp__Length := Length;
[L1014]              __tmp__now := now;
[L1015]              __tmp__owner_Owned := owner_Owned;
[L1016]              __tmp__newOwner_Owned := newOwner_Owned;
[L1017]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1018]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1019]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1020]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1021]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1022]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1023]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1024]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1025]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2586]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2587]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2587]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2588]  COND FALSE  !(revert)
[L2594]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][msgsender_MSG];
[L2595]              __tmp__balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2596]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][msgsender_MSG];
[L2597]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2598]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND TRUE   !(c_s23 >= a_s23)
[L2222]              revert := true;
[L2598]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2599]  COND TRUE   revert
[L1025]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1026]              assume revert || gas < 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:34:43,288 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:34:43,288 INFO  L82        PathProgramCache]: Analyzing trace with hash 834282249, now seen corresponding path program 1 times
[2020-11-24 20:34:43,289 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:34:43,303 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:34:43,421 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-11-24 20:34:43,422 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:34:43,422 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 20:34:43,422 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:34:43,422 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 20:34:43,422 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-24 20:34:43,422 INFO  L87              Difference]: Start difference. First operand 2022 states and 2180 transitions. cyclomatic complexity: 161 Second operand 9 states.
[2020-11-24 20:34:43,662 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:34:43,662 INFO  L93              Difference]: Finished difference Result 1162 states and 1248 transitions.
[2020-11-24 20:34:43,662 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-24 20:34:43,662 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1162 states and 1248 transitions.
[2020-11-24 20:34:43,664 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:34:43,664 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1162 states to 0 states and 0 transitions.
[2020-11-24 20:34:43,664 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:34:43,664 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:34:43,664 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:34:43,664 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:34:43,664 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:34:43,664 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:34:43,664 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:34:43,664 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:34:43,664 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:34:43,664 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:34:43,664 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:34:43,667 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:34:43 BasicIcfg
[2020-11-24 20:34:43,667 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:34:43,667 INFO  L168              Benchmark]: Toolchain (without parser) took 11841.71 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 881.3 MB). Free memory was 935.2 MB in the beginning and 1.6 GB in the end (delta: -618.5 MB). Peak memory consumption was 262.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,668 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,668 INFO  L168              Benchmark]: Boogie Preprocessor took 94.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,668 INFO  L168              Benchmark]: UtopiaSpecLang took 63.66 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,670 INFO  L168              Benchmark]: Boogie Printer took 22.62 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,670 INFO  L168              Benchmark]: RCFGBuilder took 732.89 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 790.2 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,670 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.78 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 786.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,670 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1301.90 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 216.0 MB). Free memory was 786.7 MB in the beginning and 966.8 MB in the end (delta: -180.2 MB). Peak memory consumption was 172.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,671 INFO  L168              Benchmark]: BlockEncodingV2 took 130.40 ms. Allocated memory is still 1.2 GB. Free memory was 966.8 MB in the beginning and 900.3 MB in the end (delta: 66.5 MB). Peak memory consumption was 66.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,671 INFO  L168              Benchmark]: BuchiAutomizer took 9456.38 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 665.3 MB). Free memory was 900.3 MB in the beginning and 1.6 GB in the end (delta: -653.4 MB). Peak memory consumption was 11.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:34:43,675 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4036 locations, 6912 edges
  - StatisticsResult: Encoded RCFG
    3976 locations, 6752 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 94.16 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.66 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.62 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 732.89 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 790.2 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.78 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 786.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1301.90 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 216.0 MB). Free memory was 786.7 MB in the beginning and 966.8 MB in the end (delta: -180.2 MB). Peak memory consumption was 172.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 130.40 ms. Allocated memory is still 1.2 GB. Free memory was 966.8 MB in the beginning and 900.3 MB in the end (delta: 66.5 MB). Peak memory consumption was 66.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9456.38 ms. Allocated memory was 1.2 GB in the beginning and 1.9 GB in the end (delta: 665.3 MB). Free memory was 900.3 MB in the beginning and 1.6 GB in the end (delta: -653.4 MB). Peak memory consumption was 11.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1706 locations, 2138 edges
  - StatisticsResult: BuchiProgram size
    4036 locations, 6912 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic). 7 modules have a trivial ranking function, the largest among these consists of 18 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.4s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 1.0s. Construction of modules took 6.1s. BÃ¼chi inclusion checks took 1.6s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 6 MinimizatonAttempts, 2213 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3015 states and ocurred in iteration 5.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 19687 SDtfs, 23258 SDslu, 39299 SDs, 0 SdLazy, 54618 SolverSat, 3892 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_Litecoin_SV0) ==> ( <>(success_transfer_Litecoin_SV0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
