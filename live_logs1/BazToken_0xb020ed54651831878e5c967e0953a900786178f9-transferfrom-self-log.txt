This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:13:48,237 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:13:48,239 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:13:48,249 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:13:48,249 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:13:48,249 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:13:48,250 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:13:48,252 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:13:48,253 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:13:48,254 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:13:48,254 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:13:48,255 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:13:48,255 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:13:48,256 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:13:48,257 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:13:48,257 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:13:48,258 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:13:48,259 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:13:48,260 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:13:48,262 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:13:48,262 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:13:48,263 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:13:48,265 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:13:48,265 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:13:48,265 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:13:48,265 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:13:48,266 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:13:48,266 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:13:48,266 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:13:48,267 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:13:48,267 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:13:48,267 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:13:48,268 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:13:48,268 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:13:48,269 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:13:48,269 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:13:48,270 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:13:48,270 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:13:48,270 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:13:48,271 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:13:48,271 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:13:48,271 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:13:48,279 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:13:48,279 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:13:48,280 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:13:48,280 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:13:48,280 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:13:48,280 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:13:48,280 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:13:48,280 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:13:48,281 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:13:48,281 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:13:48,281 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:13:48,282 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:13:48,282 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:13:48,282 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:13:48,282 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:13:48,282 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:13:48,282 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:13:48,282 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:13:48,282 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:13:48,305 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:13:48,316 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:13:48,319 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:13:48,320 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:13:48,320 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:13:48,321 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl
[2020-11-25 00:13:48,321 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl'
[2020-11-25 00:13:48,405 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:13:48,406 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:13:48,407 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:13:48,407 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:13:48,407 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:13:48,423 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,425 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,454 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,455 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,474 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,485 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,492 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,502 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:13:48,502 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:13:48,502 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:13:48,504 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:13:48,508 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/1) ...
[2020-11-25 00:13:48,528 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BazToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BazToken[this][from] && value <= allowed_BazToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transferFrom(from, to, value), return == true && allowed_BazToken[this][from][msg.sender] == old(allowed_BazToken[this][from][msg.sender]) - value && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:13:48,534 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BazToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BazToken[this][from] && value <= allowed_BazToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transferFrom(from, to, value), return == true && allowed_BazToken[this][from][msg.sender] == old(allowed_BazToken[this][from][msg.sender]) - value && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:13:48,542 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BazToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BazToken[this][from] && value <= allowed_BazToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transferFrom(from, to, value), return == true && allowed_BazToken[this][from][msg.sender] == old(allowed_BazToken[this][from][msg.sender]) - value && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:13:48,550 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s458 || p2!=msg.sender ) && from_s458==to_s458 ) && tokens_s458<=balances_BazToken[this][from_s458] ) && tokens_s458<=allowed_BazToken[this][from_s458][msg.sender] ) && tokens_s458>=0 ) && tokens_s458<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BazToken[this][to_s458]>=0 ) && balances_BazToken[this][to_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BazToken[this][from_s458]>=0 ) && balances_BazToken[this][from_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_BazToken[this][from_s458][msg.sender]>=0 ) && allowed_BazToken[this][from_s458][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:13:48,553 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s458==true && allowed_BazToken[this][from_s458][msg.sender]==( ( old(allowed_BazToken[this][from_s458][msg.sender]) ) - tokens_s458 ) ) && _totalSupply_BazToken[this]==( old(_totalSupply_BazToken[this]) ) ) && balances_BazToken[this]==( old(balances_BazToken[this]) ) ) && allowed_BazToken[this][p1][p2]==( old(allowed_BazToken[this][p1][p2]) ) ) && symbol_BazToken[this]==( old(symbol_BazToken[this]) ) ) && name_BazToken[this]==( old(name_BazToken[this]) ) ) && decimals_BazToken[this]==( old(decimals_BazToken[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s458,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_BazToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_BazToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_BazToken>]]]]]]
[2020-11-25 00:13:48,559 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BazToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_BazToken[this][from] && value <= allowed_BazToken[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][to] >= 0 && balances_BazToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BazToken[this][from] >= 0 &&  balances_BazToken[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_BazToken[this][from][msg.sender] >= 0 && allowed_BazToken[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BazToken.transferFrom(from, to, value), return == true && allowed_BazToken[this][from][msg.sender] == old(allowed_BazToken[this][from][msg.sender]) - value && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this]) && balances_BazToken[this] == old(balances_BazToken[this]) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2]) && symbol_BazToken[this] == old(symbol_BazToken[this]) && name_BazToken[this] == old(name_BazToken[this]) && decimals_BazToken[this] == old(decimals_BazToken[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 00:13:48,559 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_BazToken0) ==> ( <>AP(success_transferFrom_BazToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:13:48,567 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:13:48 PropertyContainer
[2020-11-25 00:13:48,568 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:13:48,568 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:13:48,568 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:13:48,568 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:13:48,569 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/2) ...
[2020-11-25 00:13:48,569 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:13:48,570 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:13:48,584 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:13:48" (2/2) ...
[2020-11-25 00:13:48,584 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:13:48,585 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:13:48,585 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:13:48,585 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:13:48,586 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/2) ...
[2020-11-25 00:13:48,638 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:13:48,638 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:13:48,638 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 00:13:48,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 00:13:48,639 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 00:13:48,639 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:13:48,639 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:13:48,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:13:48,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 00:13:48,640 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:13:48,641 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 00:13:48,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 00:13:48,641 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 00:13:48,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 00:13:48,641 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 00:13:48,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 00:13:48,641 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 00:13:48,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 00:13:48,641 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 00:13:48,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 00:13:48,641 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken_NoBaseCtor__success
[2020-11-25 00:13:48,642 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken
[2020-11-25 00:13:48,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken
[2020-11-25 00:13:48,642 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken
[2020-11-25 00:13:48,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken
[2020-11-25 00:13:48,642 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken
[2020-11-25 00:13:48,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken
[2020-11-25 00:13:48,642 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken
[2020-11-25 00:13:48,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken
[2020-11-25 00:13:48,642 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken
[2020-11-25 00:13:48,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken
[2020-11-25 00:13:48,643 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken
[2020-11-25 00:13:48,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken
[2020-11-25 00:13:48,643 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken
[2020-11-25 00:13:48,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken
[2020-11-25 00:13:48,643 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken
[2020-11-25 00:13:48,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken
[2020-11-25 00:13:48,643 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BazToken__success
[2020-11-25 00:13:48,643 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken
[2020-11-25 00:13:48,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken
[2020-11-25 00:13:48,643 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken
[2020-11-25 00:13:48,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken
[2020-11-25 00:13:48,644 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken
[2020-11-25 00:13:48,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken
[2020-11-25 00:13:48,644 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken
[2020-11-25 00:13:48,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken
[2020-11-25 00:13:48,644 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken
[2020-11-25 00:13:48,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken
[2020-11-25 00:13:48,644 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:13:48,644 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:13:48,644 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:13:48,644 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BazToken
[2020-11-25 00:13:48,645 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,646 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:13:48,647 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 00:13:48,648 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken_NoBaseCtor__fail
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken__success
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure BazToken_BazToken__fail
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken__success
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BazToken__fail
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken__success
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BazToken__fail
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken__success
[2020-11-25 00:13:48,649 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BazToken__fail
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken__success
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_BazToken__fail
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken__success
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BazToken__fail
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken__success
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_BazToken__fail
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken__success
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_BazToken__fail
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BazToken__fail
[2020-11-25 00:13:48,650 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken__success
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_BazToken__fail
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken__success
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_BazToken__fail
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken__success
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure name_BazToken__fail
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken__success
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_BazToken__fail
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken__success
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_BazToken__fail
[2020-11-25 00:13:48,651 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:13:48,652 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:13:48,652 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:13:48,652 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:13:48,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:13:48,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:13:48,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 00:13:48,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 00:13:48,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 00:13:48,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 00:13:48,654 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 00:13:48,655 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken_NoBaseCtor__fail
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken_NoBaseCtor__success
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken__fail
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure BazToken_BazToken__success
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken__fail
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BazToken__success
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken__fail
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BazToken__success
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken__fail
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BazToken__success
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken__fail
[2020-11-25 00:13:48,656 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_BazToken__success
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken__fail
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BazToken__success
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken__fail
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_BazToken__success
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken__fail
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_BazToken__success
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BazToken__fail
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BazToken__success
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken__fail
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_BazToken__success
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken__fail
[2020-11-25 00:13:48,657 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_BazToken__success
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken__fail
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_BazToken__success
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken__fail
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_BazToken__success
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken__fail
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_BazToken__success
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:13:48,658 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 00:13:48,659 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BazToken
[2020-11-25 00:13:48,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:13:48,660 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:13:48,660 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:13:49,049 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:13:49,063 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:13:49,063 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:13:49,063 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:13:49,311 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:13:49,312 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 00:13:49,314 INFO  L202        PluginConnector]: Adding new model BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:13:49 BoogieIcfgContainer
[2020-11-25 00:13:49,314 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:13:48" (2/2) ...
[2020-11-25 00:13:49,314 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:13:49,314 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1be6c512 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:13:49, skipping insertion in model container
[2020-11-25 00:13:49,314 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:13:49,314 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:13:49,315 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:13:49,316 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:13:49,316 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/3) ...
[2020-11-25 00:13:49,317 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@784b7640 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:13:49, skipping insertion in model container
[2020-11-25 00:13:49,317 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:13:48" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:13:49,355 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:13:49 NWAContainer
[2020-11-25 00:13:49,355 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:13:49,355 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:13:49,356 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:13:49,356 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:13:49,357 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:13:49" (3/4) ...
[2020-11-25 00:13:49,358 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@24a4873e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:13:49, skipping insertion in model container
[2020-11-25 00:13:49,358 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:13:49" (4/4) ...
[2020-11-25 00:13:49,361 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:13:49,365 INFO  L110   BuchiProductObserver]: Initial RCFG 1565 locations, 1977 edges
[2020-11-25 00:13:49,366 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:13:49,376 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:13:50,822 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:13:50,826 INFO  L110   BuchiProductObserver]: BuchiProgram size 3722 locations, 6405 edges
[2020-11-25 00:13:50,827 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:13:50 BoogieIcfgContainer
[2020-11-25 00:13:50,827 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:13:50,827 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:13:50,827 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:13:50,828 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:13:50,829 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:13:50" (1/1) ...
[2020-11-25 00:13:50,910 INFO  L313           BlockEncoder]: Initial Icfg 3722 locations, 6405 edges
[2020-11-25 00:13:50,910 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:13:50,911 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:13:50,911 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:13:50,912 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:13:50,924 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 00:13:50,933 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 00:13:50,944 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:13:50,949 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:13:50,951 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:13:50,952 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:13:50,956 INFO  L313           BlockEncoder]: Encoded RCFG 3662 locations, 6245 edges
[2020-11-25 00:13:50,956 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:13:50 BasicIcfg
[2020-11-25 00:13:50,956 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:13:50,957 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:13:50,957 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:13:50,959 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:13:50,959 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:13:50,959 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:13:48" (1/6) ...
[2020-11-25 00:13:50,961 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8073b98 and model type BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:13:50, skipping insertion in model container
[2020-11-25 00:13:50,961 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:13:50,961 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:13:48" (2/6) ...
[2020-11-25 00:13:50,961 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8073b98 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:13:50, skipping insertion in model container
[2020-11-25 00:13:50,961 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:13:50,961 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:13:49" (3/6) ...
[2020-11-25 00:13:50,961 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8073b98 and model type BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:13:50, skipping insertion in model container
[2020-11-25 00:13:50,961 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:13:50,961 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:13:49" (4/6) ...
[2020-11-25 00:13:50,961 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8073b98 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:13:50, skipping insertion in model container
[2020-11-25 00:13:50,962 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:13:50,962 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:13:50" (5/6) ...
[2020-11-25 00:13:50,962 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@8073b98 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:13:50, skipping insertion in model container
[2020-11-25 00:13:50,962 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:13:50,962 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:13:50" (6/6) ...
[2020-11-25 00:13:50,963 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BazToken_0xb020ed54651831878e5c967e0953a900786178f9_transferfrom-self.bpl_BEv2
[2020-11-25 00:13:50,997 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:13:50,998 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:13:50,998 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:13:50,998 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:13:50,998 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:13:50,998 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:13:50,998 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:13:50,998 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:13:50,998 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:13:51,028 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3662 states.
[2020-11-25 00:13:51,078 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:13:51,078 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:13:51,078 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:13:51,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:13:51,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:13:51,086 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:13:51,086 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3662 states.
[2020-11-25 00:13:51,104 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:13:51,105 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:13:51,105 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:13:51,107 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:13:51,107 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:13:51,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:13:51,121 INFO  L82        PathProgramCache]: Analyzing trace with hash -1383060396, now seen corresponding path program 1 times
[2020-11-25 00:13:51,124 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:13:51,142 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:13:51,179 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:13:51,181 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:13:51,181 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:13:51,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:13:51,368 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:13:51,369 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:13:51,370 INFO  L87              Difference]: Start difference. First operand 3662 states. Second operand 4 states.
[2020-11-25 00:13:51,653 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:13:51,653 INFO  L93              Difference]: Finished difference Result 2516 states and 2745 transitions.
[2020-11-25 00:13:51,653 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:13:51,654 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2516 states and 2745 transitions.
[2020-11-25 00:13:51,668 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:13:51,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2516 states to 2516 states and 2745 transitions.
[2020-11-25 00:13:51,687 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 00:13:51,689 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-11-25 00:13:51,690 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2516 states and 2745 transitions.
[2020-11-25 00:13:51,696 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:13:51,696 INFO  L728         BuchiCegarLoop]: Abstraction has 2516 states and 2745 transitions.
[2020-11-25 00:13:51,713 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2516 states and 2745 transitions.
[2020-11-25 00:13:51,751 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2516 to 2516.
[2020-11-25 00:13:51,751 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2516 states.
[2020-11-25 00:13:51,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2516 states to 2516 states and 2745 transitions.
[2020-11-25 00:13:51,756 INFO  L751         BuchiCegarLoop]: Abstraction has 2516 states and 2745 transitions.
[2020-11-25 00:13:51,756 INFO  L631         BuchiCegarLoop]: Abstraction has 2516 states and 2745 transitions.
[2020-11-25 00:13:51,756 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:13:51,756 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2516 states and 2745 transitions.
[2020-11-25 00:13:51,762 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:13:51,763 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:13:51,763 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:13:51,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:13:51,765 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:13:51,769 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:13:51,769 INFO  L82        PathProgramCache]: Analyzing trace with hash -2034093142, now seen corresponding path program 1 times
[2020-11-25 00:13:51,770 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:13:51,777 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:13:51,801 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:13:51,801 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:13:51,801 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:13:51,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:13:51,803 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:13:51,803 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:13:51,803 INFO  L87              Difference]: Start difference. First operand 2516 states and 2745 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 00:13:52,301 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:13:52,301 INFO  L93              Difference]: Finished difference Result 3736 states and 4237 transitions.
[2020-11-25 00:13:52,301 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:13:52,301 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3736 states and 4237 transitions.
[2020-11-25 00:13:52,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 00:13:52,331 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3736 states to 3616 states and 4109 transitions.
[2020-11-25 00:13:52,332 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 00:13:52,332 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 00:13:52,333 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3616 states and 4109 transitions.
[2020-11-25 00:13:52,338 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:13:52,338 INFO  L728         BuchiCegarLoop]: Abstraction has 3616 states and 4109 transitions.
[2020-11-25 00:13:52,341 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3616 states and 4109 transitions.
[2020-11-25 00:13:52,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3616 to 2552.
[2020-11-25 00:13:52,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2552 states.
[2020-11-25 00:13:52,368 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2552 states to 2552 states and 2737 transitions.
[2020-11-25 00:13:52,368 INFO  L751         BuchiCegarLoop]: Abstraction has 2552 states and 2737 transitions.
[2020-11-25 00:13:52,368 INFO  L631         BuchiCegarLoop]: Abstraction has 2552 states and 2737 transitions.
[2020-11-25 00:13:52,368 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:13:52,368 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2552 states and 2737 transitions.
[2020-11-25 00:13:52,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:13:52,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:13:52,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:13:52,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:13:52,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:13:52,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:13:52,378 INFO  L82        PathProgramCache]: Analyzing trace with hash -83547604, now seen corresponding path program 1 times
[2020-11-25 00:13:52,379 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:13:52,392 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:13:52,466 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:13:52,466 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:13:52,466 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:13:52,467 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:13:52,467 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:13:52,467 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:13:52,467 INFO  L87              Difference]: Start difference. First operand 2552 states and 2737 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 00:13:53,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:13:53,213 INFO  L93              Difference]: Finished difference Result 2760 states and 2961 transitions.
[2020-11-25 00:13:53,213 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:13:53,213 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2760 states and 2961 transitions.
[2020-11-25 00:13:53,220 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:13:53,228 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2760 states to 2760 states and 2961 transitions.
[2020-11-25 00:13:53,228 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 00:13:53,228 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 00:13:53,228 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2760 states and 2961 transitions.
[2020-11-25 00:13:53,230 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:13:53,230 INFO  L728         BuchiCegarLoop]: Abstraction has 2760 states and 2961 transitions.
[2020-11-25 00:13:53,233 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2760 states and 2961 transitions.
[2020-11-25 00:13:53,250 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2760 to 2608.
[2020-11-25 00:13:53,250 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2608 states.
[2020-11-25 00:13:53,252 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2608 states to 2608 states and 2797 transitions.
[2020-11-25 00:13:53,252 INFO  L751         BuchiCegarLoop]: Abstraction has 2608 states and 2797 transitions.
[2020-11-25 00:13:53,253 INFO  L631         BuchiCegarLoop]: Abstraction has 2608 states and 2797 transitions.
[2020-11-25 00:13:53,253 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:13:53,253 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2608 states and 2797 transitions.
[2020-11-25 00:13:53,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:13:53,257 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:13:53,257 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:13:53,259 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:13:53,259 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:13:53,262 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:13:53,262 INFO  L82        PathProgramCache]: Analyzing trace with hash -533193788, now seen corresponding path program 1 times
[2020-11-25 00:13:53,262 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:13:53,317 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:13:53,917 WARN  L188               SmtUtils]: Spent 189.00 ms on a formula simplification. DAG size of input: 87 DAG size of output: 68
[2020-11-25 00:13:54,253 WARN  L188               SmtUtils]: Spent 300.00 ms on a formula simplification. DAG size of input: 97 DAG size of output: 75
[2020-11-25 00:13:54,428 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 90
[2020-11-25 00:13:54,572 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 100 DAG size of output: 85
[2020-11-25 00:13:54,766 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 87
[2020-11-25 00:13:55,112 WARN  L188               SmtUtils]: Spent 101.00 ms on a formula simplification. DAG size of input: 142 DAG size of output: 74
[2020-11-25 00:13:55,697 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 00:13:55,698 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:13:55,698 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 00:13:55,699 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:13:55,699 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 00:13:55,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=72, Invalid=920, Unknown=0, NotChecked=0, Total=992
[2020-11-25 00:13:55,700 INFO  L87              Difference]: Start difference. First operand 2608 states and 2797 transitions. cyclomatic complexity: 191 Second operand 32 states.
[2020-11-25 00:14:08,318 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:08,318 INFO  L93              Difference]: Finished difference Result 2701 states and 2916 transitions.
[2020-11-25 00:14:08,318 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 00:14:08,319 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2701 states and 2916 transitions.
[2020-11-25 00:14:08,324 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:14:08,331 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2701 states to 2701 states and 2916 transitions.
[2020-11-25 00:14:08,331 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 926
[2020-11-25 00:14:08,331 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 926
[2020-11-25 00:14:08,332 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2701 states and 2916 transitions.
[2020-11-25 00:14:08,334 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:08,334 INFO  L728         BuchiCegarLoop]: Abstraction has 2701 states and 2916 transitions.
[2020-11-25 00:14:08,336 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2701 states and 2916 transitions.
[2020-11-25 00:14:08,356 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2701 to 2684.
[2020-11-25 00:14:08,356 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2684 states.
[2020-11-25 00:14:08,359 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2684 states to 2684 states and 2883 transitions.
[2020-11-25 00:14:08,359 INFO  L751         BuchiCegarLoop]: Abstraction has 2684 states and 2883 transitions.
[2020-11-25 00:14:08,359 INFO  L631         BuchiCegarLoop]: Abstraction has 2684 states and 2883 transitions.
[2020-11-25 00:14:08,359 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:14:08,359 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2684 states and 2883 transitions.
[2020-11-25 00:14:08,362 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:08,362 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:08,362 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:08,364 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:08,364 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][from_s458];
[L2416]              __tmp__balances_BazToken[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == BazToken
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][from_s458];
[L2416]              __tmp__balances_BazToken[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == BazToken
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:08,367 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:08,367 INFO  L82        PathProgramCache]: Analyzing trace with hash 2141799586, now seen corresponding path program 1 times
[2020-11-25 00:14:08,368 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:08,375 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:08,435 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 00:14:08,435 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:14:08,435 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 00:14:08,435 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:08,436 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 00:14:08,436 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 00:14:08,436 INFO  L87              Difference]: Start difference. First operand 2684 states and 2883 transitions. cyclomatic complexity: 203 Second operand 14 states.
[2020-11-25 00:14:09,673 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:09,673 INFO  L93              Difference]: Finished difference Result 2826 states and 3087 transitions.
[2020-11-25 00:14:09,673 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 00:14:09,673 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2826 states and 3087 transitions.
[2020-11-25 00:14:09,679 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 00:14:09,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2826 states to 2826 states and 3087 transitions.
[2020-11-25 00:14:09,686 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 989
[2020-11-25 00:14:09,687 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 989
[2020-11-25 00:14:09,687 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2826 states and 3087 transitions.
[2020-11-25 00:14:09,689 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:09,689 INFO  L728         BuchiCegarLoop]: Abstraction has 2826 states and 3087 transitions.
[2020-11-25 00:14:09,692 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2826 states and 3087 transitions.
[2020-11-25 00:14:09,708 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2826 to 2760.
[2020-11-25 00:14:09,708 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2760 states.
[2020-11-25 00:14:09,711 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2760 states to 2760 states and 2977 transitions.
[2020-11-25 00:14:09,711 INFO  L751         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 00:14:09,711 INFO  L631         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 00:14:09,711 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:14:09,711 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2760 states and 2977 transitions.
[2020-11-25 00:14:09,714 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:14:09,714 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:09,714 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:09,715 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:09,715 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][from_s458];
[L2416]              __tmp__balances_BazToken[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == BazToken
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == BazToken
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:09,717 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:09,718 INFO  L82        PathProgramCache]: Analyzing trace with hash -494987182, now seen corresponding path program 1 times
[2020-11-25 00:14:09,718 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:09,727 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:09,801 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 00:14:09,802 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:09,802 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 00:14:09,802 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:09,802 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 00:14:09,802 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 00:14:09,802 INFO  L87              Difference]: Start difference. First operand 2760 states and 2977 transitions. cyclomatic complexity: 223 Second operand 17 states.
[2020-11-25 00:14:11,251 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:11,251 INFO  L93              Difference]: Finished difference Result 2791 states and 3029 transitions.
[2020-11-25 00:14:11,251 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 00:14:11,251 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2791 states and 3029 transitions.
[2020-11-25 00:14:11,257 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:14:11,262 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2791 states to 2791 states and 3029 transitions.
[2020-11-25 00:14:11,262 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 996
[2020-11-25 00:14:11,263 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 996
[2020-11-25 00:14:11,263 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2791 states and 3029 transitions.
[2020-11-25 00:14:11,265 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:11,265 INFO  L728         BuchiCegarLoop]: Abstraction has 2791 states and 3029 transitions.
[2020-11-25 00:14:11,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2791 states and 3029 transitions.
[2020-11-25 00:14:11,281 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2791 to 2760.
[2020-11-25 00:14:11,282 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2760 states.
[2020-11-25 00:14:11,284 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2760 states to 2760 states and 2977 transitions.
[2020-11-25 00:14:11,284 INFO  L751         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 00:14:11,284 INFO  L631         BuchiCegarLoop]: Abstraction has 2760 states and 2977 transitions.
[2020-11-25 00:14:11,284 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:14:11,284 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2760 states and 2977 transitions.
[2020-11-25 00:14:11,287 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:14:11,287 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:11,287 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:11,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:11,288 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][from_s458];
[L2416]              __tmp__balances_BazToken[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == BazToken
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == BazToken
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L2431]  COND FALSE  !(revert)
[L2437]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][to_s458];
[L2438]              __tmp__balances_BazToken[this][to_s458] := __var_7;
[L2439]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][to_s458];
[L2440]              success_s458 := true;
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:11,291 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:11,291 INFO  L82        PathProgramCache]: Analyzing trace with hash -78031901, now seen corresponding path program 1 times
[2020-11-25 00:14:11,292 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:11,300 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:11,323 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 00:14:11,324 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:14:11,324 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 00:14:11,324 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:11,324 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 00:14:11,324 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 00:14:11,324 INFO  L87              Difference]: Start difference. First operand 2760 states and 2977 transitions. cyclomatic complexity: 223 Second operand 5 states.
[2020-11-25 00:14:11,653 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:11,653 INFO  L93              Difference]: Finished difference Result 3488 states and 3897 transitions.
[2020-11-25 00:14:11,653 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:14:11,653 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3488 states and 3897 transitions.
[2020-11-25 00:14:11,660 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 00:14:11,668 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3488 states to 2679 states and 3085 transitions.
[2020-11-25 00:14:11,668 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 752
[2020-11-25 00:14:11,669 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 752
[2020-11-25 00:14:11,669 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2679 states and 3085 transitions.
[2020-11-25 00:14:11,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:11,671 INFO  L728         BuchiCegarLoop]: Abstraction has 2679 states and 3085 transitions.
[2020-11-25 00:14:11,673 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2679 states and 3085 transitions.
[2020-11-25 00:14:11,686 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2679 to 1921.
[2020-11-25 00:14:11,687 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1921 states.
[2020-11-25 00:14:11,688 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1921 states to 1921 states and 2080 transitions.
[2020-11-25 00:14:11,688 INFO  L751         BuchiCegarLoop]: Abstraction has 1921 states and 2080 transitions.
[2020-11-25 00:14:11,688 INFO  L631         BuchiCegarLoop]: Abstraction has 1921 states and 2080 transitions.
[2020-11-25 00:14:11,688 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:14:11,688 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1921 states and 2080 transitions.
[2020-11-25 00:14:11,691 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:14:11,691 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:11,691 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:11,692 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:11,692 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:11,695 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:11,695 INFO  L82        PathProgramCache]: Analyzing trace with hash -473774648, now seen corresponding path program 1 times
[2020-11-25 00:14:11,695 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:11,740 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:12,636 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 3 proven. 1 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 00:14:12,636 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:12,637 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 00:14:12,637 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:12,637 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 00:14:12,637 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=111, Invalid=1149, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 00:14:12,637 INFO  L87              Difference]: Start difference. First operand 1921 states and 2080 transitions. cyclomatic complexity: 163 Second operand 36 states.
[2020-11-25 00:14:18,197 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:18,197 INFO  L93              Difference]: Finished difference Result 1954 states and 2140 transitions.
[2020-11-25 00:14:18,197 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 33 states. 
[2020-11-25 00:14:18,198 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1954 states and 2140 transitions.
[2020-11-25 00:14:18,201 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:14:18,205 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1954 states to 1954 states and 2140 transitions.
[2020-11-25 00:14:18,205 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 600
[2020-11-25 00:14:18,205 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 600
[2020-11-25 00:14:18,205 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1954 states and 2140 transitions.
[2020-11-25 00:14:18,207 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:18,207 INFO  L728         BuchiCegarLoop]: Abstraction has 1954 states and 2140 transitions.
[2020-11-25 00:14:18,208 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1954 states and 2140 transitions.
[2020-11-25 00:14:18,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1954 to 1943.
[2020-11-25 00:14:18,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 00:14:18,220 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2113 transitions.
[2020-11-25 00:14:18,220 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 00:14:18,220 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 00:14:18,220 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:14:18,220 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2113 transitions.
[2020-11-25 00:14:18,222 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:18,222 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:18,222 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:18,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:18,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND FALSE  !(choice == 11)
[L4181]  COND FALSE  !(choice == 10)
[L4187]  COND FALSE  !(choice == 9)
[L4193]  COND FALSE  !(choice == 8)
[L4199]  COND FALSE  !(choice == 7)
[L4205]  COND FALSE  !(choice == 6)
[L4211]  COND FALSE  !(choice == 5)
[L4217]  COND FALSE  !(choice == 4)
[L4223]  COND FALSE  !(choice == 3)
[L4229]  COND TRUE   choice == 2
[L4230]              gas := gas - 21000;
[L4231]  COND TRUE   gas >= 0
[L4232]              assume tokens_s517 >= 0 && tokens_s517 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4233]              assume msgvalue_MSG == 0;
[L4234]  CALL        call success_s517 := approveAndCall~address~uint256~bytes_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L1157]              havoc __exception;
[L1158]              revert := false;
[L1159]  COND FALSE  !(__exception)
[L1182]  CALL        call success_s517 := approveAndCall~address~uint256~bytes_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L2520]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s517];
[L2521]              allowed_BazToken[this][msgsender_MSG][spender_s517] := tokens_s517;
[L2522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s517];
[L2523]              assert { :EventEmitted "Approval_BazToken" } true;
[L2524]              assume DType[spender_s517] == ApproveAndCallFallBack;
[L2525]              __var_8 := spender_s517;
[L2526]              __var_10 := this;
[L2528]              success_s517 := true;
[L1182]  RET         call success_s517 := approveAndCall~address~uint256~bytes_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L1183]              assume !revert && gas >= 0;
[L4234]  RET         call success_s517 := approveAndCall~address~uint256~bytes_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:18,226 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:18,227 INFO  L82        PathProgramCache]: Analyzing trace with hash -491677640, now seen corresponding path program 1 times
[2020-11-25 00:14:18,227 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:18,263 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:19,353 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 14 proven. 3 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-11-25 00:14:19,354 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:19,354 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 00:14:19,354 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:19,354 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 00:14:19,354 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1142, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 00:14:19,355 INFO  L87              Difference]: Start difference. First operand 1943 states and 2113 transitions. cyclomatic complexity: 176 Second operand 36 states.
[2020-11-25 00:14:24,187 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:24,187 INFO  L93              Difference]: Finished difference Result 1966 states and 2176 transitions.
[2020-11-25 00:14:24,187 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 00:14:24,187 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1966 states and 2176 transitions.
[2020-11-25 00:14:24,190 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:14:24,195 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1966 states to 1966 states and 2176 transitions.
[2020-11-25 00:14:24,195 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 604
[2020-11-25 00:14:24,195 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 604
[2020-11-25 00:14:24,195 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1966 states and 2176 transitions.
[2020-11-25 00:14:24,197 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:24,197 INFO  L728         BuchiCegarLoop]: Abstraction has 1966 states and 2176 transitions.
[2020-11-25 00:14:24,198 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1966 states and 2176 transitions.
[2020-11-25 00:14:24,208 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1966 to 1943.
[2020-11-25 00:14:24,208 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 00:14:24,210 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2113 transitions.
[2020-11-25 00:14:24,210 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 00:14:24,210 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 00:14:24,210 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:14:24,210 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2113 transitions.
[2020-11-25 00:14:24,212 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:24,212 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:24,212 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:24,213 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:24,213 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][from_s458];
[L2416]              __tmp__balances_BazToken[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == BazToken
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:24,216 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:24,216 INFO  L82        PathProgramCache]: Analyzing trace with hash -1960927322, now seen corresponding path program 1 times
[2020-11-25 00:14:24,217 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:24,226 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:24,272 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 00:14:24,272 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:14:24,272 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:14:24,272 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:24,272 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:14:24,272 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:14:24,273 INFO  L87              Difference]: Start difference. First operand 1943 states and 2113 transitions. cyclomatic complexity: 176 Second operand 7 states.
[2020-11-25 00:14:24,580 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:24,580 INFO  L93              Difference]: Finished difference Result 2003 states and 2210 transitions.
[2020-11-25 00:14:24,580 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:14:24,581 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2003 states and 2210 transitions.
[2020-11-25 00:14:24,585 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:14:24,589 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2003 states to 2003 states and 2210 transitions.
[2020-11-25 00:14:24,589 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 621
[2020-11-25 00:14:24,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 621
[2020-11-25 00:14:24,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2003 states and 2210 transitions.
[2020-11-25 00:14:24,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:24,591 INFO  L728         BuchiCegarLoop]: Abstraction has 2003 states and 2210 transitions.
[2020-11-25 00:14:24,593 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2003 states and 2210 transitions.
[2020-11-25 00:14:24,602 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2003 to 1943.
[2020-11-25 00:14:24,602 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 00:14:24,604 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2113 transitions.
[2020-11-25 00:14:24,604 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 00:14:24,604 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2113 transitions.
[2020-11-25 00:14:24,604 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 00:14:24,604 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2113 transitions.
[2020-11-25 00:14:24,606 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:24,606 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:24,606 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:24,607 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:24,607 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][from_s458];
[L2416]              __tmp__balances_BazToken[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == BazToken
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == BazToken
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_BazToken_lvl0 := alloc_allowed_BazToken_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_BazToken := symbol_BazToken;
[L1064]              __tmp__name_BazToken := name_BazToken;
[L1065]              __tmp__decimals_BazToken := decimals_BazToken;
[L1066]              __tmp___totalSupply_BazToken := _totalSupply_BazToken;
[L1067]              __tmp__balances_BazToken := balances_BazToken;
[L1068]              __tmp__allowed_BazToken := allowed_BazToken;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == BazToken
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BazToken[this][from_s458];
[L2416]              __tmp__balances_BazToken[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BazToken[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == BazToken
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_BazToken[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == BazToken
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_BazToken[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:24,611 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:24,611 INFO  L82        PathProgramCache]: Analyzing trace with hash 994886606, now seen corresponding path program 1 times
[2020-11-25 00:14:24,611 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:24,623 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:24,703 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-25 00:14:24,703 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:24,704 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 00:14:24,704 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:24,704 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-25 00:14:24,704 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-11-25 00:14:24,704 INFO  L87              Difference]: Start difference. First operand 1943 states and 2113 transitions. cyclomatic complexity: 176 Second operand 11 states.
[2020-11-25 00:14:25,575 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:25,575 INFO  L93              Difference]: Finished difference Result 1999 states and 2193 transitions.
[2020-11-25 00:14:25,575 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 00:14:25,575 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1999 states and 2193 transitions.
[2020-11-25 00:14:25,579 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:25,583 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1999 states to 1959 states and 2151 transitions.
[2020-11-25 00:14:25,583 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 618
[2020-11-25 00:14:25,584 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 618
[2020-11-25 00:14:25,584 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1959 states and 2151 transitions.
[2020-11-25 00:14:25,585 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:25,585 INFO  L728         BuchiCegarLoop]: Abstraction has 1959 states and 2151 transitions.
[2020-11-25 00:14:25,586 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1959 states and 2151 transitions.
[2020-11-25 00:14:25,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1959 to 1863.
[2020-11-25 00:14:25,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1863 states.
[2020-11-25 00:14:25,596 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1863 states to 1863 states and 2014 transitions.
[2020-11-25 00:14:25,596 INFO  L751         BuchiCegarLoop]: Abstraction has 1863 states and 2014 transitions.
[2020-11-25 00:14:25,596 INFO  L631         BuchiCegarLoop]: Abstraction has 1863 states and 2014 transitions.
[2020-11-25 00:14:25,596 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 00:14:25,596 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1863 states and 2014 transitions.
[2020-11-25 00:14:25,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:14:25,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:25,598 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:25,599 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:25,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == BazToken
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2365]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == BazToken
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2376]              balances_BazToken[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:25,602 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:25,602 INFO  L82        PathProgramCache]: Analyzing trace with hash 1511968818, now seen corresponding path program 1 times
[2020-11-25 00:14:25,602 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:25,643 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:26,076 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 67 proven. 3 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 00:14:26,076 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:26,076 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:14:26,077 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:26,077 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:14:26,077 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=589, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:14:26,077 INFO  L87              Difference]: Start difference. First operand 1863 states and 2014 transitions. cyclomatic complexity: 155 Second operand 26 states.
[2020-11-25 00:14:28,754 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:28,755 INFO  L93              Difference]: Finished difference Result 1890 states and 2047 transitions.
[2020-11-25 00:14:28,755 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 00:14:28,755 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1890 states and 2047 transitions.
[2020-11-25 00:14:28,758 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:14:28,763 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1890 states to 1890 states and 2047 transitions.
[2020-11-25 00:14:28,763 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 00:14:28,763 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 585
[2020-11-25 00:14:28,763 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1890 states and 2047 transitions.
[2020-11-25 00:14:28,764 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:28,764 INFO  L728         BuchiCegarLoop]: Abstraction has 1890 states and 2047 transitions.
[2020-11-25 00:14:28,766 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1890 states and 2047 transitions.
[2020-11-25 00:14:28,775 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1890 to 1867.
[2020-11-25 00:14:28,775 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1867 states.
[2020-11-25 00:14:28,777 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1867 states to 1867 states and 2024 transitions.
[2020-11-25 00:14:28,777 INFO  L751         BuchiCegarLoop]: Abstraction has 1867 states and 2024 transitions.
[2020-11-25 00:14:28,777 INFO  L631         BuchiCegarLoop]: Abstraction has 1867 states and 2024 transitions.
[2020-11-25 00:14:28,777 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 00:14:28,777 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1867 states and 2024 transitions.
[2020-11-25 00:14:28,779 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:14:28,779 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:28,779 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:28,780 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:28,780 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:28,784 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:28,784 INFO  L82        PathProgramCache]: Analyzing trace with hash -164579854, now seen corresponding path program 1 times
[2020-11-25 00:14:28,784 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:28,854 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:29,963 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 4 proven. 81 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 00:14:29,963 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:29,963 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 00:14:29,963 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:29,963 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 00:14:29,964 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=121, Invalid=1285, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 00:14:29,964 INFO  L87              Difference]: Start difference. First operand 1867 states and 2024 transitions. cyclomatic complexity: 162 Second operand 38 states.
[2020-11-25 00:14:34,758 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:34,758 INFO  L93              Difference]: Finished difference Result 2134 states and 2373 transitions.
[2020-11-25 00:14:34,758 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 00:14:34,759 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2134 states and 2373 transitions.
[2020-11-25 00:14:34,763 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:34,767 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2134 states to 2134 states and 2373 transitions.
[2020-11-25 00:14:34,767 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 696
[2020-11-25 00:14:34,768 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 696
[2020-11-25 00:14:34,768 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2134 states and 2373 transitions.
[2020-11-25 00:14:34,769 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:34,769 INFO  L728         BuchiCegarLoop]: Abstraction has 2134 states and 2373 transitions.
[2020-11-25 00:14:34,770 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2134 states and 2373 transitions.
[2020-11-25 00:14:34,779 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2134 to 2065.
[2020-11-25 00:14:34,779 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2065 states.
[2020-11-25 00:14:34,781 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2065 states to 2065 states and 2291 transitions.
[2020-11-25 00:14:34,781 INFO  L751         BuchiCegarLoop]: Abstraction has 2065 states and 2291 transitions.
[2020-11-25 00:14:34,781 INFO  L631         BuchiCegarLoop]: Abstraction has 2065 states and 2291 transitions.
[2020-11-25 00:14:34,781 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 00:14:34,781 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2065 states and 2291 transitions.
[2020-11-25 00:14:34,783 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:34,783 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:34,783 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:34,784 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:34,784 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_BazToken0 := true;
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:34,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:34,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 1451613868, now seen corresponding path program 1 times
[2020-11-25 00:14:34,787 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:34,836 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:35,300 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 99 DAG size of output: 71
[2020-11-25 00:14:35,483 WARN  L188               SmtUtils]: Spent 136.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 86
[2020-11-25 00:14:35,716 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification. DAG size of input: 116 DAG size of output: 95
[2020-11-25 00:14:35,981 WARN  L188               SmtUtils]: Spent 204.00 ms on a formula simplification. DAG size of input: 170 DAG size of output: 105
[2020-11-25 00:14:36,532 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 8 proven. 4 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-11-25 00:14:36,532 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:36,532 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 00:14:36,533 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:36,533 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 00:14:36,533 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=111, Invalid=1079, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 00:14:36,533 INFO  L87              Difference]: Start difference. First operand 2065 states and 2291 transitions. cyclomatic complexity: 233 Second operand 35 states.
[2020-11-25 00:14:40,346 WARN  L188               SmtUtils]: Spent 342.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 135
[2020-11-25 00:14:44,686 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:44,686 INFO  L93              Difference]: Finished difference Result 2334 states and 2650 transitions.
[2020-11-25 00:14:44,686 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 00:14:44,687 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2334 states and 2650 transitions.
[2020-11-25 00:14:44,691 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:14:44,695 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2334 states to 2334 states and 2650 transitions.
[2020-11-25 00:14:44,696 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 797
[2020-11-25 00:14:44,696 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 797
[2020-11-25 00:14:44,696 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2334 states and 2650 transitions.
[2020-11-25 00:14:44,698 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:44,698 INFO  L728         BuchiCegarLoop]: Abstraction has 2334 states and 2650 transitions.
[2020-11-25 00:14:44,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2334 states and 2650 transitions.
[2020-11-25 00:14:44,708 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2334 to 2067.
[2020-11-25 00:14:44,708 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2067 states.
[2020-11-25 00:14:44,710 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2067 states to 2067 states and 2298 transitions.
[2020-11-25 00:14:44,710 INFO  L751         BuchiCegarLoop]: Abstraction has 2067 states and 2298 transitions.
[2020-11-25 00:14:44,710 INFO  L631         BuchiCegarLoop]: Abstraction has 2067 states and 2298 transitions.
[2020-11-25 00:14:44,710 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 00:14:44,710 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2067 states and 2298 transitions.
[2020-11-25 00:14:44,712 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:44,713 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:44,713 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:44,714 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:44,714 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:44,717 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:44,717 INFO  L82        PathProgramCache]: Analyzing trace with hash -273024188, now seen corresponding path program 2 times
[2020-11-25 00:14:44,718 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:44,775 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:45,365 INFO  L134       CoverageAnalysis]: Checked inductivity of 237 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 235 trivial. 0 not checked.
[2020-11-25 00:14:45,365 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:14:45,366 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 00:14:45,366 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:45,366 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 00:14:45,366 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=642, Unknown=0, NotChecked=0, Total=702
[2020-11-25 00:14:45,367 INFO  L87              Difference]: Start difference. First operand 2067 states and 2298 transitions. cyclomatic complexity: 239 Second operand 27 states.
[2020-11-25 00:14:50,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:14:50,689 INFO  L93              Difference]: Finished difference Result 2093 states and 2332 transitions.
[2020-11-25 00:14:50,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 00:14:50,690 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2093 states and 2332 transitions.
[2020-11-25 00:14:50,693 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:50,697 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2093 states to 2093 states and 2332 transitions.
[2020-11-25 00:14:50,697 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-11-25 00:14:50,698 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 682
[2020-11-25 00:14:50,698 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2093 states and 2332 transitions.
[2020-11-25 00:14:50,699 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:14:50,699 INFO  L728         BuchiCegarLoop]: Abstraction has 2093 states and 2332 transitions.
[2020-11-25 00:14:50,701 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2093 states and 2332 transitions.
[2020-11-25 00:14:50,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2093 to 2067.
[2020-11-25 00:14:50,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2067 states.
[2020-11-25 00:14:50,711 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2067 states to 2067 states and 2298 transitions.
[2020-11-25 00:14:50,711 INFO  L751         BuchiCegarLoop]: Abstraction has 2067 states and 2298 transitions.
[2020-11-25 00:14:50,711 INFO  L631         BuchiCegarLoop]: Abstraction has 2067 states and 2298 transitions.
[2020-11-25 00:14:50,711 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 00:14:50,711 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2067 states and 2298 transitions.
[2020-11-25 00:14:50,713 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:14:50,713 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:14:50,713 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:14:50,716 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:14:50,716 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == BazToken
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2365]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == BazToken
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2376]              balances_BazToken[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:14:50,720 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:14:50,720 INFO  L82        PathProgramCache]: Analyzing trace with hash -1988071506, now seen corresponding path program 1 times
[2020-11-25 00:14:50,720 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:14:50,830 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:14:52,617 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 97
[2020-11-25 00:14:52,853 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 209 DAG size of output: 89
[2020-11-25 00:14:53,791 INFO  L134       CoverageAnalysis]: Checked inductivity of 212 backedges. 2 proven. 6 refuted. 0 times theorem prover too weak. 204 trivial. 0 not checked.
[2020-11-25 00:14:53,791 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:14:53,791 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-11-25 00:14:53,792 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:14:53,792 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-11-25 00:14:53,792 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=169, Invalid=2483, Unknown=0, NotChecked=0, Total=2652
[2020-11-25 00:14:53,792 INFO  L87              Difference]: Start difference. First operand 2067 states and 2298 transitions. cyclomatic complexity: 239 Second operand 52 states.
[2020-11-25 00:14:58,669 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 117 DAG size of output: 103
[2020-11-25 00:14:58,822 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 120 DAG size of output: 106
[2020-11-25 00:15:04,227 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:15:04,227 INFO  L93              Difference]: Finished difference Result 2536 states and 2960 transitions.
[2020-11-25 00:15:04,227 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 56 states. 
[2020-11-25 00:15:04,227 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2536 states and 2960 transitions.
[2020-11-25 00:15:04,232 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:15:04,237 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2536 states to 2536 states and 2960 transitions.
[2020-11-25 00:15:04,237 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 908
[2020-11-25 00:15:04,238 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 908
[2020-11-25 00:15:04,238 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2536 states and 2960 transitions.
[2020-11-25 00:15:04,240 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:15:04,240 INFO  L728         BuchiCegarLoop]: Abstraction has 2536 states and 2960 transitions.
[2020-11-25 00:15:04,241 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2536 states and 2960 transitions.
[2020-11-25 00:15:04,253 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2536 to 2475.
[2020-11-25 00:15:04,253 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2475 states.
[2020-11-25 00:15:04,257 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2475 states to 2475 states and 2881 transitions.
[2020-11-25 00:15:04,257 INFO  L751         BuchiCegarLoop]: Abstraction has 2475 states and 2881 transitions.
[2020-11-25 00:15:04,257 INFO  L631         BuchiCegarLoop]: Abstraction has 2475 states and 2881 transitions.
[2020-11-25 00:15:04,257 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 00:15:04,257 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2475 states and 2881 transitions.
[2020-11-25 00:15:04,261 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 00:15:04,261 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:15:04,261 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:15:04,263 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:15:04,263 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_BazToken0 := false;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == BazToken;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_BazToken[this] := -428571439;
[L2236]              name_BazToken[this] := -428571439;
[L2237]              decimals_BazToken[this] := 0;
[L2238]              _totalSupply_BazToken[this] := 0;
[L2239]              balances_BazToken[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_BazToken[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_BazToken[this] := 1231671027;
[L2245]              name_BazToken[this] := 1319453082;
[L2246]              decimals_BazToken[this] := 18;
[L2247]              _totalSupply_BazToken[this] := 2500000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2249]              balances_BazToken[this][-213091748074002454629334339881517515996861043291] := _totalSupply_BazToken[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][-213091748074002454629334339881517515996861043291];
[L2251]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2288]  RET         call BazToken_BazToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call BazToken_BazToken__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call BazToken_BazToken(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND FALSE  !(choice == 11)
[L4181]  COND FALSE  !(choice == 10)
[L4187]  COND FALSE  !(choice == 9)
[L4193]  COND FALSE  !(choice == 8)
[L4199]  COND FALSE  !(choice == 7)
[L4205]  COND FALSE  !(choice == 6)
[L4211]  COND FALSE  !(choice == 5)
[L4217]  COND FALSE  !(choice == 4)
[L4223]  COND FALSE  !(choice == 3)
[L4229]  COND FALSE  !(choice == 2)
[L4236]  COND TRUE   choice == 1
[L4237]              gas := gas - 21000;
[L4238]  COND TRUE   gas >= 0
[L4239]              assume tokens_s544 >= 0 && tokens_s544 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4240]              assume msgvalue_MSG == 0;
[L4241]  CALL        call success_s544 := transferAnyERC20Token~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L1216]              havoc __exception;
[L1217]              revert := false;
[L1218]  COND FALSE  !(__exception)
[L1241]  CALL        call success_s544 := transferAnyERC20Token~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L2584]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3650]  COND FALSE  !(!(msgsender_MSG == owner_Owned[this]))
[L2584]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2585]  COND FALSE  !(revert)
[L2588]              assume DType[tokenAddress_s544] == ERC20Interface || DType[tokenAddress_s544] == BazToken;
[L2589]              __var_12 := tokenAddress_s544;
[L2590]  COND TRUE   DType[__var_12] == BazToken
[L2591]  CALL        call __var_11 := transfer~address~uint256_BazToken__success(__var_12, this, __var_13, owner_Owned[this], tokens_s544);
[L2356]  COND TRUE   DType[this] == BazToken
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][msgsender_MSG];
[L2365]              balances_BazToken[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == BazToken
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s371];
[L2376]              balances_BazToken[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2379]              success_s371 := true;
[L2591]  RET         call __var_11 := transfer~address~uint256_BazToken__success(__var_12, this, __var_13, owner_Owned[this], tokens_s544);
[L2592]  COND FALSE  !(revert)
[L2600]              success_s544 := __var_11;
[L1241]  RET         call success_s544 := transferAnyERC20Token~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L1242]              assume !revert && gas >= 0;
[L4241]  RET         call success_s544 := transferAnyERC20Token~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, tokenAddress_s544, tokens_s544);
[L4261]  RET         call CorralChoice_BazToken(this);
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s458 || p2 != msgsender_MSG) && from_s458 == to_s458) && tokens_s458 <= balances_BazToken[this][from_s458]) && tokens_s458 <= allowed_BazToken[this][from_s458][msgsender_MSG]) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][to_s458] >= 0) && balances_BazToken[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BazToken[this][from_s458] >= 0) && balances_BazToken[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_BazToken[this][from_s458][msgsender_MSG] >= 0) && allowed_BazToken[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_BazToken0 := true;
[L3]                 call_transferFrom_BazToken0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == BazToken
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][from_s458];
[L2458]              balances_BazToken[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][from_s458];
[L2460]  COND TRUE   DType[this] == BazToken
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_BazToken[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_BazToken[this][from_s458][msgsender_MSG];
[L2469]              allowed_BazToken[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_BazToken[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == BazToken
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_BazToken[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_BazToken[this][to_s458];
[L2480]              balances_BazToken[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_BazToken[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_BazToken" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s458 == true && allowed_BazToken[this][from_s458][msgsender_MSG] == old(allowed_BazToken[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_BazToken[this] == old(_totalSupply_BazToken[this])) && balances_BazToken[this] == old(balances_BazToken[this])) && allowed_BazToken[this][p1][p2] == old(allowed_BazToken[this][p1][p2])) && symbol_BazToken[this] == old(symbol_BazToken[this])) && name_BazToken[this] == old(name_BazToken[this])) && decimals_BazToken[this] == old(decimals_BazToken[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_BazToken(this);

Loop:
[L4261]  CALL        call CorralChoice_BazToken(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != BazToken;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2395]              allowed_BazToken[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_BazToken[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_BazToken" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_BazToken__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_BazToken(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_BazToken(this);

[2020-11-25 00:15:04,267 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:15:04,267 INFO  L82        PathProgramCache]: Analyzing trace with hash -1246751955, now seen corresponding path program 1 times
[2020-11-25 00:15:04,267 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:15:04,401 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 00:28:46,965 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 00:28:46,966 INFO  L168              Benchmark]: Toolchain (without parser) took 898560.58 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 940.6 MB in the beginning and 1.3 GB in the end (delta: -311.3 MB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,966 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,967 INFO  L168              Benchmark]: Boogie Preprocessor took 95.46 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,967 INFO  L168              Benchmark]: UtopiaSpecLang took 65.50 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,967 INFO  L168              Benchmark]: Boogie Printer took 16.74 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.6 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,967 INFO  L168              Benchmark]: RCFGBuilder took 729.27 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 795.5 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,968 INFO  L168              Benchmark]: UtopiaLTL2Aut took 40.78 ms. Allocated memory is still 1.0 GB. Free memory was 795.5 MB in the beginning and 791.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,968 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1471.38 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 196.1 MB). Free memory was 791.9 MB in the beginning and 994.9 MB in the end (delta: -202.9 MB). Peak memory consumption was 168.2 MB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,968 INFO  L168              Benchmark]: BlockEncodingV2 took 129.26 ms. Allocated memory is still 1.2 GB. Free memory was 994.9 MB in the beginning and 930.9 MB in the end (delta: 63.9 MB). Peak memory consumption was 63.9 MB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,969 INFO  L168              Benchmark]: BuchiAutomizer took 896009.14 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 930.9 MB in the beginning and 1.3 GB in the end (delta: -320.9 MB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-25 00:28:46,971 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3722 locations, 6405 edges
  - StatisticsResult: Encoded RCFG
    3662 locations, 6245 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 95.46 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 65.50 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 919.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.74 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.6 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 729.27 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 795.5 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 40.78 ms. Allocated memory is still 1.0 GB. Free memory was 795.5 MB in the beginning and 791.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1471.38 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 196.1 MB). Free memory was 791.9 MB in the beginning and 994.9 MB in the end (delta: -202.9 MB). Peak memory consumption was 168.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 129.26 ms. Allocated memory is still 1.2 GB. Free memory was 994.9 MB in the beginning and 930.9 MB in the end (delta: 63.9 MB). Peak memory consumption was 63.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896009.14 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 930.9 MB in the beginning and 1.3 GB in the end (delta: -320.9 MB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1565 locations, 1977 edges
  - StatisticsResult: BuchiProgram size
    3722 locations, 6405 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
