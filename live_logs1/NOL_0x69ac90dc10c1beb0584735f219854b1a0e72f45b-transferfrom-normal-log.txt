This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 02:12:32,863 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 02:12:32,865 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 02:12:32,875 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 02:12:32,875 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 02:12:32,875 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 02:12:32,876 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 02:12:32,878 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 02:12:32,879 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 02:12:32,880 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 02:12:32,880 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 02:12:32,881 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 02:12:32,881 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 02:12:32,882 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 02:12:32,883 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 02:12:32,883 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 02:12:32,884 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 02:12:32,885 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 02:12:32,886 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 02:12:32,887 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 02:12:32,888 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 02:12:32,889 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 02:12:32,890 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 02:12:32,890 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 02:12:32,890 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 02:12:32,891 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 02:12:32,891 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 02:12:32,892 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 02:12:32,892 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 02:12:32,892 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 02:12:32,893 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 02:12:32,893 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 02:12:32,894 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 02:12:32,894 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 02:12:32,895 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 02:12:32,895 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 02:12:32,895 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 02:12:32,895 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 02:12:32,896 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 02:12:32,896 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 02:12:32,897 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 02:12:32,897 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 02:12:32,907 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 02:12:32,907 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 02:12:32,909 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 02:12:32,909 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 02:12:32,909 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 02:12:32,909 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 02:12:32,909 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 02:12:32,910 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 02:12:32,910 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 02:12:32,910 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 02:12:32,910 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 02:12:32,910 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 02:12:32,911 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 02:12:32,911 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 02:12:32,911 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 02:12:32,911 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 02:12:32,911 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 02:12:32,912 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 02:12:32,912 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 02:12:32,912 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 02:12:32,912 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 02:12:32,912 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 02:12:32,912 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 02:12:32,913 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 02:12:32,913 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 02:12:32,913 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 02:12:32,936 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 02:12:32,946 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 02:12:32,949 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 02:12:32,951 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 02:12:32,951 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 02:12:32,952 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl
[2020-11-25 02:12:32,952 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl'
[2020-11-25 02:12:33,033 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 02:12:33,035 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 02:12:33,035 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 02:12:33,035 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 02:12:33,035 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 02:12:33,051 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,053 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,087 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,088 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,111 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,122 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,129 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,140 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 02:12:33,140 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 02:12:33,141 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 02:12:33,143 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 02:12:33,147 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/1) ...
[2020-11-25 02:12:33,170 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:12:33,176 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:12:33,184 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:12:33,196 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=_from_s261 && p1!=_to_s261 ) && ( p2!=_from_s261 || p3!=msg.sender ) ) && _from_s261!=_to_s261 ) && _value_s261<=balanceOf_TokenERC20[this][_from_s261] ) && _value_s261<=allowance_TokenERC20[this][_from_s261][msg.sender] ) && ( balanceOf_TokenERC20[this][_to_s261] + _value_s261 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _value_s261>=0 ) && _value_s261<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_to_s261]>=0 ) && balanceOf_TokenERC20[this][_to_s261]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balanceOf_TokenERC20[this][_from_s261]>=0 ) && balanceOf_TokenERC20[this][_from_s261]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowance_TokenERC20[this][_from_s261][msg.sender]>=0 ) && allowance_TokenERC20[this][_from_s261][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 02:12:33,198 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( success_s261==true && balanceOf_TokenERC20[this][_from_s261]==( ( old(balanceOf_TokenERC20[this][_from_s261]) ) - _value_s261 ) ) && balanceOf_TokenERC20[this][_to_s261]==( ( old(balanceOf_TokenERC20[this][_to_s261]) ) + _value_s261 ) ) && allowance_TokenERC20[this][_from_s261][msg.sender]==( ( old(allowance_TokenERC20[this][_from_s261][msg.sender]) ) - _value_s261 ) ) && totalSupply_TokenERC20[this]==( old(totalSupply_TokenERC20[this]) ) ) && balanceOf_TokenERC20[this][p1]==( old(balanceOf_TokenERC20[this][p1]) ) ) && allowance_TokenERC20[this][p2][p3]==( old(allowance_TokenERC20[this][p2][p3]) ) ) && sellPrice_NOL[this]==( old(sellPrice_NOL[this]) ) ) && buyPrice_NOL[this]==( old(buyPrice_NOL[this]) ) ) && frozenAccount_NOL[this]==( old(frozenAccount_NOL[this]) ) ) && name_TokenERC20[this]==( old(name_TokenERC20[this]) ) ) && symbol_TokenERC20[this]==( old(symbol_TokenERC20[this]) ) ) && decimals_TokenERC20[this]==( old(decimals_TokenERC20[this]) ) ) && owner_owned[this]==( old(owner_owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s261,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_TokenERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_to_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[_from_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],IdentifierExpression[_value_s261,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balanceOf_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowance_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[sellPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[sellPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[buyPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[buyPrice_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[frozenAccount_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[frozenAccount_NOL,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_TokenERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_TokenERC20>]]]]]]
[2020-11-25 02:12:33,204 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(TokenERC20.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balanceOf_TokenERC20[this][from] && value <= allowance_TokenERC20[this][from][msg.sender] && balanceOf_TokenERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][to] >= 0 && balanceOf_TokenERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balanceOf_TokenERC20[this][from] >= 0 &&  balanceOf_TokenERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowance_TokenERC20[this][from][msg.sender] >= 0 && allowance_TokenERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(TokenERC20.transferFrom(from, to, value), return == true && balanceOf_TokenERC20[this][from] == old(balanceOf_TokenERC20[this][from]) - value && balanceOf_TokenERC20[this][to] == old(balanceOf_TokenERC20[this][to]) + value && allowance_TokenERC20[this][from][msg.sender] == old(allowance_TokenERC20[this][from][msg.sender]) - value && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this]) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1]) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3]) && sellPrice_NOL[this] == old(sellPrice_NOL[this]) && buyPrice_NOL[this] == old(buyPrice_NOL[this]) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this]) && name_TokenERC20[this] == old(name_TokenERC20[this]) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this]) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this]) && owner_owned[this] == old(owner_owned[this]))))
[2020-11-25 02:12:33,205 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_TokenERC200) ==> ( <>AP(success_transferFrom_TokenERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 02:12:33,215 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:12:33 PropertyContainer
[2020-11-25 02:12:33,215 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 02:12:33,215 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 02:12:33,215 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 02:12:33,215 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 02:12:33,216 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/2) ...
[2020-11-25 02:12:33,217 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 02:12:33,217 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 02:12:33,231 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:12:33" (2/2) ...
[2020-11-25 02:12:33,231 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 02:12:33,231 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 02:12:33,232 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 02:12:33,232 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 02:12:33,232 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/2) ...
[2020-11-25 02:12:33,270 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__success
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned
[2020-11-25 02:12:33,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned
[2020-11-25 02:12:33,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned
[2020-11-25 02:12:33,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient
[2020-11-25 02:12:33,271 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_tokenRecipient
[2020-11-25 02:12:33,271 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 02:12:33,272 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20
[2020-11-25 02:12:33,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20
[2020-11-25 02:12:33,272 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,272 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20
[2020-11-25 02:12:33,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20
[2020-11-25 02:12:33,272 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 02:12:33,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20
[2020-11-25 02:12:33,272 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20
[2020-11-25 02:12:33,272 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20
[2020-11-25 02:12:33,273 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 02:12:33,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20
[2020-11-25 02:12:33,273 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20
[2020-11-25 02:12:33,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20
[2020-11-25 02:12:33,273 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 02:12:33,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20
[2020-11-25 02:12:33,273 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20
[2020-11-25 02:12:33,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20
[2020-11-25 02:12:33,273 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20
[2020-11-25 02:12:33,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20
[2020-11-25 02:12:33,273 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20
[2020-11-25 02:12:33,273 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20
[2020-11-25 02:12:33,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20
[2020-11-25 02:12:33,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20
[2020-11-25 02:12:33,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL_NoBaseCtor__success
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL
[2020-11-25 02:12:33,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_NOL__success
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_NOL
[2020-11-25 02:12:33,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_NOL
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_NOL
[2020-11-25 02:12:33,274 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_NOL
[2020-11-25 02:12:33,274 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_NOL
[2020-11-25 02:12:33,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_NOL
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_NOL
[2020-11-25 02:12:33,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_NOL
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_NOL
[2020-11-25 02:12:33,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_NOL
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_NOL
[2020-11-25 02:12:33,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_NOL
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_NOL
[2020-11-25 02:12:33,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_NOL
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_NOL
[2020-11-25 02:12:33,275 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_NOL
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 02:12:33,275 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_owned
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_owned
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_tokenRecipient
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_tokenRecipient
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TokenERC20
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_TokenERC20
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_NOL
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__success
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure owned_owned__fail
[2020-11-25 02:12:33,276 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__success
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_owned__fail
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__success
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_owned__fail
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__success
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure TokenERC20_TokenERC20__fail
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,277 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__success
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_TokenERC20__fail
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,278 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__success
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure name_TokenERC20__fail
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__success
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_TokenERC20__fail
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__success
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_TokenERC20__fail
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__success
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_TokenERC20__fail
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__success
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__success
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 02:12:33,279 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL_NoBaseCtor__fail
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL__success
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure NOL_NOL__fail
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_NOL__fail
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_NOL__success
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure mintToken~address~uint256_NOL__fail
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_NOL__success
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address~bool_NOL__fail
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_NOL__success
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure setPrices~uint256~uint256_NOL__fail
[2020-11-25 02:12:33,280 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_NOL__success
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure buy_NOL__fail
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_NOL__success
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure sell~uint256_NOL__fail
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_NOL__success
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure sellPrice_NOL__fail
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_NOL__success
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure buyPrice_NOL__fail
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_NOL__success
[2020-11-25 02:12:33,281 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_NOL__fail
[2020-11-25 02:12:33,282 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 02:12:33,282 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 02:12:33,282 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 02:12:33,282 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 02:12:33,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 02:12:33,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 02:12:33,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__fail
[2020-11-25 02:12:33,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned_NoBaseCtor__success
[2020-11-25 02:12:33,282 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__fail
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure owned_owned__success
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__fail
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_owned__success
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__fail
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_owned__success
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__fail
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient_NoBaseCtor__success
[2020-11-25 02:12:33,283 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__fail
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure tokenRecipient_tokenRecipient__success
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__fail
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20_NoBaseCtor__success
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__fail
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure TokenERC20_TokenERC20__success
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,284 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__fail
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_TokenERC20__success
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__fail
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_TokenERC20__success
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__fail
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_TokenERC20__success
[2020-11-25 02:12:33,285 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__fail
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_TokenERC20__success
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__fail
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_TokenERC20__success
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__fail
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_TokenERC20__success
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__fail
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_TokenERC20__success
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__fail
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_TokenERC20__success
[2020-11-25 02:12:33,286 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__fail
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_TokenERC20__success
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL_NoBaseCtor__fail
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL_NoBaseCtor__success
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL__fail
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure NOL_NOL__success
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_NOL__fail
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_NOL__success
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_NOL__fail
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintToken~address~uint256_NOL__success
[2020-11-25 02:12:33,287 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_NOL__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address~bool_NOL__success
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_NOL__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure setPrices~uint256~uint256_NOL__success
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_NOL__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure buy_NOL__success
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_NOL__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure sell~uint256_NOL__success
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_NOL__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure sellPrice_NOL__success
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_NOL__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure buyPrice_NOL__success
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_NOL__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_NOL__success
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 02:12:33,288 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_owned
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_owned
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_tokenRecipient
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_tokenRecipient
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TokenERC20
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_TokenERC20
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_NOL
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 02:12:33,289 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 02:12:33,289 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 02:12:33,568 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:12:33,569 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:12:33,569 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:12:33,639 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 02:12:33,958 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 02:12:33,958 INFO  L286             CfgBuilder]: Removed 4 assue(true) statements.
[2020-11-25 02:12:33,960 INFO  L202        PluginConnector]: Adding new model NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:12:33 BoogieIcfgContainer
[2020-11-25 02:12:33,960 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:12:33" (2/2) ...
[2020-11-25 02:12:33,960 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 02:12:33,961 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4d62275b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:12:33, skipping insertion in model container
[2020-11-25 02:12:33,961 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 02:12:33,961 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 02:12:33,961 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 02:12:33,962 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 02:12:33,962 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/3) ...
[2020-11-25 02:12:33,963 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@2cb41e71 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:12:33, skipping insertion in model container
[2020-11-25 02:12:33,963 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:12:33" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 02:12:33,998 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:12:33 NWAContainer
[2020-11-25 02:12:33,999 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 02:12:33,999 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 02:12:33,999 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 02:12:34,000 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 02:12:34,000 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:12:33" (3/4) ...
[2020-11-25 02:12:34,001 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@310cbce2 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:12:34, skipping insertion in model container
[2020-11-25 02:12:34,001 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:12:33" (4/4) ...
[2020-11-25 02:12:34,004 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 02:12:34,009 INFO  L110   BuchiProductObserver]: Initial RCFG 2322 locations, 3072 edges
[2020-11-25 02:12:34,009 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 02:12:34,021 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 02:12:35,258 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 02:12:35,264 INFO  L110   BuchiProductObserver]: BuchiProgram size 5486 locations, 9675 edges
[2020-11-25 02:12:35,265 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:12:35 BoogieIcfgContainer
[2020-11-25 02:12:35,265 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 02:12:35,265 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 02:12:35,265 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 02:12:35,266 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 02:12:35,267 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:12:35" (1/1) ...
[2020-11-25 02:12:35,357 INFO  L313           BlockEncoder]: Initial Icfg 5486 locations, 9675 edges
[2020-11-25 02:12:35,358 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 02:12:35,358 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 02:12:35,358 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 02:12:35,359 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 02:12:35,382 INFO  L70    emoveInfeasibleEdges]: Removed 84 edges and 11 locations because of local infeasibility
[2020-11-25 02:12:35,396 INFO  L70        RemoveSinkStates]: Removed 32 edges and 21 locations by removing sink states
[2020-11-25 02:12:35,414 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 02:12:35,422 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 02:12:35,428 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 02:12:35,429 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 02:12:35,434 INFO  L313           BlockEncoder]: Encoded RCFG 5430 locations, 9524 edges
[2020-11-25 02:12:35,435 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:12:35 BasicIcfg
[2020-11-25 02:12:35,435 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 02:12:35,435 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 02:12:35,436 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 02:12:35,438 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 02:12:35,439 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:12:35,439 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:12:33" (1/6) ...
[2020-11-25 02:12:35,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14dc275 and model type NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:12:35, skipping insertion in model container
[2020-11-25 02:12:35,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:12:35,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:12:33" (2/6) ...
[2020-11-25 02:12:35,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14dc275 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:12:35, skipping insertion in model container
[2020-11-25 02:12:35,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:12:35,441 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:12:33" (3/6) ...
[2020-11-25 02:12:35,441 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14dc275 and model type NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:12:35, skipping insertion in model container
[2020-11-25 02:12:35,441 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:12:35,442 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:12:33" (4/6) ...
[2020-11-25 02:12:35,442 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14dc275 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:12:35, skipping insertion in model container
[2020-11-25 02:12:35,442 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:12:35,442 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:12:35" (5/6) ...
[2020-11-25 02:12:35,442 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@14dc275 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:12:35, skipping insertion in model container
[2020-11-25 02:12:35,442 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 02:12:35,442 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:12:35" (6/6) ...
[2020-11-25 02:12:35,443 INFO  L404   chiAutomizerObserver]: Analyzing ICFG NOL_0x69ac90dc10c1beb0584735f219854b1a0e72f45b_transferfrom-normal.bpl_BEv2
[2020-11-25 02:12:35,484 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 02:12:35,484 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 02:12:35,484 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 02:12:35,484 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 02:12:35,485 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 02:12:35,485 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 02:12:35,485 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 02:12:35,485 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 02:12:35,485 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 02:12:35,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5430 states.
[2020-11-25 02:12:35,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:12:35,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:12:35,598 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:12:35,605 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:35,605 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:35,606 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 02:12:35,606 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5430 states.
[2020-11-25 02:12:35,636 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:12:35,636 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:12:35,637 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:12:35,638 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:35,638 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND TRUE   revert
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND TRUE   revert
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND TRUE   choice == 22
[L4747]              gas := gas - 21000;
[L4748]  COND FALSE  !(gas >= 0)
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:12:35,653 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:35,653 INFO  L82        PathProgramCache]: Analyzing trace with hash 794683806, now seen corresponding path program 1 times
[2020-11-25 02:12:35,659 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:35,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:12:35,719 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:12:35,721 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:12:35,721 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:12:35,959 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:12:35,967 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:12:35,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:12:35,969 INFO  L87              Difference]: Start difference. First operand 5430 states. Second operand 4 states.
[2020-11-25 02:12:37,634 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:12:37,634 INFO  L93              Difference]: Finished difference Result 6370 states and 10738 transitions.
[2020-11-25 02:12:37,634 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:12:37,636 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6370 states and 10738 transitions.
[2020-11-25 02:12:37,674 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 02:12:37,724 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6370 states to 6120 states and 10317 transitions.
[2020-11-25 02:12:37,725 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 16
[2020-11-25 02:12:37,728 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 423
[2020-11-25 02:12:37,728 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6120 states and 10317 transitions.
[2020-11-25 02:12:37,755 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:12:37,755 INFO  L728         BuchiCegarLoop]: Abstraction has 6120 states and 10317 transitions.
[2020-11-25 02:12:37,773 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6120 states and 10317 transitions.
[2020-11-25 02:12:37,863 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6120 to 4940.
[2020-11-25 02:12:37,863 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4940 states.
[2020-11-25 02:12:37,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4940 states to 4940 states and 8138 transitions.
[2020-11-25 02:12:37,874 INFO  L751         BuchiCegarLoop]: Abstraction has 4940 states and 8138 transitions.
[2020-11-25 02:12:37,874 INFO  L631         BuchiCegarLoop]: Abstraction has 4940 states and 8138 transitions.
[2020-11-25 02:12:37,875 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 02:12:37,875 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4940 states and 8138 transitions.
[2020-11-25 02:12:37,886 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:12:37,886 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:12:37,887 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:12:37,888 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:37,888 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND TRUE   choice == 22
[L4747]              gas := gas - 21000;
[L4748]  COND FALSE  !(gas >= 0)
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:12:37,891 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:37,891 INFO  L82        PathProgramCache]: Analyzing trace with hash -945654009, now seen corresponding path program 1 times
[2020-11-25 02:12:37,892 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:37,899 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:12:37,915 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:12:37,915 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:12:37,915 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 02:12:37,917 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:12:37,917 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 02:12:37,917 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 02:12:37,917 INFO  L87              Difference]: Start difference. First operand 4940 states and 8138 transitions. cyclomatic complexity: 3204 Second operand 4 states.
[2020-11-25 02:12:38,703 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:12:38,704 INFO  L93              Difference]: Finished difference Result 4768 states and 5521 transitions.
[2020-11-25 02:12:38,704 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 02:12:38,704 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4768 states and 5521 transitions.
[2020-11-25 02:12:38,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:12:38,724 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4768 states to 4768 states and 5521 transitions.
[2020-11-25 02:12:38,724 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 174
[2020-11-25 02:12:38,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 174
[2020-11-25 02:12:38,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4768 states and 5521 transitions.
[2020-11-25 02:12:38,728 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:12:38,728 INFO  L728         BuchiCegarLoop]: Abstraction has 4768 states and 5521 transitions.
[2020-11-25 02:12:38,732 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4768 states and 5521 transitions.
[2020-11-25 02:12:38,766 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4768 to 4768.
[2020-11-25 02:12:38,766 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4768 states.
[2020-11-25 02:12:38,770 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4768 states to 4768 states and 5521 transitions.
[2020-11-25 02:12:38,771 INFO  L751         BuchiCegarLoop]: Abstraction has 4768 states and 5521 transitions.
[2020-11-25 02:12:38,771 INFO  L631         BuchiCegarLoop]: Abstraction has 4768 states and 5521 transitions.
[2020-11-25 02:12:38,771 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 02:12:38,771 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4768 states and 5521 transitions.
[2020-11-25 02:12:38,775 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:12:38,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:12:38,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:12:38,777 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:38,777 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND TRUE   !(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG])
[L2730]              revert := true;
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND TRUE   !(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG])
[L2730]              revert := true;
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:12:38,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:38,781 INFO  L82        PathProgramCache]: Analyzing trace with hash -963693361, now seen corresponding path program 1 times
[2020-11-25 02:12:38,782 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:38,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:12:38,851 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:12:38,851 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:12:38,851 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 02:12:38,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:12:38,852 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:12:38,852 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:12:38,852 INFO  L87              Difference]: Start difference. First operand 4768 states and 5521 transitions. cyclomatic complexity: 759 Second operand 6 states.
[2020-11-25 02:12:40,037 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:12:40,038 INFO  L93              Difference]: Finished difference Result 5134 states and 5921 transitions.
[2020-11-25 02:12:40,038 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 02:12:40,038 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5134 states and 5921 transitions.
[2020-11-25 02:12:40,048 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:12:40,068 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5134 states to 5134 states and 5921 transitions.
[2020-11-25 02:12:40,068 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 251
[2020-11-25 02:12:40,068 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 251
[2020-11-25 02:12:40,068 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5134 states and 5921 transitions.
[2020-11-25 02:12:40,072 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:12:40,072 INFO  L728         BuchiCegarLoop]: Abstraction has 5134 states and 5921 transitions.
[2020-11-25 02:12:40,076 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5134 states and 5921 transitions.
[2020-11-25 02:12:40,114 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5134 to 4832.
[2020-11-25 02:12:40,114 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4832 states.
[2020-11-25 02:12:40,119 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4832 states to 4832 states and 5595 transitions.
[2020-11-25 02:12:40,119 INFO  L751         BuchiCegarLoop]: Abstraction has 4832 states and 5595 transitions.
[2020-11-25 02:12:40,119 INFO  L631         BuchiCegarLoop]: Abstraction has 4832 states and 5595 transitions.
[2020-11-25 02:12:40,119 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 02:12:40,119 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4832 states and 5595 transitions.
[2020-11-25 02:12:40,124 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 02:12:40,124 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:12:40,124 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:12:40,125 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:40,125 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND FALSE  !(!(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2759]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] - allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2760]              allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] + allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2762]  COND TRUE   DType[this] == NOL
[L2763]  CALL        call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3089]              __var_6 := null;
[L3090]  COND FALSE  !(!(_to_s522 != null))
[L3094]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s522] >= _value_s522))
[L3098]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s522]))
[L3102]  COND FALSE  !(!!frozenAccount_NOL[this][_from_s522])
[L3106]  COND FALSE  !(!!frozenAccount_NOL[this][_to_s522])
[L3110]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s522];
[L3111]              balanceOf_TokenERC20[this][_from_s522] := (balanceOf_TokenERC20[this][_from_s522] - _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3112]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s522];
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s522];
[L3114]              balanceOf_TokenERC20[this][_to_s522] := (balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3115]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s522];
[L3116]              assert { :EventEmitted "Transfer_NOL" } true;
[L2763]  RET         call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2764]  COND FALSE  !(revert)
[L2775]              success_s261 := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s261 == true && balanceOf_TokenERC20[this][_from_s261] == old(balanceOf_TokenERC20[this][_from_s261]) - _value_s261) && balanceOf_TokenERC20[this][_to_s261] == old(balanceOf_TokenERC20[this][_to_s261]) + _value_s261) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND FALSE  !(!(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2759]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] - allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2760]              allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] + allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2762]  COND TRUE   DType[this] == NOL
[L2763]  CALL        call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3089]              __var_6 := null;
[L3090]  COND FALSE  !(!(_to_s522 != null))
[L3094]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s522] >= _value_s522))
[L3098]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= balanceOf_TokenERC20[this][_to_s522]))
[L3102]  COND FALSE  !(!!frozenAccount_NOL[this][_from_s522])
[L3106]  COND FALSE  !(!!frozenAccount_NOL[this][_to_s522])
[L3110]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s522];
[L3111]              balanceOf_TokenERC20[this][_from_s522] := (balanceOf_TokenERC20[this][_from_s522] - _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3112]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s522];
[L3113]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s522];
[L3114]              balanceOf_TokenERC20[this][_to_s522] := (balanceOf_TokenERC20[this][_to_s522] + _value_s522) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3115]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s522];
[L3116]              assert { :EventEmitted "Transfer_NOL" } true;
[L2763]  RET         call _transfer~address~address~uint256_NOL__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2764]  COND FALSE  !(revert)
[L2775]              success_s261 := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s261 == true && balanceOf_TokenERC20[this][_from_s261] == old(balanceOf_TokenERC20[this][_from_s261]) - _value_s261) && balanceOf_TokenERC20[this][_to_s261] == old(balanceOf_TokenERC20[this][_to_s261]) + _value_s261) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:12:40,129 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:40,129 INFO  L82        PathProgramCache]: Analyzing trace with hash 1229553509, now seen corresponding path program 1 times
[2020-11-25 02:12:40,130 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:40,178 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:12:40,850 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 87
[2020-11-25 02:12:41,046 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 126 DAG size of output: 88
[2020-11-25 02:12:41,199 WARN  L188               SmtUtils]: Spent 111.00 ms on a formula simplification. DAG size of input: 112 DAG size of output: 65
[2020-11-25 02:12:41,369 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:12:41,370 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:12:41,370 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 02:12:41,370 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:12:41,370 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 02:12:41,370 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=54, Invalid=452, Unknown=0, NotChecked=0, Total=506
[2020-11-25 02:12:41,370 INFO  L87              Difference]: Start difference. First operand 4832 states and 5595 transitions. cyclomatic complexity: 769 Second operand 23 states.
[2020-11-25 02:12:54,735 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:12:54,735 INFO  L93              Difference]: Finished difference Result 5001 states and 5818 transitions.
[2020-11-25 02:12:54,736 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 02:12:54,736 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5001 states and 5818 transitions.
[2020-11-25 02:12:54,744 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 02:12:54,757 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5001 states to 5001 states and 5818 transitions.
[2020-11-25 02:12:54,757 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 229
[2020-11-25 02:12:54,758 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 229
[2020-11-25 02:12:54,758 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5001 states and 5818 transitions.
[2020-11-25 02:12:54,763 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:12:54,763 INFO  L728         BuchiCegarLoop]: Abstraction has 5001 states and 5818 transitions.
[2020-11-25 02:12:54,768 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5001 states and 5818 transitions.
[2020-11-25 02:12:54,799 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5001 to 4930.
[2020-11-25 02:12:54,799 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4930 states.
[2020-11-25 02:12:54,804 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4930 states to 4930 states and 5713 transitions.
[2020-11-25 02:12:54,804 INFO  L751         BuchiCegarLoop]: Abstraction has 4930 states and 5713 transitions.
[2020-11-25 02:12:54,804 INFO  L631         BuchiCegarLoop]: Abstraction has 4930 states and 5713 transitions.
[2020-11-25 02:12:54,804 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 02:12:54,804 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4930 states and 5713 transitions.
[2020-11-25 02:12:54,809 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:12:54,809 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:12:54,809 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:12:54,810 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:54,810 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND FALSE  !(__exception)
[L519]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2755]  COND FALSE  !(!(_value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2759]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] - allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2760]              allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2761]              sum_allowance1[_from_s261] := sum_allowance1[_from_s261] + allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2762]  COND FALSE  !(DType[this] == NOL)
[L2767]  COND TRUE   DType[this] == TokenERC20
[L2768]  CALL        call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2665]              __var_2 := null;
[L2666]  COND FALSE  !(!(_to_s202 != null))
[L2670]  COND FALSE  !(!(balanceOf_TokenERC20[this][_from_s202] >= _value_s202))
[L2674]  COND FALSE  !(!((balanceOf_TokenERC20[this][_to_s202] + _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 > balanceOf_TokenERC20[this][_to_s202]))
[L2678]              previousBalances_s202 := (balanceOf_TokenERC20[this][_from_s202] + balanceOf_TokenERC20[this][_to_s202]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_from_s202];
[L2680]              balanceOf_TokenERC20[this][_from_s202] := (balanceOf_TokenERC20[this][_from_s202] - _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2681]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_from_s202];
[L2682]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][_to_s202];
[L2683]              balanceOf_TokenERC20[this][_to_s202] := (balanceOf_TokenERC20[this][_to_s202] + _value_s202) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2684]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][_to_s202];
[L2685]              assert { :EventEmitted "Transfer_TokenERC20" } true;
[L2686]              assert (balanceOf_TokenERC20[this][_from_s202] + balanceOf_TokenERC20[this][_to_s202]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 == previousBalances_s202;
[L2768]  RET         call _transfer~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2769]  COND FALSE  !(revert)
[L2775]              success_s261 := true;
[L519]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L520]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((((success_s261 == true && balanceOf_TokenERC20[this][_from_s261] == old(balanceOf_TokenERC20[this][_from_s261]) - _value_s261) && balanceOf_TokenERC20[this][_to_s261] == old(balanceOf_TokenERC20[this][_to_s261]) + _value_s261) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] == old(allowance_TokenERC20[this][_from_s261][msgsender_MSG]) - _value_s261) && totalSupply_TokenERC20[this] == old(totalSupply_TokenERC20[this])) && balanceOf_TokenERC20[this][p1] == old(balanceOf_TokenERC20[this][p1])) && allowance_TokenERC20[this][p2][p3] == old(allowance_TokenERC20[this][p2][p3])) && sellPrice_NOL[this] == old(sellPrice_NOL[this])) && buyPrice_NOL[this] == old(buyPrice_NOL[this])) && frozenAccount_NOL[this] == old(frozenAccount_NOL[this])) && name_TokenERC20[this] == old(name_TokenERC20[this])) && symbol_TokenERC20[this] == old(symbol_TokenERC20[this])) && decimals_TokenERC20[this] == old(decimals_TokenERC20[this])) && owner_owned[this] == old(owner_owned[this]));
[L3]                 revert := revert_hold;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND FALSE  !(choice == 13)
[L4808]  COND TRUE   choice == 12
[L4809]              gas := gas - 21000;
[L4810]  COND TRUE   gas >= 0
[L4811]              assume _value_s289 >= 0 && _value_s289 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4812]              assume msgvalue_MSG == 0;
[L4813]  CALL        call success_s289 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L554]               havoc __exception;
[L555]               revert := false;
[L556]   COND FALSE  !(__exception)
[L583]   CALL        call success_s289 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L2790]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] - allowance_TokenERC20[this][msgsender_MSG][_spender_s289];
[L2791]              allowance_TokenERC20[this][msgsender_MSG][_spender_s289] := _value_s289;
[L2792]              sum_allowance1[msgsender_MSG] := sum_allowance1[msgsender_MSG] + allowance_TokenERC20[this][msgsender_MSG][_spender_s289];
[L2793]              assert { :EventEmitted "Approval_TokenERC20" } true;
[L2794]              success_s289 := true;
[L583]   RET         call success_s289 := approve~address~uint256_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L584]               assume !revert && gas >= 0;
[L4813]  RET         call success_s289 := approve~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _spender_s289, _value_s289);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:12:54,813 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:54,813 INFO  L82        PathProgramCache]: Analyzing trace with hash -739666171, now seen corresponding path program 1 times
[2020-11-25 02:12:54,814 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:54,822 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 02:12:54,848 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 02:12:54,849 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 02:12:54,849 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 02:12:54,849 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 02:12:54,849 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 02:12:54,849 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 02:12:54,849 INFO  L87              Difference]: Start difference. First operand 4930 states and 5713 transitions. cyclomatic complexity: 791 Second operand 6 states.
[2020-11-25 02:12:54,912 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 02:12:54,912 INFO  L93              Difference]: Finished difference Result 4954 states and 5734 transitions.
[2020-11-25 02:12:54,912 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 02:12:54,912 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4954 states and 5734 transitions.
[2020-11-25 02:12:54,920 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:12:54,930 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4954 states to 4930 states and 5706 transitions.
[2020-11-25 02:12:54,930 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 223
[2020-11-25 02:12:54,930 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 223
[2020-11-25 02:12:54,931 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4930 states and 5706 transitions.
[2020-11-25 02:12:54,934 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 02:12:54,934 INFO  L728         BuchiCegarLoop]: Abstraction has 4930 states and 5706 transitions.
[2020-11-25 02:12:54,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4930 states and 5706 transitions.
[2020-11-25 02:12:54,967 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4930 to 4928.
[2020-11-25 02:12:54,968 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4928 states.
[2020-11-25 02:12:54,973 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4928 states to 4928 states and 5703 transitions.
[2020-11-25 02:12:54,973 INFO  L751         BuchiCegarLoop]: Abstraction has 4928 states and 5703 transitions.
[2020-11-25 02:12:54,973 INFO  L631         BuchiCegarLoop]: Abstraction has 4928 states and 5703 transitions.
[2020-11-25 02:12:54,973 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 02:12:54,973 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4928 states and 5703 transitions.
[2020-11-25 02:12:54,977 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 02:12:54,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 02:12:54,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 02:12:54,979 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 02:12:54,979 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_TokenERC200 := false;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4899]              assume null == 0;
[L4900]  CALL        call this := FreshRefGenerator__success();
[L2465]              havoc newRef;
[L2466]              assume Alloc[newRef] == false;
[L2467]              Alloc[newRef] := true;
[L2468]              assume newRef != null;
[L4900]  RET         call this := FreshRefGenerator__success();
[L4901]              assume now >= 0;
[L4902]              assume DType[this] == NOL;
[L4903]              assume msgvalue_MSG == 0;
[L4904]              gas := gas - 53000;
[L4905]  CALL        call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L4906]              assume !revert && gas >= 0;
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND FALSE  !(!(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2733]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] - __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2734]              __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2735]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] + __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2736]  COND TRUE   __tmp__DType[this] == NOL
[L2737]  CALL        call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2738]  COND TRUE   revert
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

Loop:
[L4909]  CALL        call CorralChoice_NOL(this);
[L4684]              havoc msgsender_MSG;
[L4685]              havoc msgvalue_MSG;
[L4686]              havoc choice;
[L4687]              havoc __ret_0_owner;
[L4688]              havoc newOwner_s35;
[L4689]              havoc __ret_0_name;
[L4690]              havoc __ret_0_symbol;
[L4691]              havoc __ret_0_decimals;
[L4692]              havoc __ret_0_totalSupply;
[L4693]              havoc arg662_s0;
[L4694]              havoc __ret_0_balanceOf;
[L4695]              havoc arg663_s0;
[L4696]              havoc arg664_s0;
[L4697]              havoc __ret_0_allowance;
[L4698]              havoc initialSupply_s124;
[L4699]              havoc tokenName_s124;
[L4700]              havoc tokenSymbol_s124;
[L4701]              havoc _to_s221;
[L4702]              havoc _value_s221;
[L4703]              havoc success_s221;
[L4704]              havoc _from_s261;
[L4705]              havoc _to_s261;
[L4706]              havoc _value_s261;
[L4707]              havoc success_s261;
[L4708]              havoc _spender_s289;
[L4709]              havoc _value_s289;
[L4710]              havoc success_s289;
[L4711]              havoc _spender_s327;
[L4712]              havoc _value_s327;
[L4713]              havoc _extraData_s327;
[L4714]              havoc success_s327;
[L4715]              havoc _value_s363;
[L4716]              havoc success_s363;
[L4717]              havoc _from_s418;
[L4718]              havoc _value_s418;
[L4719]              havoc success_s418;
[L4720]              havoc __ret_0_sellPrice;
[L4721]              havoc __ret_0_buyPrice;
[L4722]              havoc arg665_s0;
[L4723]              havoc __ret_0_frozenAccount;
[L4724]              havoc initialSupply_s452;
[L4725]              havoc tokenName_s452;
[L4726]              havoc tokenSymbol_s452;
[L4727]              havoc target_s560;
[L4728]              havoc mintedAmount_s560;
[L4729]              havoc target_s581;
[L4730]              havoc freeze_s581;
[L4731]              havoc newSellPrice_s599;
[L4732]              havoc newBuyPrice_s599;
[L4733]              havoc amount_s659;
[L4734]              havoc tmpNow;
[L4735]              havoc gas;
[L4736]              assume gas > 4000000 && gas <= 8000000;
[L4737]              tmpNow := now;
[L4738]              havoc now;
[L4739]              assume now > tmpNow;
[L4740]              assume msgsender_MSG != null;
[L4741]              assume DType[msgsender_MSG] != owned;
[L4742]              assume DType[msgsender_MSG] != tokenRecipient;
[L4743]              assume DType[msgsender_MSG] != TokenERC20;
[L4744]              assume DType[msgsender_MSG] != NOL;
[L4745]              Alloc[msgsender_MSG] := true;
[L4746]  COND FALSE  !(choice == 22)
[L4752]  COND FALSE  !(choice == 21)
[L4758]  COND FALSE  !(choice == 20)
[L4764]  COND FALSE  !(choice == 19)
[L4770]  COND FALSE  !(choice == 18)
[L4776]  COND FALSE  !(choice == 17)
[L4782]  COND FALSE  !(choice == 16)
[L4788]  COND FALSE  !(choice == 15)
[L4794]  COND FALSE  !(choice == 14)
[L4801]  COND TRUE   choice == 13
[L4802]              gas := gas - 21000;
[L4803]  COND TRUE   gas >= 0
[L4804]              assume _value_s261 >= 0 && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4805]              assume msgvalue_MSG == 0;
[L4806]  CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND FALSE  !(!(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2733]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] - __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2734]              __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2735]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] + __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2736]  COND TRUE   __tmp__DType[this] == NOL
[L2737]  CALL        call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2738]  COND TRUE   revert
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L4909]  RET         call CorralChoice_NOL(this);

[2020-11-25 02:12:54,982 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:54,982 INFO  L82        PathProgramCache]: Analyzing trace with hash 1214743474, now seen corresponding path program 1 times
[2020-11-25 02:12:54,983 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:54,992 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:12:55,003 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:12:55,058 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:55,058 INFO  L82        PathProgramCache]: Analyzing trace with hash -1681940144, now seen corresponding path program 1 times
[2020-11-25 02:12:55,059 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:55,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:12:55,068 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:12:55,080 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 02:12:55,081 INFO  L82        PathProgramCache]: Analyzing trace with hash -2136544319, now seen corresponding path program 1 times
[2020-11-25 02:12:55,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 02:12:55,095 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:12:55,111 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
[2020-11-25 02:12:55,454 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 189
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 6271 to 12541
[2020-11-25 02:12:55,833 WARN  L188               SmtUtils]: Spent 343.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 138
[2020-11-25 02:12:56,132 WARN  L188               SmtUtils]: Spent 298.00 ms on a formula simplification that was a NOOP. DAG size: 308
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 7933 to 15859
[2020-11-25 02:12:57,214 WARN  L188               SmtUtils]: Spent 1.06 s on a formula simplification. DAG size of input: 256 DAG size of output: 256
[2020-11-25 02:12:58,396 WARN  L188               SmtUtils]: Spent 1.18 s on a formula simplification. DAG size of input: 323 DAG size of output: 292
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12541 to 25073
Garbage collection #9: 25073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 25073 to 50131
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #8: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 02:12:58,823 WARN  L188               SmtUtils]: Spent 399.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 179
[2020-11-25 02:12:59,127 WARN  L188               SmtUtils]: Spent 303.00 ms on a formula simplification that was a NOOP. DAG size: 368
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 02:13:00,174 WARN  L188               SmtUtils]: Spent 1.04 s on a formula simplification. DAG size of input: 299 DAG size of output: 299
[2020-11-25 02:13:00,570 WARN  L188               SmtUtils]: Spent 393.00 ms on a formula simplification that was a NOOP. DAG size: 299
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
[2020-11-25 02:13:02,612 WARN  L188               SmtUtils]: Spent 2.02 s on a formula simplification. DAG size of input: 228 DAG size of output: 206
[2020-11-25 02:13:02,626 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 02:13:03,317 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 189
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-11-25 02:13:03,572 WARN  L188               SmtUtils]: Spent 247.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 138
[2020-11-25 02:13:03,789 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification that was a NOOP. DAG size: 308
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 02:13:04,807 WARN  L188               SmtUtils]: Spent 1.01 s on a formula simplification. DAG size of input: 256 DAG size of output: 256
[2020-11-25 02:13:06,614 WARN  L188               SmtUtils]: Spent 1.80 s on a formula simplification. DAG size of input: 322 DAG size of output: 292
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #8: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 02:13:07,622 WARN  L188               SmtUtils]: Spent 976.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 195
[2020-11-25 02:13:08,336 WARN  L188               SmtUtils]: Spent 712.00 ms on a formula simplification that was a NOOP. DAG size: 384
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 02:13:11,522 WARN  L188               SmtUtils]: Spent 3.16 s on a formula simplification. DAG size of input: 333 DAG size of output: 315
[2020-11-25 02:13:13,685 WARN  L188               SmtUtils]: Spent 2.16 s on a formula simplification. DAG size of input: 538 DAG size of output: 521
Garbage collection #1: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #2: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #3: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #4: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #5: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #6: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #7: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
[2020-11-25 02:13:14,598 WARN  L188               SmtUtils]: Spent 865.00 ms on a formula simplification. DAG size of input: 252 DAG size of output: 238
[2020-11-25 02:13:15,142 WARN  L188               SmtUtils]: Spent 527.00 ms on a formula simplification that was a NOOP. DAG size: 360
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 02:13:20,423 WARN  L188               SmtUtils]: Spent 5.25 s on a formula simplification. DAG size of input: 359 DAG size of output: 262
[2020-11-25 02:13:22,849 WARN  L188               SmtUtils]: Spent 2.42 s on a formula simplification. DAG size of input: 386 DAG size of output: 385
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #2: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #3: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #4: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #5: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #6: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #7: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #8: 17419 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 17419 to 34819
Garbage collection #9: 34819 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 34819 to 69623
Garbage collection #10: 69623 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 69623 to 119617
Garbage collection #11: 119617 nodes / 0 free / 0.002s / 0.006s total
Resizing node table from 119617 to 169607
[2020-11-25 02:13:33,922 WARN  L188               SmtUtils]: Spent 10.90 s on a formula simplification. DAG size of input: 812 DAG size of output: 381
[2020-11-25 02:13:33,943 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:33,963 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 02:13:33,971 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:13:33 BasicIcfg
[2020-11-25 02:13:33,971 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 02:13:33,971 INFO  L168              Benchmark]: Toolchain (without parser) took 60937.15 ms. Allocated memory was 1.0 GB in the beginning and 3.2 GB in the end (delta: 2.2 GB). Free memory was 935.2 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,972 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,972 INFO  L168              Benchmark]: Boogie Preprocessor took 105.23 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,972 INFO  L168              Benchmark]: UtopiaSpecLang took 74.48 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,972 INFO  L168              Benchmark]: Boogie Printer took 16.09 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,973 INFO  L168              Benchmark]: RCFGBuilder took 729.19 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 779.5 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,973 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.72 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,973 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1265.95 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 187.2 MB). Free memory was 775.9 MB in the beginning and 906.9 MB in the end (delta: -131.0 MB). Peak memory consumption was 161.2 MB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,974 INFO  L168              Benchmark]: BlockEncodingV2 took 170.18 ms. Allocated memory is still 1.2 GB. Free memory was 906.9 MB in the beginning and 832.6 MB in the end (delta: 74.3 MB). Peak memory consumption was 74.3 MB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,974 INFO  L168              Benchmark]: BuchiAutomizer took 58535.33 ms. Allocated memory was 1.2 GB in the beginning and 3.2 GB in the end (delta: 2.0 GB). Free memory was 832.6 MB in the beginning and 2.7 GB in the end (delta: -1.9 GB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-11-25 02:13:33,976 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5486 locations, 9675 edges
  - StatisticsResult: Encoded RCFG
    5430 locations, 9524 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 105.23 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.48 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 908.4 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.09 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 729.19 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 779.5 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.72 ms. Allocated memory is still 1.0 GB. Free memory was 779.5 MB in the beginning and 775.9 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1265.95 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 187.2 MB). Free memory was 775.9 MB in the beginning and 906.9 MB in the end (delta: -131.0 MB). Peak memory consumption was 161.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 170.18 ms. Allocated memory is still 1.2 GB. Free memory was 906.9 MB in the beginning and 832.6 MB in the end (delta: 74.3 MB). Peak memory consumption was 74.3 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 58535.33 ms. Allocated memory was 1.2 GB in the beginning and 3.2 GB in the end (delta: 2.0 GB). Free memory was 832.6 MB in the beginning and 2.7 GB in the end (delta: -1.9 GB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2322 locations, 3072 edges
  - StatisticsResult: BuchiProgram size
    5486 locations, 9675 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.5 modules have a trivial ranking function, the largest among these consists of 23 locations. The remainder module has 4928 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 58.4s and 6 iterations.  TraceHistogramMax:1. Analysis of lassos took 40.6s. Construction of modules took 14.2s. BÃ¼chi inclusion checks took 2.8s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 5 MinimizatonAttempts, 1555 StatesRemovedByMinimization, 4 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 4940 states and ocurred in iteration 1.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 29996 SDtfs, 23893 SDslu, 70025 SDs, 0 SdLazy, 64091 SolverSat, 3973 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 14.2s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639953) = (new NOL)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639955, initialSupply : 115792089237316195423570985008687907853269984665640564039457584007913129639949, tokenName : 115792089237316195423570985008687907853269984665640564039457584007913129639952, tokenSymbol : 115792089237316195423570985008687907853269984665640564039457584007913129639938});
[L1205]              havoc __exception;
[L1206]              revert := false;
[L1207]  COND FALSE  !(__exception)
[L1234]  CALL        call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3040]  CALL        call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2501]  CALL        call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2484]              assume msgsender_MSG != null;
[L2485]              Balance[this] := 0;
[L2486]              owner_owned[this] := null;
[L2488]              owner_owned[this] := msgsender_MSG;
[L2501]  RET         call owned_owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2502]  COND FALSE  !(revert)
[L3040]  RET         call owned_owned__success(this, msgsender_MSG, msgvalue_MSG);
[L3041]  COND FALSE  !(revert)
[L3044]  CALL        call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L2629]  CALL        call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2597]              assume msgsender_MSG != null;
[L2598]              Balance[this] := 0;
[L2599]              name_TokenERC20[this] := 1234253568;
[L2600]              symbol_TokenERC20[this] := 1234253568;
[L2601]              decimals_TokenERC20[this] := 18;
[L2602]              totalSupply_TokenERC20[this] := 0;
[L2603]              balanceOf_TokenERC20[this] := zeroRefintArr();
[L2604]              sum_balanceOf0[this] := 0;
[L2605]              allowance_TokenERC20[this] := zeroRefRefintArr();
[L2606]              sum_allowance1[this] := 0;
[L2608]              __var_1 := decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2609]              totalSupply_TokenERC20[this] := nonlinearMul(initialSupply_s124, nonlinearPow(10, decimals_TokenERC20[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2610]              sum_balanceOf0[this] := sum_balanceOf0[this] - balanceOf_TokenERC20[this][msgsender_MSG];
[L2611]              balanceOf_TokenERC20[this][msgsender_MSG] := totalSupply_TokenERC20[this];
[L2612]              sum_balanceOf0[this] := sum_balanceOf0[this] + balanceOf_TokenERC20[this][msgsender_MSG];
[L2613]              name_TokenERC20[this] := tokenName_s124;
[L2614]              symbol_TokenERC20[this] := tokenSymbol_s124;
[L2629]  RET         call TokenERC20_TokenERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s124, tokenName_s124, tokenSymbol_s124);
[L2630]  COND FALSE  !(revert)
[L3044]  RET         call TokenERC20_TokenERC20__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3045]  COND FALSE  !(revert)
[L3048]  CALL        call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3014]              assume msgsender_MSG != null;
[L3015]              Balance[this] := 0;
[L3016]              sellPrice_NOL[this] := 0;
[L3017]              buyPrice_NOL[this] := 0;
[L3018]              frozenAccount_NOL[this] := zeroRefboolArr();
[L3048]  RET         call NOL_NOL_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L3049]  COND FALSE  !(revert)
[L1234]  RET         call NOL_NOL__success(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
[L1235]              assume !revert && gas >= 0;
[L4905]  RET         call NOL_NOL(this, msgsender_MSG, msgvalue_MSG, initialSupply_s452, tokenName_s452, tokenSymbol_s452);
TokenERC20(115792089237316195423570985008687907853269984665640564039457584007913129639953).transferFrom~address~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639940, _from : 115792089237316195423570985008687907853269984665640564039457584007913129639950, _to : 0, _value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND FALSE  !(!(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2733]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] - __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2734]              __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2735]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] + __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2736]  COND TRUE   __tmp__DType[this] == NOL
[L2737]  CALL        call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2738]  COND TRUE   revert
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);

Loop:
TokenERC20(115792089237316195423570985008687907853269984665640564039457584007913129639953).transferFrom~address~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639940, _from : 115792089237316195423570985008687907853269984665640564039457584007913129639955, _to : 0, _value : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != _from_s261 && p1 != _to_s261) && (p2 != _from_s261 || p3 != msgsender_MSG)) && _from_s261 != _to_s261) && _value_s261 <= balanceOf_TokenERC20[this][_from_s261]) && _value_s261 <= allowance_TokenERC20[this][_from_s261][msgsender_MSG]) && balanceOf_TokenERC20[this][_to_s261] + _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _value_s261 >= 0) && _value_s261 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_to_s261] >= 0) && balanceOf_TokenERC20[this][_to_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balanceOf_TokenERC20[this][_from_s261] >= 0) && balanceOf_TokenERC20[this][_from_s261] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] >= 0) && allowance_TokenERC20[this][_from_s261][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_TokenERC200 := true;
[L3]                 call_transferFrom_TokenERC200 := false;
[L3]                 revert := revert_hold;
[L490]               havoc __exception;
[L491]               revert := false;
[L492]   COND TRUE   __exception
[L493]               __tmp__Balance := Balance;
[L494]               __tmp__DType := DType;
[L495]               __tmp__Alloc := Alloc;
[L496]               __tmp__balance_ADDR := balance_ADDR;
[L497]               __tmp__M_Ref_int := M_Ref_int;
[L498]               __tmp__sum_balanceOf0 := sum_balanceOf0;
[L499]               __tmp__alloc_allowance_TokenERC20_lvl0 := alloc_allowance_TokenERC20_lvl0;
[L500]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L501]               __tmp__sum_allowance1 := sum_allowance1;
[L502]               __tmp__M_Ref_bool := M_Ref_bool;
[L503]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L504]               __tmp__Length := Length;
[L505]               __tmp__now := now;
[L506]               __tmp__owner_owned := owner_owned;
[L507]               __tmp__name_TokenERC20 := name_TokenERC20;
[L508]               __tmp__symbol_TokenERC20 := symbol_TokenERC20;
[L509]               __tmp__decimals_TokenERC20 := decimals_TokenERC20;
[L510]               __tmp__totalSupply_TokenERC20 := totalSupply_TokenERC20;
[L511]               __tmp__balanceOf_TokenERC20 := balanceOf_TokenERC20;
[L512]               __tmp__allowance_TokenERC20 := allowance_TokenERC20;
[L513]               __tmp__sellPrice_NOL := sellPrice_NOL;
[L514]               __tmp__buyPrice_NOL := buyPrice_NOL;
[L515]               __tmp__frozenAccount_NOL := frozenAccount_NOL;
[L516]   CALL        call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2729]  COND FALSE  !(!(_value_s261 <= __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG]))
[L2733]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] - __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2734]              __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] := (__tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG] - _value_s261) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2735]              __tmp__sum_allowance1[_from_s261] := __tmp__sum_allowance1[_from_s261] + __tmp__allowance_TokenERC20[this][_from_s261][msgsender_MSG];
[L2736]  COND TRUE   __tmp__DType[this] == NOL
[L2737]  CALL        call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L3057]              __var_6 := null;
[L3058]  COND TRUE   !(_to_s522 != null)
[L3059]              revert := true;
[L2737]  RET         call _transfer~address~address~uint256_NOL__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L2738]  COND TRUE   revert
[L516]   RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20__fail(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);
[L517]               assume revert || gas < 0;
[L4806]  RET         call success_s261 := transferFrom~address~address~uint256_TokenERC20(this, msgsender_MSG, msgvalue_MSG, _from_s261, _to_s261, _value_s261);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
